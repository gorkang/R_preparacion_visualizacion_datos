# Control de cambios con Git y Github


```{r}
#| results: "asis"
#| echo: false
source("../_common.R")
```

---  

#### Paquetes para este capítulo {-}

```{r}
#| label: setup
#| echo: true

  if (!require('afex')) install.packages('afex'); library('afex')
  if (!require('correlation')) install.packages("correlation"); library('correlation')
  if (!require('corrr')) install.packages('corrr'); library('corrr')
  if (!require('dplyr')) install.packages('dplyr'); library('dplyr')
  if (!require('DT')) install.packages('DT'); library('DT')
  if (!require('ggraph')) install.packages('ggraph'); library('ggraph')
  if (!require('here')) install.packages('here'); library('here')
  if (!require('gtsummary')) install.packages('gtsummary'); library('gtsummary')
  if (!require('knitr')) install.packages('knitr'); library('knitr')
  if (!require('papaja')) install.packages("papaja"); library('papaja')
  if (!require('parameters')) install.packages('parameters'); library('parameters')
  if (!require('remotes')) install.packages('remotes'); library('remotes')
  if (!require('renv')) install.packages("renv"); library('renv')
  if (!require('report')) install.packages("report"); library('report')
  if (!require('rticles')) install.packages('rticles'); library('rticles')
  if (!require('see')) install.packages("see"); library('see')
  if (!require('sjPlot')) install.packages('sjPlot'); library('sjPlot')
  if (!require('stringi')) install.packages('stringi'); library('stringi')
  if (!require('tinytex')) install.packages('tinytex'); library('tinytex')
  if (!require('usethis')) install.packages('usethis'); library('usethis')
  
```

---  


::: {.callout-important}

### Dependencias

Vamos a necesitar [Git](https://git-scm.com/) para poder trabajar:  

**Instalar Git**  

Ver instrucciones para [Windows](https://happygitwithr.com/install-git.html#install-git-windows), [Mac](https://happygitwithr.com/install-git.html#macos) y [Linux](https://happygitwithr.com/install-git.html#linux).  

<span style = "font-size: 11px;">Windows: en el paso *Adjusting your PATH environment*, selecciona `Git from the command line and also from 3rd-party software`</span>


:::


## Git

<div style= "float:right;position: relative; margin:0px 0px 0px 50px;">
![SOURCE: https://xkcd.com/1597/](../data/images/git.png)    
</div>

Un segundo elemento que nos va a ayudar a trabajar en equipo, y a evitar problemas en proyectos relativamente complejos es el uso de un sistema de control de versiones como [Git](https://git-scm.com/). Los proyectos de RStudio hacen especialmente sencillo usar algunas funcionalidades básicas de Git.   

Algunas referencias útiles:  

* [OhshitGit website](http://ohshitgit.com/?utm_content=buffera425b&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer)  
* [Git in practice](https://github.com/GitInPractice/GitInPractice#readme)  
* [**happygitwithr**](http://happygitwithr.com/)  

<div style="clear: both;"></div>


## Github

<div style= "float:left;position: relative; margin:0px 30px 0px 0px;">
![SOURCE: [github.githubassets.com](https://github.githubassets.com/images/modules/open_graph/github-octocat.png)](../data/images/github-octocat.png)
</div>

[Github](https://github.com) es una plataforma web muy popular donde almacenar proyectos de programación que usa como motor. Muchos de los paquetes de R, el mismo [RStudio](https://github.com/rstudio), etc, tienen repositorios abiertos en Github. Una de las ventajas fundamentales de usar Github es que esta plataforma integra algunas herramientas para hacer más sencillo el control de versiones, como el [pull request](https://help.github.com/en/articles/creating-a-pull-request), que nos permite combinar ramas de proyectos sin apenas problemas.       

Github tiene un programa especial para estudiantes: https://education.github.com/  


  
## Clonar un repositorio existente {#clonar-repo}

Algo que podemos hacer con todos los repositorios de Github es clonarlos localmente:  


::: {.callout-note}

## Clonar repositorio Github

**Primero**, copiamos la `repository URL` del repo de [Github](https://github.com/) (ver imagen de abajo). Será algo similar a `https://github.com/VUESTRO_NOMBRE_DE_USUARIO/NOMBRE_REPOSITORIO.git`  

<div style= "float:left;position: relative; margin:0px 30px 0px 0px;">
![](../data/images/git-clone.png)
</div>  


<div style="clear: both;"></div>


**Segundo**, en RStudio: `File > New Project > Version Control > Git`  

::: {.content-visible when-format="html"}
![](../data/images/rstudio-github.gif)
:::

:::

## Crear un proyecto en RStudio asociado a Github  

Tener nuestros proyectos de RStudio asociados a repositorios en Github es muy útil para poder compartir el código y datos asociados a nuestras investigaciones, disponer de una copia de seguridad online, y, si lo usamos adecuadamente, detectar de manera más rápida cual de los últimos cambios es responsable de los errores que nos aparezcan.  

::: {.callout-important}

### Creando personal access token

La primera vez que usemos Github asociado a RStudio tendremos que [crear un personal access token](https://docs.github.com/en/enterprise-server@3.4/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token).  


**Método automático:**

`usethis::create_github_token()`  


**Método manual, como los animales:**  

En tu página de Github, haz click en tu icono (arriba a la derecha) -> Settings -> Developer settings -> Personal access tokens -> [Generate new token] -> Give gist, repo and workflow permissions.

:::


La manera más sencilla de tener un proyecto de RStudio vinculado a repositorio de Github es empezar creando un repositorio en Github. 

::: {.callout-note}

### Empezando desde 0 [recomendado]

Podemos empezar creando un repositorio en Github, para después clonarlo localmente. Para eso, en [Github](https://github.com/):  

1. Creamos repositorio nuevo  

2. `Initialize this repository with a README`  

3. [Clonar repositorio](#clonar-repo)  

:::

Alternativamente, si ya tenemos un proyecto de RStudio y hemos avanzado en nuestra preparación, análisis de datos, etc. podemos usar `usethis::use_github()` para que nos cree y asocie automáticamente un repositorio de Github.  


::: {.callout-note}

### Si ya tenemos el proyecto de RStudio creado


**Preparación**

1. Crear un repositorio local de git (solo si no lo tenemos aún): `usethis::use_git()` (se crea una carpeta oculta llamada .git)  

2. Insertar token en archivo `.Renviron` (si no lo tienes, ver arriba, 
`Creando personal access token`): `usethis::edit_r_environ()`  


**Asociando a repositorio en Github**

1. Crear Github repo: `usethis::use_github()`   

2. Empujar el repositorio local a Github: `git push --set-upstream origin master`  

:::
  

## Ejercicios {.ejercicio -}

**Ejercicio 1: Github-RStudio**

Vamos a poner a prueba lo anterior, creando un repositorio en Github llamado `Github_Rstudio`, y clonándolo para tener un proyecto de RStudio asociado.  

1. Abre una cuenta en [Github](https://github.com/) y/o haz login  

2. Crea un repositorio en Github (después podrás borrarlo si quieres)  

3. Sigue los pasos de arriba para clonar el repositorio de Github  


---  


**Ejercicio 2:  RStudio-Github**

Ahora podemos usar el método inverso. Si tenemos un proyecto de RStudio, vamos a crear un repositorio de Github asociado.    

1. [Crea un nuevo repositorio de RStudio](07-rmarkdown.html#proyectos-de-r-studio). Si marcas la pestaña `Create a git repository` te ahorrarás uno de los pasos (`usethis::use_git()`)  

2. Crea un script donde hagas algo muy sencillo (puedes copiar algún fragmento de código de temas anteriores)  

3. Sigue los pasos de arriba para crear automáticamente un repositorio de Github asociado  



## Commits

Git es extraordinariamente potente, pero vamos a empezar por la funcionalidad básica, `commit`(enviar/encomendar) archivos.  

Si partimos de un nuevo proyecto de RStudio llamado `mi_primer_proyecto` en el que hemos añadido un repositorio de Git (`usethis::use_git()`), y creado un nuevo archivo llamado `mi_primer_archivo.R`, en el panel `Git` veremos algo similar a esto:  

![](../data/images/git_my_first_file.png)

Si hacemos cambios en `mi_primer_archivo.R` y hacemos click en Commit ![Commit](../data/images/git-commit.png), aparecerá una ventana para revisar los cambios. Hacemos doble click en `mi_primer_archivo.R`, y veremos que se pone en verde. Añadimos un `Commit message`, y estamos listos para hacer click en el botón `Commit`.  
![](../data/images/git_mi_first_commit.png)

A partir de este momento, cualquier cambio en `mi_primer_archivo.R` será detectado por Git.

Por ejemplo, si añadimos una línea, veremos que el icono junto al archivo se convierte en una M en un recuadro azul. 

![](../data/images/git_modified_files.png)  

 Si hacemos de nuevo click en Commit ![Commit](../data/images/git-commit.png), podemos ver los cambios en `mi_primer_archivo.R`.  
 
![](../data/images/git_modified_files2.png)  

## Pull, Push

Con los comandos pull y push:  

![](../data/images/git-pull.png) **Pull**: nos aseguramos que nuestro repositorio local esta actualizado  

![](../data/images/git-push.png) **Push**: subimos los cambios commiteados de la rama a Github  


---  


### Ejercicio {.ejercicio -}

**Nuestro primer commit**  

1. Usando el proyecto de RStudio de antes, crea un nuevo documento de Quarto (.qmd):  

![](../data/images/new-qmd-file.png)  

2. Haz un commit de ese archivo y súbelo (push) a Github (asegúrate que esta allá!). No olvides hacer un pull!  

3. Ahora haz cambios en el archivo localmente. Una vez hechos:

    + Commitealos  
    + Súbelos (Pull & Push)  
    + Sincroniza tu repo local (Pull final)  

### {-}  



## Workflow  


<div style= "float:left;position: relative; margin:0px 30px 0px 0px;">
![SOURCE: [nvie.com](https://nvie.com/posts/a-successful-git-branching-model/)](../data/images/git-basic.png)  
</div>

Hay diferentes filosofías sobre cual es la mejor manera de trabajar con Git.

En [este post](https://nvie.com/posts/a-successful-git-branching-model/) por Vincent Driessen podéis ver una explicación bien detallada, complementada con imágenes como la que se ve a continuación.  

El modelo básico implica la existencia de dos ramas. Una `main` o master ("producción"), donde tenemos código que siempre debe funcionar, y una `development` (para desarrollo), donde experimentamos, rompemos cosas, etc.  

Podéis ver un manual super completo llamado [Happy Git and GitHub for the useR](http://happygitwithr.com/) elaborado por Jenny Bryan, Jim Hester, entre otros.  

<div style="clear: both;"></div>

---  


En RStudio podemos trabajar gráficamente, Usando el panel `Git`.  

![](../data/images/git-rstudio.png)  


::: {.callout-note}

### Usando el entorno gráfico

**Empezamos en la rama master**:

0. **Pull** ![](../data/images/git-pull.png) : nos aseguramos que nuestro repositorio local esta actualizado  
1. **Branch** ![](../data/images/git-branch.png) : Creamos nueva rama llamada **development**  
2. Hacemos cambios en nuestros scripts  
3. **Commit** ![](../data/images/git-commit.png) : Commiteamos los cambios  
4. **Push** ![](../data/images/git-push.png) : subimos la rama a Github  
5. **Pull request** (En Github):
- Compare & Pull request  
6. **Pull** ![](../data/images/git-pull.png) : nos aseguramos que nuestro repositorio local esta actualizado  


::: {.callout-tip collapse="true"}

### Como hacerlo usando el `terminal`


  <span style="color: orange;">

  0. **Pull**: nos aseguramos que nuestro repositorio local esta actualizado: `git pull` 
  1. **Branch**: Creamos nueva rama llamada **development**: `git checkout -b development`  
  2. Hacemos cambios en nuestros scripts  
  3. **Commit**: Commiteamos los cambios  
  - Añadimos archivos: `git add foo.txt`  
  - Hacemos el commit: `git commit --message "A commit message"`  
  4. **Push**: subimos la rama a Github: `git push origin development`  
  5. **Pull request** (En Github):
  - Compare & Pull request
  6. **Pull**: nos aseguramos que nuestro repositorio local esta actualizado: `git pull`   
    
  </span>


:::

:::


### Pull request en 3 sencillos pasos

Los `Pull request` son una funcionalidad de Github que facilita colaborar con otras personas, contribuir a proyectos, etc. En esencia, automatizan la comprobación de cambios y, si no hay conflictos, permiten combinar el código nuevo con unos pocos clicks.  

Después de hacer el push de arriba (paso 4), al entrar en nuestro repositorio de Github deberíamos ver algo parecido a lo siguiente (si no lo vemos, ir a **branches**). La única dificultad es saber cual de los botones verdes apretar:  

---  

#### Paso 1. Compare & pull request  {-}

![](../data/images/pull-request-1.png){ width=70% }  
---  

#### Paso 2. Create pull request {-}

![](../data/images/pull-request-2.png){ width=70% }  
---  

#### Paso 3. Merge pull request  {-}


![](../data/images/pull-request-3.png){ width=70% }  

+  Borrar rama antigua  

---  

## Bibliografía {.bibliografia -}

[Guia de estilo del tidyverse](https://style.tidyverse.org/)  

[Hadley Wickham's Style guide](http://adv-r.had.co.nz/Style.html)  

[Happy Git and GitHub for the useR](https://happygitwithr.com)  

[targets](https://github.com/ropensci/targets)  

Scheel, A. M., Schijen, M., & Lakens, D. (in press). An excess of positive results: Comparing the standard Psychology literature with Registered Reports. Advances in Methods and Practices in Psychological Science.  

Xie, Y., Allaire, J. J., & Grolemund, G. (2018). R Markdown: The Definitive Guide. CRC Press. https://bookdown.org/yihui/rmarkdown/  

Yihui Xie (2018). bookdown: Authoring Books and Technical Documents with R Markdown https://bookdown.org/yihui/bookdown/markdown-syntax.html  

* Mas cosas sobre reproducibilidad:
  + [Reproducibility project: Psychology](https://osf.io/ezcuj/)
  + [Many labs 2](https://osf.io/8cd4r/)
