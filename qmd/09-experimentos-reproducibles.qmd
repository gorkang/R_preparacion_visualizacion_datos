# Experimentos reproducibles


```{r}
#| results: "asis"
#| echo: false
source("../_common.R")
```


![](../data/images/jsPsych-trinity.png)  


En el CSCN usamos distintas tecnologías para desarrollar experimentos. Algunos ejemplos son [Psychopy](https://www.psychopy.org/), [Qualtrics](https://www.qualtrics.com/), [Limesurvey](https://www.limesurvey.org/), [jsPsych](https://www.jspsych.org/plugins/jspsych-preload/), [Gorilla](https://gorilla.sc/), etc. Cada una de estas tiene ventajas y desventajas, y en general es importante tener en cuenta aspectos pragmáticos a la hora de adoptar una u otra tecnología (costo económico, tipo de experimento [EEG/conductual, laboratorio/online]).

Algunos de nosotros hemos optado principalmente por [jsPsych](https://www.jspsych.org/) para experimentos conductuales por tratarse de una librería javascript de **código abierto**, basada en tecnologías web standard, y que puede ser usada online y offline. Dado que en el CSCN disponemos de servidor propio, los costos habituales de hosting no se aplican.

En los últimos años, hemos empezado a trabajar en un conjunto de herramientas ([jsPsychR](https://gorkang.github.io/jsPsychR-manual/)) para crear experimentos usando la librería [jsPsych](https://www.jspsych.org/) con [jsPsychMaker](https://github.com/gorkang/jsPsychMaker), simular participantes con [jspsychMonkeys](https://github.com/gorkang/jsPsychMonkeys) y estandarizar y automatizar la preparación de datos con [jsPsychHelpeR](https://github.com/gorkang/jsPsychHelpeR).

Nuestro objetivo final es tener un gran número de tareas disponibles para ser usadas en el repositorio de [jsPsychMaker](https://github.com/gorkang/jsPsychMaker). Cada una de estas tareas funcionará en [jspsychMonkeys](https://github.com/gorkang/jsPsychMonkeys) para crear participantes virtuales. Cada tarea tendrá un script hermano en [jsPsychHelpeR](https://github.com/gorkang/jsPsychHelpeR) para automatizar la preparación de datos.

Puedes consultar [las tareas disponibles en el manual de jsPsychR](https://gorkang.github.io/jsPsychR-manual/qmd/03-jsPsychMaker.html#available-tasks) para más detalles.

## Pipeline experimental abierto y reproducible

Replicar el experimento a partir de una publicación no es trivial. Una de las fortalezas fundamentales de este sistema es que compartir y reproducir un experimento y los análisis asociados se convierte en algo muy sencillo.

Además, todos los componentes del proceso son código abierto, lo que permite que revisores, colaboradores, etc. puedan verificar que no hay errores en el código.

Con este sistema podremos crear fácilmente el código del experimento, simular datos y preparar datos de manera casi automática (incluyendo anonimización).

El output del sistema es estandarizado, lo que implica que los [nombres de las variables y la estructura de datos son predecibles](https://gorkang.github.io/jsPsychR-manual/qmd/05-jsPsychHelpeR.html#output-dataframes-column-names). Finalmente, la generación de gráficas, tablas, reportes y los análisis son reproducibles.



## Como crear un protocolo experimental

En el [manual de jsPsychR](https://gorkang.github.io/jsPsychR-manual/qmd/03-jsPsychMaker.html#available-tasks) puedes ver las tareas disponibles junto con una breve descripción de cada una de ellas. Alternativamente, puedes ver [el documento con todos los detalles de las tareas disponibles](https://docs.google.com/spreadsheets/d/1Eo0F4GcmqWZ1cghTpQlA4aHsc8kTABss-HAeimE2IqA/edit#gid=0).  

Si quieres consultar los [scripts de las tareas](https://github.com/gorkang/jsPsychMaker/tree/main/canonical_protocol/tasks) puedes hacerlo en la carpeta `canonical_protocol/` del repositorio de [jsPsychMaker](https://github.com/gorkang/jsPsychMaker).  


Sigue los siguientes 3 pasos para crear tu protocolo:  

------------------------------------------------------------------------

1) Instalamos jsPsychMaker:

```{r, eval=FALSE}
remotes::install_github("gorkang/jsPsychMaker")
```

------------------------------------------------------------------------

2) Creamos un protocolo, indicándo que tareas queremos en `canonical_tasks`. Para ver un listado de las tareas disponibles: `jsPsychMaker::list_available_tasks()`


```{r, eval=FALSE}
jsPsychMaker::create_protocol(canonical_tasks = c("AIM", "EAR", "IRI"),
                              folder_output = "~/Downloads/protocol999", # El directorio tiene que incluir un número (se usará como pid)
                              launch_browser = TRUE)
```

------------------------------------------------------------------------

3)  Editamos la configuración del protocolo en la carpeta que hemos indicado en `folder_output`:

-   En `config.js` revisamos la sección `// Main parameters` para asegurarnos que todo esta bien (e.g. `online = false;`)  

------------------------------------------------------------------------

4)  El experimento esta listo para ser utilizado localmente. Podemos hacerlo ejecutando `index.html`

------------------------------------------------------------------------



### Ejercicio 1 {.ejercicio -}

Ve al [ejercicio 1 del siguiente capítulo](10-ejercicios.html#ejercicio-1) 




## Como simular datos

El sistema para simular participantes utiliza [Selenium](https://www.selenium.dev/) dentro de un contenedor de [Docker](https://www.docker.com/). En Linux es trivial su uso, pero en Windows su configuración puede ser más compleja.

Puedes seguir los siguientes pasos, pero si no tienes una instalación funcional de Docker que utilice contenedores Linux, el sistema fallará. En ese caso, quedan las siguientes opciones:

-   Correr un par de participantes manualmente\
-   Usar un ordenador con Linux o crear una partición Linux\
-   Crear una máquina virtual linux desde la que simular participantes. Puedes usar [Virtualbox](https://www.virtualbox.org/wiki/Downloads) para instalar [Ubuntu](https://releases.ubuntu.com/20.04/). Una vez dentro, tendrás que seguir los pasos del [manual para prepara el sistema para correr R y RStudio](https://gorkang.github.io/R_preparacion_visualizacion_datos/preparando-sistema.html#empezando-en-a-b-c)

<!-- sudo apt install libssl-dev libcurl4-openssl-dev libxml2-dev  -->


De nuevo, podemos hacer esto en 3 pasos:  

------------------------------------------------------------------------

1)  Completa el [setup para tu sistema operativo](https://gorkang.github.io/jsPsychR-manual/qmd/04-jsPsychMonkeys.html#setup)

------------------------------------------------------------------------

2)  Instala jsPsychMonkeys:  

```{r, eval=FALSE}
remotes::install_github("gorkang/jsPsychMonkeys")
```

------------------------------------------------------------------------

3)  Lanza monos localmente (puedes ver algunos de los parametros disponibles en el [Manual de jsPsychMonkeys](https://gorkang.github.io/jsPsychR-manual/qmd/04-jsPsychMonkeys.html#parameters-available)):

```{r, eval=FALSE}
jsPsychMonkeys::release_the_monkeys(uid = "1", # Lanza un monos con el user id 1
                                    local_folder_tasks = "~/Downloads/protocol999")


#  Puedes lanzar los monos en paralelo
jsPsychMonkeys::release_the_monkeys(uid = "1:5", # Lanza monos desde el uid 1 hasta el 5
                                    local_folder_tasks = "~/Downloads/protocol999",
                                    sequential_parallel = "parallel", # Lanza los monos en paralelo
                                    number_of_cores = 5) # Usando este número de CPUs

```


------------------------------------------------------------------------

## Como preparar datos

Cada tarea de [jsPsychMaker](https://github.com/gorkang/jsPsychMaker) debería tener un script hermano en [jsPsychHelpeR](https://github.com/gorkang/jsPsychHelpeR) para automatizar la preparación de datos. Una vez tengamos nuestro protocolo listo para el pilotaje, con una función de jsPsychHelpeR crearemos todo lo necesario para que la preparación de datos corra automáticamente.

Una vez más, nuestros 3 pasos:  

------------------------------------------------------------------------

1) Instalamos jsPsychHelper:

```{r, eval=FALSE}
remotes::install_github("gorkang/jsPsychHelpeR")
```


------------------------------------------------------------------------

2)  Usando `run_initial_setup()`, se creará y abrirá un nuevo proyecto de RStudio con todo listo para correr la preparación de datos:


```{r, eval=FALSE}
jsPsychHelpeR::run_initial_setup(pid = '999', 
                                 data_location = "~/Downloads/protocol999/.data", 
                                 folder = "~/Downloads/jsPsychHelpeR999")
```


3) En el nuevo proyecto, tendremos que correr la preparación de datos. Puedes abrir el archivo `run.R`, donde encontrarás algunas instrucciones básicas.    
```{r, eval=FALSE}

# Corremos el pipeline de preparación de datos
targets::tar_make()

```

------------------------------------------------------------------------


4)  Para ver el data frame final listo para el análisis

```{r, eval=FALSE}

  # List available objects
  targets::tar_objects()
  
  # Load DF_analysis file
  targets::tar_load(DF_analysis)
  
  # See DF_analysis dataframe
  DF_analysis
```

------------------------------------------------------------------------



## Como crear un reporte dentro del jsPsychHelpeR

Dentro del proyecto en el que has preparado los datos, simplemente tienes que:  

------------------------------------------------------------------------

1) Abre la plantilla report_analysis.Rmd:  

`rstudioapi::navigateToFile("Rmd/report_analysis.Rmd")`


------------------------------------------------------------------------

2) En el archivo `_targets.R`, en la sección análisis, descomenta las dos líneas de abajo

```

  # tar_render(report_analysis, "Rmd/report_analysis.Rmd",
  #            output_file = paste0("../outputs/reports/report_analysis.html")),
  
```

------------------------------------------------------------------------

3) Finalmente, puedes trabajar en report_analysis.Rmd tal y como hiciste en el capítulo anterior. Cuando acabes, o quieras probar si todo funciona bien, solo tienes que correr `targets::tar_make()` desde la Consola.  


------------------------------------------------------------------------



### Ejercicio FINAL {.ejercicio -}

Ya estáis listas/os para enfrentaros al  [ejercicio FINAL](10-ejercicios.html#ejercicio-final)  


---  




## Como crear una nueva tarea

Tenemos un buen número de tareas disponibles para usar (puedes verlas en el [manual de jsPsychR](https://gorkang.github.io/jsPsychR-manual/qmd/03-jsPsychMaker.html#available-tasks)). Si la tarea que necesitas no está disponible, puedes crearla usando una de las plantillas que encontrarás en [canonical_protocol_clean](https://github.com/gorkang/jsPsychMaker/tree/main/canonical_protocol_clean). Están preparadas para que puedas modificarlas fácilmente y crear tu propia tarea. Alternativamente, también puedes usar como punto de partida las [tareas que tenemos en jsPSychMaker](https://github.com/gorkang/jsPsychMaker/tree/main/canonical_protocol/tasks).

Veamos como crear una nueva tarea a partir de documentos excel usando las plantillas disponibles. [Ver ayuda](https://gorkang.github.io/jsPsychR-manual/qmd/07-NEWtasks.html#create-tasks):

------------------------------------------------------------------------


1) Instalamos jsPsychMaker:

```{r, eval=FALSE}
remotes::install_github("gorkang/jsPsychMaker")
```

2) Copia las plantillas de tareas de ejemplo:

```{r, eval=FALSE}
jsPsychMaker::copy_example_tasks(destination_folder = "~/Downloads/TEST")
```


3)  Ve a la carpeta `~/Downloads/TEST` y borra todas las carpetas menos aquellas que correspondan al [plugin](https://www.jspsych.org/7.0/plugins/list-of-plugins/) que quieras usar. Por ejemplo, `Slider`.   

Adapta `Slider.csv` y los .html con instrucciones a tu nueva tarea.  


4) Si corres `create_protocol()` con los parámetros de abajo, se creará un nuevo protocolo con tu/tus tareas.  

```{r, eval=FALSE}
  jsPsychMaker::create_protocol(folder_tasks = "~/Downloads/TEST/", 
                                folder_output = "~/Downloads/TEST/new_protocol", 
                                launch_browser = TRUE)
```


------------------------------------------------------------------------


### Corrección de la tarea

Para cada tarea en jsPsychMaker, aspiramos a tener un script de corrección en jsPsychHelpeR. Si has creado una nueva tarea, por favor, completa la información de [NUEVAS Tareas jsPsychR](https://docs.google.com/spreadsheets/d/1LAsyTZ2ZRP_xLiUBkqmawwnKWgy8OCwq4mmWrrc_rpQ/edit#gid=0) para que podamos integrar tu tarea en el repositorio común.


### Ejercicio Crear nueva tarea {.ejercicio -}

Ve al [ejercicio 2 del siguiente capítulo](10-ejercicios.html#ejercicio-2---opcional) 





## Como preparar datos para una tarea nueva

Tendremos que crear primero el script de preparación para la nueva tarea. En jsPsychHelpeR tienes una tarea que te ayudará con esto. Si has completado los datos en [NUEVAS Tareas jsPsychR](https://docs.google.com/spreadsheets/d/1LAsyTZ2ZRP_xLiUBkqmawwnKWgy8OCwq4mmWrrc_rpQ/edit#gid=0), el proceso será muy sencillo.


1) Instalamos jsPsychHelper:

```{r, eval=FALSE}
remotes::install_github("gorkang/jsPsychHelpeR")
```

2)  Creamos el nuevo archivo `prepare_NOMBRETAREA()`:

```{r, eval=FALSE}
jsPsychHelpeR::create_new_task(short_name_task = "NAMETASK", get_info_googledoc = TRUE)
```

Esta función:

1.  Creará un nuevo archivo de corrección a partir de la plantilla
2.  Lo adaptará para que funciones con el nombre que le has asignado a la tarea
3.  Abrirá el archivo para que lo puedas editar

Si hay información en todas las pestañas de [NUEVAS Tareas jsPsychR](https://docs.google.com/spreadsheets/d/1LAsyTZ2ZRP_xLiUBkqmawwnKWgy8OCwq4mmWrrc_rpQ/edit#gid=0), en la consola se mostrará información lista para copiar y pegar en tu script sobre:

-   nombres de dimensiones

-   ítems para cada dimensión

-   cálculo de dimensiones

-   ítems invertidos

-   conversión numérica


<!-- ## Bibliografía {.bibliografia -} -->

<!-- Wickham, H., & Grolemund, G. (2016). R for data science: import, tidy, transform, visualize, and model data. O'Reilly Media, Inc. https://r4ds.had.co.nz/   -->
