# Análisis de datos exploratorio

```{r}
#| results: "asis"
#| echo: false
source("../_common.R")
```

---  

#### Paquetes para este capítulo {-}

```{r}
#| label: setup
#| echo: true

if (!require('corrplot')) install.packages('corrplot'); library('corrplot')
if (!require('cowplot')) install.packages('cowplot'); library('cowplot')
if (!require('dplyr')) install.packages('dplyr'); library('dplyr')
if (!require('gapminder')) install.packages('gapminder'); library('gapminder')
if (!require('ggplot2')) install.packages('ggplot2'); library('ggplot2')
if (!require('ggridges')) install.packages('ggridges'); library('ggridges')
if (!require('haven')) install.packages('haven'); library('haven')
if (!require('inspectdf')) install.packages('inspectdf'); library('inspectdf')
if (!require('tidyr')) install.packages('tidyr'); library('tidyr')

```

---  

En este capítulo vamos a aplicar lo que hemos aprendido en los dos capítulos anteriores, combinando transformación de datos con visualización para entender nuestras bases de datos, buscar patrones interesantes, etc. Podéis encontrar una introducción más completa en el manual [R 4 data science - exploratory data analysis](https://r4ds.had.co.nz/exploratory-data-analysis.html).  

## Visualizando distribuciones

Para visualizar la distribución de nuestras variables, tendremos que seguir estrategias diferentes dependiendo de si se trata de variables categóricas o continuas.  

### Variables categóricas  

```{r visualizando-distribuciones-categoricas}

ggplot(gapminder, aes(continent)) +
  geom_bar()

gapminder |> 
  count(continent)

```


### Variables continuas

Para ver la distribución de una variable podemos empezar con un histograma sencillo.

```{r visualizando-distribuciones-continuas1}

ggplot(gapminder, aes(lifeExp)) +
  geom_histogram(binwidth = 1)

```


---

`summarise()` nos permite ver medias, medianas, etc.


```{r visualizando-distribuciones-continuas2}

gapminder |>
  summarise(MEAN = mean(lifeExp),
            MEDIAN = median(lifeExp),
            SD = sd(lifeExp),
            MAX = max(lifeExp),
            MIN = min(lifeExp))

```

Alternativamente, hay funciones como `skimr::skim()` que nos muestran una panorámica muy útil de las variables de nuestro data frame. Corre la función en tu Consola para ver el output completo.

```{r skimr, results='asis'}

skimr::skim(gapminder)

```



### Ejercicios {.ejercicio -}


**Variables individuales**  

Usando el DF `mpg`, visualiza la distribución de las variables `manufacturer`, y `hwy`. Fíjate que la primera es categórica, y la segunda continua.  

::: {.callout-tip collapse="true"}

### Pista

Vas a tener que elegir entre `geom_bar()` y `geom_histogram()`.  

Puedes ver que pasa si usas el parámetro `binwidth = 1` en `geom_histogram()`.  

:::

Usamos `geom_bar()` para visualizar variables discretas:  

```{r ejercicio-variables-individuales, echo=FALSE}

ggplot(mpg, aes(manufacturer)) +
  geom_bar()

```

Para variables continuas, `geom_histogram()`:  

```{r ejercicio-variables-individuales2, echo=FALSE}

ggplot(mpg, aes(hwy)) +
  geom_histogram(binwidth = 1)

```


<BR>

**Ejercicios avanzados**  

Usando como base éste código:

```
ggplot(gapminder, aes(lifeExp, fill = continent)) +
  geom_histogram(binwidth = 1)
```


¿Podrías replicar la visualización de abajo? Queremos mostrar un histograma por continente.

::: {.callout-tip collapse="true"}

### Lo mejor es dividir el proceso en varios pasos

<span style="color: orange;">
1) Empieza con el histograma de arriba. <BR>
2) recuerda que puedes usar el parámetro `fill` (dentro de aes), para asignar un color de relleno por nivel de una variable categórica. <BR>
3) Finalmente, usando facetas podrás crear una gráfica para cada nivel de la variable categórica [facet_wrap()!](#facet_wrap)
</span>

:::


```{r ejercicio-variables-individuales-1, echo=FALSE}
ggplot(gapminder, aes(lifeExp, fill = continent)) +
  geom_histogram(binwidth = 1) +
  facet_wrap(~continent)
```

¿Como podemos añadir el histograma general para poder entender donde se ubica cada continente?

::: {.callout-tip collapse="true"}

### La solución está en el capítulo 1

<span style="color: orange;">El paquete [gghighlight](#gghighlight-y-facet_wrap) es justo lo que necesitas</span>

:::



```{r ejercicio-variables-individuales-2, echo=FALSE}
ggplot(gapminder, aes(lifeExp, fill = continent)) +
  geom_histogram(binwidth = 1) +
  gghighlight::gghighlight() +
  facet_wrap(~continent)
```


También queremos ver los descriptivos por continente, ordenados por el promedio:

```{r ejercicio-variables-individuales-3, echo=FALSE}
gapminder |>
  group_by(continent) |>
  summarise(MEAN = mean(lifeExp),
            MEDIAN = median(lifeExp),
            SD = sd(lifeExp),
            MAX = max(lifeExp),
            MIN = min(lifeExp)) |>
  arrange(MEAN)
```





### Visualizando datasets completos

Cuando nos llega una nueva base de datos, una de las primeras cosas que haremos será familiarizarnos con los datos. Cómo se distribuyen, cual es la relación entre distintas variables, etc.

Convertimos la base a formato largo para poder filtrar los valores perdidos (i.e. 999), y crear una columna donde introducir únicamente valores numéricos:  

```{r initial exploration, fig.height=12}
d <- gapminder |>
  pivot_longer(everything(), values_transform = list(value = as.character)) |>
  filter(value != 999) |> # Si existiera algún código para missing values, filtrar
  mutate(value_NUM = as.numeric(value))
```

Visualiza las variables numéricas usando la variables `value_NUM` que hemos creado:  

```{r initial exploration2, fig.height=12}
d |>
  drop_na(value_NUM) |>
  ggplot(aes(value_NUM)) +
    facet_wrap(~ name, scales = "free") +
    geom_histogram(bins = 15) #+ scale_x_log10()

```

Visualiza variables no numéricas. Para ello, nos quedamos solo con aquellas filas donde `value_NUM` es una valor perdido. Esto es porque cuando antes hicimos `mutate(value_NUM = as.numeric(value))`, aquellos valores de `value` que no se pudieron convertir a numérico, quedaron como `NA` en `value_NUM`:  
```{r initial exploration3, fig.height=12}

d |>
  drop_na(value) |>
  filter(is.na(value_NUM)) |>
  ggplot(aes(value)) +
    facet_wrap(~ name, scales = "free") +
    geom_bar() +
    coord_flip()

```

Hay algunos paquetes que ayudan a la exploración inicial de bases de datos, localización de datos perdidos, etc. Por ejemplo {[inspectdf](https://alastairrushworth.github.io/inspectdf/)}.  


## Covariación

### Variable categórica y continua

Podemos contar el numero de elementos por nivel de la variable o ver densidad, etc. Esto funciona bien si tenemos pocos niveles de la variable categórica.

```{r covariacion-categorica-continua-1}

ggplot(gapminder, aes(lifeExp, colour = continent)) +
  geom_freqpoly(binwidth = 2)

```

<BR>

Podemos usar geom_density_ridges() para combinar puntos con distribuciones:

```{r covariacion-categorica-continua-3}

ggplot(gapminder, aes(lifeExp, continent, fill = continent)) +
  ggridges::geom_density_ridges(
    stat = "binline",
    bins = 20,
    scale = 0.95,
    draw_baseline = FALSE,
    alpha = .3
  ) +
  ggridges::geom_density_ridges(
    jittered_points = TRUE,
    position = "raincloud",
    alpha = 0.5,
    scale = 0.9
  )

```

---

¿Qué estamos viendo exactamente arriba? Hay un punto por cada país, y por cada año, lo que da lugar a algo difícil de interpretar.  

Podemos ver los datos únicamente del último año:

```{r covariacion-categorica-continua-4}

gapminder |> filter(year == max(year)) |> 
  
  ggplot(aes(lifeExp, continent, fill = continent)) +
  ggridges::geom_density_ridges(
    stat = "binline",
    bins = 20,
    scale = 0.95,
    draw_baseline = FALSE,
    alpha = .3
  ) +
  ggridges::geom_density_ridges(
    jittered_points = TRUE,
    position = "raincloud",
    alpha = 0.5,
    scale = 0.9
  )

```

---


### Ejercicio avanzado - Introducción

En este ejercicio vamos a intentar mostrar la como la distribución de esperanza de vida ha cambiado a lo largo del tiempo. Para ello, usando la base `gapminder`, compararemos los valores máximos y mínimos.

Empezamos creando dos gráficos. En cada uno filtramos por el año deseado (e.g. `filter(year == min(year))`). Fíjate que usamos `scale_x_continuous(n.breaks = 10, limits = c(20, 90))` para que ambas gráficas compartan la misma escala en el eje x:

```{r covariacion-categorica-continua-5, echo=TRUE}

A = ggplot(gapminder |> filter(year == min(year)),
           aes(lifeExp, continent, fill = continent)) +
  ggridges::geom_density_ridges(
    stat = "binline",
    bins = 20,
    scale = 0.95,
    draw_baseline = FALSE,
    alpha = .3
  ) +
  ggridges::geom_density_ridges(
    jittered_points = TRUE,
    position = "raincloud",
    alpha = 0.5,
    scale = 0.9
  ) +
  theme(legend.position = "none") +
  scale_x_continuous(n.breaks = 10, limits = c(20, 90)) +
  ggtitle("min")

B = ggplot(gapminder |> filter(year == max(year)),
           aes(lifeExp, continent, fill = continent)) +
  ggridges::geom_density_ridges(
    stat = "binline",
    bins = 20,
    scale = 0.95,
    draw_baseline = FALSE,
    alpha = .3
  ) +
  ggridges::geom_density_ridges(
    jittered_points = TRUE,
    position = "raincloud",
    alpha = 0.5,
    scale = 0.9
  ) +
  theme(legend.position = "none") +
  scale_x_continuous(n.breaks = 10, limits = c(20, 90)) +
  ggtitle("max")

cowplot::plot_grid(A, B)

```


Para visualizar la diferencia entre los valores máximos y mínimos, podemos calcular primero cuanto ha cambiado la esperanza de vida en cada país de cada continente, y crear una gráfica con esa variable:

```{r covariacion-categorica-continua-6}

# Cálculo de la diferencia entre el máximo y mínimo de lifeExp para cada country. 
  # Incluimos continent en group_by() para poder usar esa variable en la gráfica
DF_gapminder_max_min = gapminder |>
  group_by(continent, country) |>
  summarise(lifeExp = max(lifeExp) - min(lifeExp))

ggplot(DF_gapminder_max_min, aes(lifeExp, continent, fill = continent)) +
  ggridges::geom_density_ridges(
    stat = "binline",
    bins = 20,
    scale = 0.95,
    draw_baseline = FALSE,
    alpha = .3
  ) +
  ggridges::geom_density_ridges(
    jittered_points = TRUE,
    position = "raincloud",
    alpha = 0.5,
    scale = 0.9
  ) +
  theme(legend.position = "none") +
  ggtitle("Diferencia entre max y min por país")
```

### Ejercicio {.ejercicio}

Arriba estamos restando la esperanza de vida máxima y mínima de cada país. Sabemos que la esperanza de vida ha mejorado con el tiempo, por lo que asumíamos que era equivalente a comparar los datos más antiguos y los más nuevos.

Pero lo que realmente queremos ver es la diferencia entre 2007 y 1952 ¿Podrías rehacer el cálculo para mostrar la diferencia entre 2007 y 1952?

::: {.callout-tip collapse="true"}

### Pista

<span style="color: orange;">1. Crear un DF para cada 2007 y otro para 1952, renombrando la variable lifeExp (e.g. max_lifeExp y min_lifeExp, respectivamente)<BR>2. Usando la función `full_join()`, juntamos ambas bases (tendrás que usar el parámetro `by = c("country", "continent")`). <BR>3. Con `mutate()` calculamos la diferencia.</span>

:::

```{r covariacion-categorica-continua-7, echo=FALSE}
DF_last_year = gapminder |> filter(year == max(year)) |> select(country, continent, lifeExp) |> rename(lifeExp_max = lifeExp)
DF_first_year = gapminder |> filter(year == min(year)) |> select(country, continent, lifeExp) |> rename(lifeExp_min = lifeExp)

DF_last_first = DF_last_year |>
  full_join(DF_first_year, by = c("country", "continent")) |>
  mutate(DIFF = lifeExp_max - lifeExp_min)

ggplot(DF_last_first, aes(DIFF, continent, fill = continent)) +
  ggridges::geom_density_ridges(stat = "binline", bins = 20, scale = 0.95, draw_baseline = FALSE, alpha = .3) +
  ggridges::geom_density_ridges(jittered_points = TRUE, position = "raincloud", alpha = 0.5, scale = 0.9) +
  theme(legend.position = "none") +
  ggtitle("Diferencia entre 2007 y 1952 por pais")

```




### Dos variables categóricas

Podemos contar el número de valores para los niveles de dos variables categóricas con `count()`:  

```{r covariacion-2categoricas}

diamonds |>
  count(color, cut)

```

Una manera de visualizar esto es con `geom_tile()`:  

```{r covariacion-2categoricas2}

diamonds |>
  count(color, cut) |>
  ggplot(aes(color, cut, fill = n)) +
    geom_tile()

```

### Dos variables continuas

Una herramienta esencial para ver como covarían dos variables continuas es un scatterplot. Usaremos `geom_point()`:  

```{r covariacion-2continuas2}

ggplot(gapminder, aes(lifeExp, gdpPercap)) +
  geom_point()

```

Si añadimos color y cambiamos a escala logarítmica, podemos hacernos una mejor idea:  

```{r covariacion-2continuas3}
ggplot(gapminder, aes(lifeExp, gdpPercap, color = continent)) +
  geom_point(alpha = 1 / 2) +
  scale_y_log10()

```

Con `geom_violin()` podemos hacernos una idea rápida de las distribuciones. Usamos `group = cut_width(lifeExp, 10)` para dividir la variable continua `lifeExp` en chunks de 10 unidades:  

```{r covariacion-2continuas4}
ggplot(gapminder, aes(lifeExp, gdpPercap)) +
  geom_violin(draw_quantiles = .5, aes(group = cut_width(lifeExp, 10))) +
  scale_y_log10(labels = scales::comma, n.breaks = 6)
```


Con `corrplot` podemos visualizar las correlaciones entre variables numéricas de nuestra base de datos.  

```{r}
corrplot(cor(gapminder |> select(where(is.numeric))), method = "circle")
corrplot(cor(gapminder |> select(where(is.numeric))), method = "number", type = "upper")
```



### Ejercicio covariación 2 {.ejercicio}

Usando el DF `mpg`, visualiza la covariación entre:

* `manufacturer` y `hwy`
* `class`  y `hwy`
* `hwy` y `cty`



::: {.callout-tip collapse="true"}

### Visualizando una variable categórica y una continua

<span style="color: orange;">[geom_density_ridges()!](#variable-categórica-y-continua)</span>

::: 


::: {.callout-tip collapse="true"}

### Visualizando pares de variables continuas!

<span style="color: orange;">[geom_smooth()!](#geom_smooth)</span>

:::


```{r ejercicio-covariacion, echo=FALSE}

# * `manufacturer` y `hwy`
# ggplot(mpg, aes(reorder(x = manufacturer, X = hwy, FUN = median), hwy)) +
#   geom_boxplot()

ggplot(mpg, aes(hwy, manufacturer, fill = manufacturer)) +
  ggridges::geom_density_ridges(stat = "binline", bins = 20, scale = 0.95, draw_baseline = FALSE, alpha = .3) +
  ggridges::geom_density_ridges(jittered_points = TRUE, position = "raincloud", alpha = 0.5, scale = 0.9) +
  guides(fill = "none")

# * `hwy` y `cty`
ggplot(mpg, aes(hwy, cty)) +
  geom_point() +
  geom_smooth()


```


## Ejercicios finales

### Ejercicio exploración base nueva {.ejercicio}

Usando la base del paper [Cancer Screening Risk Literacy of Physicians in Training](https://osf.io/qn9a2/), haz un primer análisis exploratorio que incluya:

* histogramas de todas las variables numéricas y no-numéricas
* scatterplots de la relación entre comprensión y numeracy, y entre comprensión y screenbeliefs

Puedes ir al enlace anterior y descargar el archivo `Cancer screening risk literacy R1.sav` en la carpeta `Data and results`, o directamente usar el código de abajo.

::: {.callout-tip collapse="true"}

### Como visualizar todas las variables

<span style="color: orange;">[Ver el apartado visualizando-datasets-completos en este mismo capítulo](#visualizando-datasets-completos)</span>

:::


```{r ejercicio-final-analisis-exploratorio1, echo=TRUE, fig.height=18}

# Usamos haven::read_sav() para leer los archivos .sav
DF_dafina = haven::read_sav(here::here("data/files/Dafina", "Cancer screening risk literacy R1.sav")) |> as_tibble()

```

```{r ejercicio-final-analisis-exploratorio2, echo=FALSE, fig.height=18}
#| fig-align: center

if (!knitr::is_latex_output()) knitr::opts_chunk$set(column = "page")


# * histogramas de todas las variables numéricas y no-numéricas

d <- DF_dafina |>
  pivot_longer(everything(), values_transform = list(value = as.character)) |>
  filter(value != -66) |>
  mutate(value_NUM = as.numeric(value))

# Plot numeric variables
d |> drop_na(value_NUM) |>
  ggplot(aes(value_NUM)) +
  facet_wrap(~ name, scales = "free") +
  geom_histogram(bins = 15) #+ scale_x_log10()

# Plot non-numeric variables
d |>
  drop_na(value) |>
  filter(is.na(value_NUM)) |>
  ggplot(aes(value)) +
  facet_wrap(~ name, scales = "free") +
  geom_bar() +
  coord_flip()

```



```{r ejercicio-final-analisis-exploratorio3, echo=FALSE, fig.height=6}


# * scatterplots de la relación entre comprensión y numeracy, y entre comprensión y screenbeliefs
  DF = DF_dafina |>
    select(IDparticipante, screenbeliefs, compR1, numeracy) |>
    rename(comprehension = compR1) |>
    drop_na()


  A = DF |> ggplot(aes(screenbeliefs, comprehension)) +
    geom_jitter(height = .1, width = .1, alpha = .6, size  = 3) +
    geom_smooth(method = "lm") +
    theme_minimal() +
    theme(text = element_text(size = 12)) +
    scale_y_discrete(limits = 0:6)

  B = DF |> ggplot(aes(numeracy, comprehension)) +
    geom_jitter(height = .1, width = .1, alpha = .6, size  = 3) +
    geom_smooth(method = "lm") +
    theme_minimal() +
    theme(axis.title.y = element_blank(),
          text = element_text(size = 12))

  Figure = cowplot::plot_grid(A, B, labels = c("A", "B"))
  Figure

```
### {-}


## Bibliografía {.bibliografia -}

Wickham, H., & Grolemund, G. (2016). R for data science: import, tidy, transform, visualize, and model data. O'Reilly Media, Inc. https://r4ds.had.co.nz/  
