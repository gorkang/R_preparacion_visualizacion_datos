[["index.html", "R para preparación y visualización de datos Doctorado en Neurociencia Social y Cognición, UAI Introducción Objetivos Como empezar Bibliografía", " R para preparación y visualización de datos Doctorado en Neurociencia Social y Cognición, UAI Gorka Navarrete Introducción El objetivo de este seminario es aprender a usar R para preparar y visualizar datos, además de generar reportes reproducibles. Está pensado para alumnos de postgrado con conocimientos básicos de programación. A lo largo del seminario aprenderemos a usar jsPsychR, un conjunto de herramientas creado en el CSCN para ayudar a crear paradigmas experimentales con jsPsych, simular participantes, y estandarizar el proceso de preparación y análisis de datos. R es un lenguaje de programación abierto, con una gran comunidad orientada al trabajo, visualización y modelado de datos en contextos científicos y técnicos. Nos introduciremos de manera práctica a R, resolviendo problemas que encontramos habitualmente durante el quehacer científico, focalizándonos en el trabajo abierto, colaborativo y reproducible. Objetivos Dar las herramientas básicas a los alumnos para que puedan trabajar de manera autónoma con R y RStudio para el proceso de importación, transformación, visualización y reporte de datos. Al finalizar el curso deberíamos ser capaces de: Importar archivos de datos, transformar los datos, crear nuevas variables. Realizar análisis de datos exploratorios, visualizar distribuciones y comparar grupos. Generar reportes reproducibles con RMarkdown. Crear paradigmas experimentales y un pipeline completo para la preparación de datos con jsPsychR. Como empezar Si ya has completado los pasos indicados en preparando nuestro sistema, puedes lanzar el siguiente código en tu ordenador para descargar los materiales del curso: if (!require(&#39;usethis&#39;)) install.packages(&#39;usethis&#39;); library(&#39;usethis&#39;) usethis::use_course(&quot;gorkang/R_preparacion_visualizacion_datos&quot;) Sigue las instrucciones que aparecen en la Consola para tener un nuevo proyecto de RStudio con todos los materiales del curso. El código anterior creará una carpeta llamada R_preparacion_visualizacion_datos-master. Dentro de esa carpeta tendrás un archivo llamado R_preparacion_visualizacion_datos.Rproj que te permitirá abrir el proyecto de RStudio del workshop. La carpeta R_preparacion_visualizacion_datos-master contiene varias cosas. Las mas importantes son: Carpeta docs: puedes abrir docs/index.html en tu navegador para ver el “libro” de este curso. Alternativamente, puedes consultar una version online del libro. Carpeta Rmd: En esa carpeta esta el código fuente de los capítulos del libro Carpeta data: Cuando usemos archivos de datos, vendrán de aquí En ocasiones encontraras una bombilla como esta: Si haces click sobre ella aparecerá una pista sobre como resolver el ejercicio. ¡No hagas click en mi sin antes haber intentado resolver el ejercicio sin ayuda! Bibliografía Bryan, J., &amp; Hester, J. What They Forgot to Teach You About R. https://whattheyforgot.org/ Wickham, H., &amp; Grolemund, G. (2016). R for data science: import, tidy, transform, visualize, and model data. O’Reilly Media, Inc. https://r4ds.had.co.nz/ Wickham, H. (2014). Advanced r. Chapman and Hall/CRC. https://adv-r.hadley.nz/ Xie, Y., Allaire, J. J., &amp; Grolemund, G. (2018). R Markdown: The Definitive Guide. CRC Press. https://bookdown.org/yihui/rmarkdown/ Yihui Xie (2018). bookdown: Authoring Books and Technical Documents with R Markdown https://bookdown.org/yihui/bookdown/markdown-syntax.html "],["preparando-sistema.html", "Preparando nuestro sistema Empezando en A-B-C Algo más sobre la instalación de paquetes Bibliografía", " Preparando nuestro sistema Empezando en A-B-C Para poder iniciar el workshop necesitamos tener R y RStudio instalados, además de algunas librerías. Para tener un sistema funcional, completa los pasos A, B y C. Si ya tienes R y Rstudio instalados (recientemente), puedes pasar directamente al paso (C). (A) Instalar R R, es un lenguaje de programación especializado en la computación estadística y visualización de datos. Es recomendable tener instalada la última versión de R. Puedes usar uno de los enlaces siguientes: Windows: Descargar e instalar R para Windows Mac: Descargar e instalar R para Mac Ubuntu Linux: más detalles en la web de R. En un terminal:     sudo apt install r-base (B) Instalar RStudio RStudio es un entorno integrado de desarrollo (IDE) para la programación R. Descargar e instalar RStudio. Una vez descargado e instalado, abre RStudio. Deberías ver algo parecido a lo siguiente: Si encuentras un error de instalación en ubuntu, tendrás que instalar RStudio manualmente: sudo dpkg -i rstudio-[VERSION_NUMBER]-amd64.deb sudo apt --fix-broken install (C) Paquetes para el workshop Para instalar los paquetes del workshop, ejecuta el código de más abajo (sección sombreada en gris claro) en la consola de RStudio. En este gif puedes ver como hacerlo: Copia y pega el código de abajo en la consola de RStudio y ejecútalo [tecla ENTER]: if (!require(&#39;rlang&#39;)) install.packages(&#39;rlang&#39;); library(&#39;rlang&#39;) rlang::check_installed( pkg = c(&quot;afex&quot;, &quot;correlation&quot;, &quot;corrr&quot;, &quot;cowplot&quot;, &quot;dplyr&quot;, &quot;DT&quot;, &quot;esquisse&quot;, &quot;gapminder&quot;, &quot;geomtextpath&quot;, &quot;ggplot2&quot;, &quot;ggraph&quot;, &quot;ggridges&quot;, &quot;ggthemes&quot;, &quot;googlesheets4&quot;, &quot;gtsummary&quot;, &quot;haven&quot;, &quot;here&quot;, &quot;hexbin&quot;, &quot;inspectdf&quot;, &quot;janitor&quot;, &quot;knitr&quot;, &quot;lme4&quot;, &quot;papaja&quot;, &quot;parameters&quot;, &quot;performance&quot;, &quot;plotly&quot;, &quot;purrr&quot;, &quot;readODS&quot;, &quot;readr&quot;, &quot;readxl&quot;, &quot;remotes&quot;, &quot;renv&quot;, &quot;report&quot;, &quot;rticles&quot;, &quot;see&quot;, &quot;sjPlot&quot;, &quot;stargazer&quot;, &quot;tidyr&quot;, &quot;usethis&quot;, &quot;writexl&quot;), reason = &quot;to run the initial setup&quot;) Otros paquetes que usaremos. Para que corran estas lineas tenemos que haber completado el paso previo. if (!require(&#39;regexplain&#39;)) remotes::install_github(&quot;gadenbuie/regexplain&quot;); library(&#39;regexplain&#39;) if (!require(&#39;raincloudplots&#39;)) remotes::install_github(&#39;jorvlan/raincloudplots&#39;); library(&#39;raincloudplots&#39;) Usaremos un buen numero de paquetes en el workshop. El proceso de instalación requiere Internet y tardará un buen rato (en algunos sistemas puede ser facilmente 1 hora). Si tienes alguna dificultad en este punto, te recomiendo que veas algun tutorial básico de R o RStudio. Hay algunos meta-paquetes que simplifican la instalación de múltiples paquetes (e.g. pacman, pak, renv, …), pero dejaremos eso para más adelante. Algo más sobre la instalación de paquetes Los paquetes de R son una colección de funciones, datos y documentación que amplían las capacidades básicas de R. Gran parte de las funciones y paquetes que utilizaremos en este workshop se encuentran contenidas en el meta-paquete tidyverse (este es un paquete de paquetes). No lo instalamos en (C), pero si quisieras instalarlo solo tendrías que ejecutar la siguiente linea en la consola de RStudio: install.packages(&quot;tidyverse&quot;) Para instalar otro paquete diferente de “tidyverse”, remplaza su nombre entre comillas dentro de la función: install.packages(&quot;NOMBRE_DE_PAQUETE&quot;) Una vez instalado un paquete, no es necesario volver hacerlo, a menos que reinstales R. Cargar paquetes Las funciones, datos y documentación dentro de nuestros paquetes no podrán ser utilizadas hasta que se carguen en R. Una vez instalados, para cargar los paquetes se usa la función library(): library(ggplot2) En realidad las funciones también pueden ser llamadas usando su referencia absoluta ::, sin necesidad de cargarlas antes. Por ejemplo: dplyr::tibble(columna = 1). En general: nombre_paquete::nombre_de_funcion(parametros)). Todo en uno El siguiente código simplifica lo anterior. Comprueba que el paquete esta instalado; Si no se encuentra instalado, lo instala. Finalmente lo carga. if (!require(&#39;tidyverse&#39;)) install.packages(&#39;tidyverse&#39;); library(&#39;tidyverse&#39;) Para instalar múltiples paquetes, podemos repetir la linea de mas arriba tantas veces como sea necesario, o usar una versión algo mas sofisticada como el código del apartado (C): if (!require(&#39;tidyverse&#39;)) install.packages(&#39;tidyverse&#39;); library(&#39;tidyverse&#39;) if (!require(&#39;bookdown&#39;)) install.packages(&#39;bookdown&#39;); library(&#39;bookdown&#39;) Al principio de cada capítulo, verás una sección llamada Paquetes para este capítulo. Si pegas el contenido de esa sección en un script de R al empezar cada capítulo, te asegurarás de tener disponibles todas las funciones que usaremos. Instalar paquetes de Github En ocasiones querremos instalar directamente la versión en desarrollo del paquete desde Github. Para eso podemos usar la función install_github() del paquete remotes. Por ejemplo, para instalar el paquete {BayesianReasoning} desde su repositorio de Github: if (!require(&#39;remotes&#39;)) install.packages(&#39;remotes&#39;); library(&#39;remotes&#39;) remotes::install_github(&quot;gorkang/BayesianReasoning&quot;) Bibliografía Algunos de los manuales que vamos a usar para el workshop son los siguientes: Wickham, H., &amp; Grolemund, G. (2016). R for data science: import, tidy, transform, visualize, and model data. O’Reilly Media, Inc. https://r4ds.had.co.nz/ Xie, Y., Allaire, J. J., &amp; Grolemund, G. (2018). R Markdown: The Definitive Guide. CRC Press. https://bookdown.org/yihui/rmarkdown/ Bryan, J., &amp; Hester, J. What They Forgot to Teach You About R. https://whattheyforgot.org/ "],["introducción-a-r-y-visualización-de-datos.html", "Capítulo 1 Introducción a R y visualización de datos 1.1 Introducción: porque la visualización de datos es importante 1.2 Por qué R? 1.3 Visualización de datos con ggplot2 1.4 Geoms Bibliografía", " Capítulo 1 Introducción a R y visualización de datos Paquetes para este capítulo Para poder ejecutar en tu ordenador el código de los ejemplos y ejercicios de este capítulo vas a necesitar los paquetes siguientes. Te recomiendo que abras un script de R, pegues estas líneas al principio y las ejecutes (CNTRL + ENTER para ejecutar linea a linea). if (!require(&#39;cowplot&#39;)) install.packages(&#39;cowplot&#39;); library(&#39;cowplot&#39;) if (!require(&#39;dplyr&#39;)) install.packages(&#39;dplyr&#39;); library(&#39;dplyr&#39;) if (!require(&#39;esquisse&#39;)) install.packages(&#39;esquisse&#39;); library(&#39;esquisse&#39;) if (!require(&#39;gapminder&#39;)) install.packages(&#39;gapminder&#39;); library(&#39;gapminder&#39;) if (!require(&#39;geomtextpath&#39;)) install.packages(&#39;geomtextpath&#39;); library(&#39;geomtextpath&#39;) if (!require(&#39;gghighlight&#39;)) install.packages(&#39;gghighlight&#39;); library(&#39;gghighlight&#39;) if (!require(&#39;ggplot2&#39;)) install.packages(&#39;ggplot2&#39;); library(&#39;ggplot2&#39;) if (!require(&#39;ggthemes&#39;)) install.packages(&#39;ggthemes&#39;); library(&#39;ggthemes&#39;) if (!require(&#39;ggridges&#39;)) install.packages(&#39;ggridges&#39;); library(&#39;ggridges&#39;) if (!require(&#39;knitr&#39;)) install.packages(&#39;knitr&#39;); library(&#39;knitr&#39;) if (!require(&#39;plotly&#39;)) install.packages(&#39;plotly&#39;); library(&#39;plotly&#39;) if (!require(&#39;purrr&#39;)) install.packages(&#39;purrr&#39;); library(&#39;purrr&#39;) if (!require(&#39;readr&#39;)) install.packages(&#39;readr&#39;); library(&#39;readr&#39;) if (!require(&#39;sjPlot&#39;)) install.packages(&#39;sjPlot&#39;); library(&#39;sjPlot&#39;) if (!require(&#39;tidyr&#39;)) install.packages(&#39;tidyr&#39;); library(&#39;tidyr&#39;) if (!require(&#39;raincloudplots&#39;)) remotes::install_github(&#39;jorvlan/raincloudplots&#39;); library(&#39;raincloudplots&#39;) 1.1 Introducción: porque la visualización de datos es importante “These 13 datasets (the Datasaurus, plus 12 others) each have the same summary statistics (x/y mean, x/y standard deviation, and Pearson’s correlation) to two decimal places, while being drastically different in appearance.” (Matejka, J., &amp; Fitzmaurice, G., 2017). SOURCE: https://www.autodeskresearch.com/publications/samestats 1.1.1 Ejemplo del mundo real: ¿cuantos temas deberia estudiar? Este ejemplo viene de un experimento que realizamos junto con Carlos Santamaría hace algún tiempo. Presentamos una tarea sobre cálculo de probabilidades a personas que estaban entrando a un examen para convertirse en trabajadores del estado. Simplificando algo, digamos que la materia para el examen eran 80 temas. No es posible estudiar con profundidad todos los temas, así que los opositores se concentraban en un subconjunto de esos temas (e.g. 30 de 80). Al empezar el examen, se seleccionaban al azar 5 de los 80 temas, y cada persona elegía uno de ellos para desarrollar. Abajo se puede ver como cambia la probabilidad de que uno de los temas estudiados aparezca dentro de los 5 seleccionados al azar. Con 30 de los 80 temas estudiados, la probabilidad de que uno de ellos salga en la prueba es del 91%. Si estudiáramos 47, subiríamos a una probabilidad del 99%. En el experimento le preguntamos a las personas por la probabilidad de que les apareciera alguno de los temas estudiados en la prueba. Comparamos las siguientes dos preguntas: ¿Cuál es la probabilidad de que salga uno de los temas que has estudiado? ¿Cuál es la probabilidad de que no salga ninguno de los temas que has estudiado? Miramos el error promedio en función de la pregunta (cuanto se han alejado de la probabilidad correcta), y vimos que nuestra manipulación había tenido un efecto considerable: Question Error_promedio SD N p (no salga ninguno) 4.016129 35.82469 31 p (salga uno) -30.741936 20.01494 31 Hay una diferencia notable entre condiciones. Pasamos de un error promedio del -30.7% a tan solo 4%, simplemente cambiando la pregunta. Hagamos un sencillo análisis de regresión para ver si la diferencia es significativa, y cuanta varianza explica nuestro modelo.   Error Predictors Estimates CI p (Intercept) 4.02 -6.41 – 14.44 0.444 Question [p (salga uno)] -34.76 -49.50 – -20.02 &lt;0.001 Observations 62 R2 / R2 adjusted 0.270 / 0.258 ## ## Shapiro-Wilk normality test ## ## data: modelo_regresion$residuals ## W = 0.96215, p-value = 0.0532 Todo es hermoso. Tenemos un efecto claramente significativo de la pregunta (y con un R2-ajustado de .258, no está nada mal), y además, nuestro modelo no incumple el supuesto de normalidad de residuos (por los pelos!). Léeme Las pruebas de normalidad son muy sensibles al n de la muestra Preparamos un plot con promedios y barras con error standard para nuestro paper. Estamos listos para escribir el paper. Preparemos la tabla con descriptivos… Question Error_promedio SD N p (no salga ninguno) 4.016129 35.82469 31 p (salga uno) -30.741936 20.01494 31 Es curioso que la desviación estandard sea mayor en el grupo con menos error promedio… Visualicemos las respuestas de todos los participantes, junto con la distribución de los datos. Como se puede apreciar en la gráfica, cuando usamos la pregunta ¿Cuál es la probabilidad de que no salga ninguno de los temas que has estudiado? no estamos reduciendo el error, sino convirtiendo una distribución de respuestas unimodal en bimodal. TLDR: La manera en la visualizamos la información determina las conclusiones a las que llegamos. En una sola gráfica: Moraleja: es importante mostrar los datos individuales y/o la distribución de los datos SOURCE: https://www.autodeskresearch.com/publications/samestats 1.2 Por qué R? R es uno de los programas para data science mas populares, especialmente usado en la academia. El numero de paquetes que ofrecen funcionalidades de todo tipo no ha dejado de crecer. En 2022 el numero de paquetes en R-cran ha superado los 20,000 (ver este buscador de paquetes), y el ritmo de crecimiento nos acerca a la singularidad… ;) SOURCE: https://gist.github.com/daroczig/3cf06d6db4be2bbe3368 Además de lo anterior, R es un programa de código abierto (algo esencial para poder hacer ciencia reproducible), con una comunidad de usuarios muy acogedora, y con un importante foco en la inclusividad. La importancia de la comunidad es difícil de apreciar. Por ejemplo, es relativamente habitual que uno abra un issue en Github pidiendo una nueva característica en un paquete, y que los creadores la implementen (e.g. correlation, gtsummary, rorcid), que uno reporte un error y lo corrijan (e.g. sjPlot, gtsummary), recibir correcciones y mejoras en tus repositorios (e.g. html2latex, 2019-Chile), o poder contribuir a repositorios de otros (e.g. jsPsych, gtsummary). Sus funciones de visualización son muy potentes (ver la r-graph-gallery para algunos ejemplos), siendo usadas como herramienta principal en medios como la BBC. SOURCE: BBC No menos importante, hay una gran cantidad de cursos, tutoriales, presentaciones y libros de una calidad excelente, con los que podemos aprender de manera autónoma. Por ejemplo: psyTeachR team at the University of Glasgow A Gentle Guide to the Grammar of Graphics with ggplot2 resulumit.com Rmd workshop R for Data Science Advanced R Para ver una compilación de todos los libros disponibles: Big Book of R Con R puedes recoger datos interactivamente con shiny, preparar datos (o extraerlos de paginas web con rvest o RSelenium), visualizar datos estáticos con ggplot, animarlos con gganimate, visualizarlos con interactivamente con plotly o shiny. Puedes también analizar los datos con todas las técnicas imaginables, desde anovas con afex a modelos mixtos con lmer y/o afex, pasando por meta-análisis con metafor, SEM, Path analysis, mediación, con lavaan, análisis Bayesianos con brms o bayesfactor, y un larguísimo etc. Puedes llevar tus visualizaciones y análisis a reportes automáticos en múltiples formatos (pdf, html, docx) con Rmarkdown, o quarto, crear libros como este con bookdown, páginas web con blogdown o distill, e incluso papers completamente reproducibles (preparación y análisis de datos) en formato APA con papaja. 1.2.1 Bienvenida al tidyverse El tidyverse es un conjunto de paquetes que nos permitirán hacer de manera (habitualmente) intuitiva muchas tareas de preparación y visualización de datos. 1.2.1.1 Tidyverse vs Base R Muchas de las funciones que existen en el Tidyverse tienen un equivalente en base-R (la instalación por defecto de R). El Tidyverse tiene ventajas y desventajas. La ventaja fundamental es que el código resulta (habitualmente) más fácil de leer, los nombres de las funciones son más intuitivos, y la forma de hacer las cosas tiene a ser consistente. La desventaja fundamental es que incrementamos el numero de dependencias (paquetes) de nuestro código. Veamos un ejemplo extraído de aquí. La misma operación con base-R o con tidyverse: Filter rows with conditions evaluated within groups: iris flowers with maximum “Petal.Width” for each “Species” Tidyverse iris %&gt;% group_by(Species) %&gt;% filter(Petal.Width == max(Petal.Width)) Base-R # First operate in the data.frame by group (split-apply) widest_petals &lt;- by(iris, INDICES = iris$Species, FUN = function(x){ x[x$Petal.Width == max(x$Petal.Width), ] }) # Then combine the results into a data.frame do.call(rbind, widest_petals) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## setosa 5.0 3.5 1.6 0.6 setosa ## versicolor 5.9 3.2 4.8 1.8 versicolor ## virginica.101 6.3 3.3 6.0 2.5 virginica ## virginica.110 7.2 3.6 6.1 2.5 virginica ## virginica.145 6.7 3.3 5.7 2.5 virginica 1.2.2 Antes de empezar Programar es muy difícil. Todos necesitamos ayuda. Contar con una comunidad robusta con la que compartir, preguntar, contribuir, ayuda muchísimo. SOURCE: http://www.keywordbasket.com/ZWZlY3RvIGR1bm5pbmcta3J1Z2Vy/ Hay algunos recursos que son imprescindibles. Nadie sabe como los antiguos podían programar antes de la llegada de Stackoverflow: Stack overflow Google: avoid scientific notation R: options(scipen=999) Y otros recursos que resultan muy útiles: Comunidad de usuarios de Rstudio Twitter! Por ejemplo: @thomas_mock (#TidyTuesday) @dataandme @rivaquiroga @RLadiesSantiago Webs como R bloggers 1.2.3 R para visualización de datos ggplot2 es el paquete por excelencia para visualización de datos. Su potencia va asociada a un nivel de complejidad considerable, hasta el punto que hay Cheat sheets oficiales, Cheat sheets buscables, y decenas de miles de preguntas en Stack Overflow. 1.2.3.1 Primeros pasos - con training wheels Para empezar a usar ggplot sin tener que preocuparnos de su complejidad, podemos usar la función esquisse:::esquisser() del paquete esquisse. Esta nos permite usar la potencia de ggplot para explorar una base de datos de manera muy sencilla. SOURCE: https://www.williamrchase.com/slides/intro_r_anthropology_2018#93 La manera fácil (1, 2, 3), usando esquisse: # 1) Asegúrate que hemos instalado el paquete esquisse if (!require(&#39;esquisse&#39;)) install.packages(&#39;esquisse&#39;); library(&#39;esquisse&#39;) # 2) Lanza el wizard esquisser esquisse:::esquisser(iris) # 3) Crea el gráfico que quieras, exporta el código... 1.2.3.2 Aprendamos con Garrick Garrick Aden-Buie ( @grrrck) ha creado una excelente introducción a ggplot2 y la gramática de gráficos. Os recomiendo revisarla para familiarizaros con las funcionalidades de ggplot. 1.3 Visualización de datos con ggplot2 1.3.1 Componentes de una gráfica En esta sección vamos a ver algunos de los componentes que usaremos cuando visualicemos datos. Muchos de los ejemplos que usaremos vienen de R for data science. Los ingredientes esenciales de una gráfica son: Aesthetic mappings (aes): Variables, colores, rellenos, formas, … Geoms (geom_): puntos, líneas, boxplots, … Facets (facet_): paneles con diferentes gráficos para cada nivel de una variable categórica, … Transformaciones estadísticas: calcular promedios, barras de error, … SOURCE: https://skillgaze.com/2017/10/31/understanding-different-visualization-layers-of-ggplot/ 1.3.2 Mi primera gráfica 1-2-3 Para crear una gráfica con ggplot, tenemos que indicar donde están nuestros datos, qué mostraremos en el eje x e y, además de que geometrias queremos (geoms). Usaremos + para sumar instrucciones, con una lógica de capas superpuestas. Por ejemplo: Indicamos los datos y coordenadas: ggplot(data = mpg, aes(x = displ, y = hwy)) Añadimos el geom de puntos para mostrar la relación entre x e y: + geom_point() Añadimos un segundo geom para trazar una línea de tendencia: + geom_smooth() 1.3.3 Aesthetic mappings En aes() vamos a indicar las variables que queremos en los ejes x e y, el color de los puntos o líneas, el relleno de las barras, la forma de los puntos, el tipo de linea, la agrupación de los datos, etc. x: x = gdpPercap y: y = lifeExp color: color = continent; color = “red”; color = “#FAA627” fill: fill = continent; fill = “red”; fill = “#FAA627” alpha: alpha = continent; alpha = 0.2 size: size = continent; size = 5 shape: shape = continent; shape = 0 ver codigo de las distintas formas linetype: linetype = continent; linetype = “dashed” group: group = continent 1.3.3.1 x-y Algo esencial es decirle a ggplot que queremos que aparezca en el eje x y en el eje y de nuestra gráfica. Empezaremos usando los datos de gapminder. A ver que variables tenemos en el data-frame gapminder: gapminder ## # A tibble: 1,704 × 6 ## country continent year lifeExp pop gdpPercap ## &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Afghanistan Asia 1952 28.8 8425333 779. ## 2 Afghanistan Asia 1957 30.3 9240934 821. ## 3 Afghanistan Asia 1962 32.0 10267083 853. ## 4 Afghanistan Asia 1967 34.0 11537966 836. ## 5 Afghanistan Asia 1972 36.1 13079460 740. ## 6 Afghanistan Asia 1977 38.4 14880372 786. ## 7 Afghanistan Asia 1982 39.9 12881816 978. ## 8 Afghanistan Asia 1987 40.8 13867957 852. ## 9 Afghanistan Asia 1992 41.7 16317921 649. ## 10 Afghanistan Asia 1997 41.8 22227415 635. ## # … with 1,694 more rows ## # ℹ Use `print(n = ...)` to see more rows Visualizamos la relación entre gdpPercap (eje x), y lifeExp (eje y): ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) + geom_point() Si respetamos el orden de las variables, podemos simplificar nuestro código, evitando el data = y mapping =. Por ejemplo, podemos ver de nuevo la relación entre lifeExp y gdpPercap, invirtiendo los ejes. ggplot(gapminder, aes(lifeExp, gdpPercap)) + geom_point() Ejercicio Usando gapminder, ¿podrías crear un gráfico de gdp per cápita por población como éste? 1.3.3.2 Color, alpha, size Para asignar colores podemos usar nombres de colores en inglés, o algo llamado código HEX: Escribe colors() en la Consola de RStudio Ver el código HEX de los colores Empecemos a cambiar parámetros de nuestro gráfico inicial: # Gráfico inicial ggplot(gapminder, aes(gdpPercap, lifeExp)) + geom_point() # Color &quot;rojo&quot; para los puntos ggplot(gapminder, aes(gdpPercap, lifeExp)) + geom_point(color = &quot;red&quot;) # Color en función de la variable &#39;continent&#39; ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) + geom_point() # Color en función de la variable &#39;continent&#39; # Cambiamos el tamaño de los puntos a 2 ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent, size = 2)) + geom_point() # Color en función de la variable &#39;continent&#39; # Cambiamos el tamaño de los puntos a 2 # Añadimos transparencia usando el parámetro &#39;alpha&#39; ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent, size = 2, alpha = .1)) + geom_point() Ejercicios Usando como base el plot del ejercicio anterior (GDP x población), ¿podrías hacer lo siguiente? Colorear los puntos por continente Tamaño del punto 4 Alpha 0.5 Cada uno de los siguientes gráficos tiene un error. ¿Sabrias corregirlos? Solucion: color = continent debe ir dentro de aes() ggplot(gapminder, aes(gdpPercap, pop), color = continent) + geom_point(size = 4, alpha = .5) Solución: color = “blue” debe ir fuera de aes() ggplot(gapminder, aes(gdpPercap, pop, color = &quot;blue&quot;)) + geom_point(size = 4, alpha = .5) 1.3.3.3 Shape Códigos para las distintas formas: SOURCE: https://r4ds.had.co.nz/data-visualisation.html#aesthetic-mappings En este ejemplo usamos la variable continent para que cada asignar una forma diferente a cada uno de los continentes. ggplot(gapminder, aes(gdpPercap, lifeExp, shape = continent)) + geom_point() 1.3.3.4 Linetype Códigos para los distintos estilos de linea: SOURCE: http://sape.inf.usi.ch/quick-reference/ggplot2/linetype Podemos definir directamente el tipo de línea que queremos en geom_line(): ggplot(gapminder, aes(year, lifeExp, color = continent)) + stat_summary(fun = mean, geom = &quot;line&quot;, linetype = &quot;dashed&quot;) O que el tipo de línea dependa de una variable: ggplot(gapminder, aes(year, lifeExp, linetype = continent, color = continent)) + stat_summary(fun = mean, geom = &quot;line&quot;) 1.4 Geoms Una de las cosas más difíciles cuando nos enfrentamos a nuevos datos es elegir el método más efectivo para visualizarlos. Hay varios recursos interesantes sobre cómo elegir una gráfica. En esta sección veremos distintos tipos de geometría, o geoms_(). Algunos tipos de geoms Para una lista exhaustiva ver el manual de ggplot2. SOURCE: https://nbisweden.github.io/RaukR-2019/ggplot/presentation/ggplot_presentation_assets/geoms.png 1.4.1 geom_point y geom_jitter Si queremos un gráfico de dispersión o scatterplot, podemos usar el geom_point() ggplot(mpg, aes(displ, hwy)) + geom_point() En algunos casos, tenemos muchos puntos que se superponen. Si usamos geom_jitter() la posición de los puntos cambia levemente de manera aleatoria para evitar superposiciones. Con las propiedades ´width´ y ´height´ podemos controlar cuando desplazamiento queremos horizontal y verticalmente. ggplot(mpg, aes(displ, hwy)) + geom_jitter() 1.4.2 geom_smooth Podemos usar líneas de tendencia con geom_smooth(). El method por defecto es loess, pero podemos usar otros métodos (e.g. geom_smooth(method = \"lm\") para usar una regresión lineal). Recuerda que las funciones que usamos (todo lo que contiene () e.g. geom_smooth()) tienen parámetros, que son instrucciones addicionales que nos permiten modificar como se comportan. Para ver que opciones tenemos, podemos ver la ayuda de las funciones : ?geom_smooth(), o poner el cursor encima y presionar F1 (ayuda). # Linea de tendencia (default loess) ggplot(gapminder, aes(gdpPercap, lifeExp)) + geom_point() + geom_smooth() # Usamos lm ggplot(gapminder, aes(gdpPercap, lifeExp)) + geom_point() + geom_smooth(method = &quot;lm&quot;) # Un smooth por cada clase ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) + geom_point() + geom_smooth() # Coloreamos puntos pero mantenemos un solo smooth ggplot(gapminder, aes(gdpPercap, lifeExp)) + geom_point(aes(color = continent)) + geom_smooth() Ejercicios Usando como base el plot de la sección Shape: ggplot(gapminder, aes(gdpPercap, lifeExp, shape = continent)) + geom_point() Colorea los puntos por continente Muestra una línea de tendencia por continente (sin el intervalo de confianza) Haz que el tipo de línea cambie por continente Añade transparencia a los puntos para que las líneas destaquen Ahora usando el data-frame mpg, intenta crear los 6 plots que se pueden ver más abajo. Aquí tienes el plot base, para hacer mas fácil la tarea: ggplot(mpg, aes(displ, hwy)) + geom_point() + theme_grey() Además de generar uno a uno los 6 plots, serías capaz de generar la figura que se ve abajo? Esto es, un plot que incluye los 6 plots juntos. Solucion para combinar plots: En la sección Combinando gráficas veras un ejemplo del uso de la función cowplot::plot_grid() 1.4.3 geom_boxplot y geom_violin Podemos crear diagramas de cajas (boxplots) con geom_boxplot o violines con geom_violin para visualizar como cambian los datos por grupo. # Boxplot con fill ggplot(gapminder, aes(continent, lifeExp, fill = continent)) + geom_boxplot(alpha = .2) # Violins ggplot(gapminder, aes(continent, lifeExp, fill = continent)) + geom_violin(alpha = .2) # Combinamos ambos ggplot(gapminder, aes(continent, lifeExp)) + geom_boxplot(alpha = .2) + geom_violin(alpha = .2, aes(fill = continent)) 1.4.4 geom_histogram y geom_bar Podemos usar histogramas geom_histogram() con variables continuas. Como puedes ver, ahora solo le pasamos una variable a aes() ggplot(gapminder, aes(lifeExp)) + geom_histogram() O si tenemos variables categóricas, geom_bar(). ggplot(gapminder, aes(continent, fill = continent)) + geom_bar(alpha = .6) 1.4.5 geom_density Para visualizar distribuciones (cuando tenemos muchos datos), podemos usar geom_density(). # Density with fill and alpha ggplot(gapminder, aes(lifeExp, fill = continent)) + geom_density(alpha = .2) Ejercicio Añadiendo un parámetro a la gráfica de arriba, podemos transformarla en las versiones de abajo. ¿Podrías hacerlo? (recuerda que poníendote encima de geom_density() y tecleando F1 puedes ver la ayuda de la función). ggplot(gapminder, aes(lifeExp, fill = continent)) + geom_density(alpha = .2) Solucion: position = \"stack\" y position = \"fill\". 1.4.6 geom_density_ridges Uno de mis geoms favoritos para comparar distribuciones es geom_density_ridges: # geom_density_ridges ggplot(gapminder, aes(lifeExp, continent, fill = continent)) + ggridges::geom_density_ridges(alpha = .2) Especialmente porque podemos incluir en el mismo gráfico información sobre distribuciones y puntos individuales. # geom_density_ridges junto con raincloud points y histograma ggplot(gapminder, aes(lifeExp, continent, fill = continent)) + ggridges::geom_density_ridges(stat = &quot;binline&quot;, bins = 20, scale = 0.95, draw_baseline = FALSE) + ggridges::geom_density_ridges(jittered_points = TRUE, position = &quot;raincloud&quot;, alpha = 0.7, scale = 0.9) Ejercicios Usando como base el plot de la seccion geom_histogram(): ggplot(gapminder, aes(lifeExp)) + geom_histogram() Colorea los histogramas por continente Sabrias hacer que no se amontonen unos continentes sobre otros? Necesitarás añadir transparencia para ver todos los datos Solucion: geom_histogram(position = \"identity\", alpha = .3). Con el DF diamonds, crea el siguiente plot: ggplot(diamonds, aes(cut)) Pista: Tienes que usar el geom_bar() y el parámetro fill. Bibliografía Matejka, J., &amp; Fitzmaurice, G. (2017, May). Same stats, different graphs: Generating datasets with varied appearance and identical statistics through simulated annealing. In Proceedings of the 2017 CHI Conference on Human Factors in Computing Systems (pp. 1290-1294). ACM. https://bbc.github.io/rcookbook/ https://github.com/bbc/bbplot https://github.com/dreamRs/esquisse Garrick Aden-Buie. A Gentle Guide to the Grammar of Graphics with ggplot2: https://github.com/gadenbuie/gentle-ggplot2 Michael Toth. You Need to Start Branding Your Graphs. Here’s How, with ggplot!: https://michaeltoth.me/you-need-to-start-branding-your-graphs-heres-how-with-ggplot.html Claus Wilke: https://wilkelab.org/practicalgg/ Thomas Lin Pedersen: Part 1: https://www.youtube.com/watch?v=h29g21z0a68 Part 2: https://www.youtube.com/watch?v=0m4yywqNPVY Big Book or R : https://www.bigbookofr.com/index.html "],["visualización-avanzada.html", "Capítulo 2 Visualización avanzada 2.1 Facets 2.2 Transformaciones estadísticas 2.3 Personalización de gráficas 2.4 Otras gráficas 2.5 Visualización interactiva Bibliografía", " Capítulo 2 Visualización avanzada Veamos algunas funcionalidades más avanzadas con ggplot y otros paquetes. Paquetes para este capítulo Como en cada capítulo, abre un script de R, pega estas líneas al principio y ejecútalas (CNTRL + ENTER para ejecutar linea a linea). if (!require(&#39;cowplot&#39;)) install.packages(&#39;cowplot&#39;); library(&#39;cowplot&#39;) if (!require(&#39;dplyr&#39;)) install.packages(&#39;dplyr&#39;); library(&#39;dplyr&#39;) if (!require(&#39;esquisse&#39;)) install.packages(&#39;esquisse&#39;); library(&#39;esquisse&#39;) if (!require(&#39;gapminder&#39;)) install.packages(&#39;gapminder&#39;); library(&#39;gapminder&#39;) if (!require(&#39;geomtextpath&#39;)) install.packages(&#39;geomtextpath&#39;); library(&#39;geomtextpath&#39;) if (!require(&#39;gghighlight&#39;)) install.packages(&#39;gghighlight&#39;); library(&#39;gghighlight&#39;) if (!require(&#39;ggplot2&#39;)) install.packages(&#39;ggplot2&#39;); library(&#39;ggplot2&#39;) if (!require(&#39;ggthemes&#39;)) install.packages(&#39;ggthemes&#39;); library(&#39;ggthemes&#39;) if (!require(&#39;ggridges&#39;)) install.packages(&#39;ggridges&#39;); library(&#39;ggridges&#39;) if (!require(&#39;knitr&#39;)) install.packages(&#39;knitr&#39;); library(&#39;knitr&#39;) if (!require(&#39;plotly&#39;)) install.packages(&#39;plotly&#39;); library(&#39;plotly&#39;) if (!require(&#39;purrr&#39;)) install.packages(&#39;purrr&#39;); library(&#39;purrr&#39;) if (!require(&#39;readr&#39;)) install.packages(&#39;readr&#39;); library(&#39;readr&#39;) if (!require(&#39;sjPlot&#39;)) install.packages(&#39;sjPlot&#39;); library(&#39;sjPlot&#39;) if (!require(&#39;tidyr&#39;)) install.packages(&#39;tidyr&#39;); library(&#39;tidyr&#39;) if (!require(&#39;raincloudplots&#39;)) remotes::install_github(&#39;jorvlan/raincloudplots&#39;); library(&#39;raincloudplots&#39;) 2.1 Facets Cuando queremos separar en gráficos independientes distintas categorías dentro de nuestros datos, podemos usar facetas. Hay dos funciones para esto, facet_grid() y facet_wrap(). 2.1.1 facet_grid facet_grid(~ variable) nos devuelve una matriz simétrica de gráficas. # Plot inicial ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) + geom_point(alpha = .2) # Un grafico para cada continente ## Tip: usamos guides(color = &quot;none&quot;) para que no se vea la leyenda asociada a color ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) + geom_point(alpha = .2) + facet_grid(~ continent) + guides(color = &quot;none&quot;) # Cambiamos ejes ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) + geom_point(alpha = .2) + facet_grid(continent ~ .) + guides(color = &quot;none&quot;) # Añadimos una segunda variable ggplot(gapminder, aes(gdpPercap, lifeExp, color = country)) + geom_line(alpha = .2) + facet_grid(continent ~ pop &gt; 5000000) + guides(color = &quot;none&quot;) 2.1.2 facet_wrap facet_wrap(~ variable) nos devuelve tantas facetas como niveles de la variable, pudiendo definir el número de filas y columnas que queremos. # Plot base ggplot(gapminder, aes(lifeExp, fill = continent)) + geom_histogram(alpha = .5) # Facetas por continente ## En 2 columnas ggplot(gapminder, aes(lifeExp, fill = continent)) + geom_histogram(alpha = .5) + facet_wrap( ~ continent, ncol = 2) + guides(fill = &quot;none&quot;) 2.1.3 gghighlight y facet_wrap Con la función gghighlight() podemos añadir una capa para facilitar la comparación de cada faceta con los datos completos. ggplot(gapminder, aes(lifeExp, fill = continent)) + geom_histogram(alpha = .5) + facet_wrap( ~ continent, nrow = 1) + guides(color = &quot;none&quot;) + gghighlight::gghighlight() Ejercicios Usando como base el plot siguiente: ggplot(mpg, aes(displ, hwy)) + geom_point() Crea un panel para cada tipo de coche (class) en una rejilla simétrica Crea un panel para cada tipo de coche (class), mostrando paneles en 3 filas Solucion: facet_grid() permite crear rejullas simétricas de panekes, y el parámetro nrow de facet_wrap() nos ayuda con paneles con números de filas definidos. 2.2 Transformaciones estadísticas ggplot2 nos permite hacer algunas transformaciones estadísticas al crear los gráficos. Para más detalles, ver r4ds. 2.2.1 Computaciones con ggplot Generalmente trabajaremos con data-frames en formato long (una observación por fila), pero en ocasiones queremos visualizar estadísticas descriptivas asociadas a los datos. Para eso podemos preparar nuevos data-frames antes de pasar a la visualización, o directamente realizar la computación con ggplot. Algunas funciones que podemos usar en los gráficos: min(): mínimo max(): máximo mean(): media median(): mediana sd(): desviación estandar 2.2.1.1 stat_summary Con stat_summary() podemos usar funciones simples de manera directa. En este caso, mostramos un punto con la mediana, y barras que muestran el rango completo de los datos: ggplot(gapminder, aes(continent, lifeExp)) + stat_summary( fun.min = min, fun.max = max, fun = median) Si queremos usar funciones algo más complejas, la sintaxis es diferente. En este caso mostramos media ± desviación estandar: ggplot(gapminder, aes(continent, lifeExp)) + stat_summary( fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x), fun = mean) 2.2.2 Promedios por grupo Lo interesante es que podemos añadir estas transformaciones estadísticas como una capa más en los gráficos. Así que, a este gráfico inicial… ggplot(mpg) + geom_jitter(aes(x = class, y = hwy), width = 0.2) + theme_minimal() Le podemos añadir el promedio por grupo: ggplot(mpg, aes(x = class, y = hwy)) + geom_jitter(width = 0.2) + stat_summary(fun = mean, color = &quot;red&quot;, geom = &quot;point&quot;, size = 4, alpha = .7) + theme_minimal() Ejercicios Cuando al plot A trato de añadirle líneas para cada class, me aparece algo como lo de B, porque tenemos varios puntos en cada nivel de displ. plotA = ggplot(mpg, aes(displ, hwy, color = class)) + geom_point() + theme(legend.position = &quot;bottom&quot;) plotB = ggplot(mpg, aes(displ, hwy, color = class)) + geom_point() + geom_line() + theme(legend.position = &quot;bottom&quot;) cowplot::plot_grid(plotA, plotB, labels = c(&quot;A&quot;, &quot;B&quot;)) Pero en realidad no quiero que las líneas pasen por todos los puntos, sino que muestren el promedio en cada nivel de displ para cada class de vehículo. ¿Podrías reproducir el gráfico de abajo? Usando como base: ggplot(gapminder, aes(country, lifeExp, color = continent)) + stat_summary(...) + facet_grid(...) + theme(axis.text.x = element_blank()) # Eliminamos etiquetas de nombres de paises Podrías crear este gráfico? Mostramos mediana ± sd para cada país, organizado por continente. 2.3 Personalización de gráficas Habitualmente, un vez hemos creado la gráfica, querremos personalizar varias cosas, como las escalas, colores, estilos, título, etc. 2.3.1 Coordenadas # Gráfico inicial ggplot(gapminder, aes(continent)) + geom_bar() # coord_flip() ggplot(gapminder, aes(continent)) + geom_bar() + coord_flip() # coord_polar() ggplot(gapminder, aes(continent)) + geom_bar() + coord_polar() 2.3.2 Scales Usaremos las funciones que empiezan por scale_ para multitud de cosas, por ejemplo, cambiar las etiquetas de los ejes x o y: # Grafico inicial ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) + geom_point(alpha = .1) # Añadimos breaks en eje y ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) + geom_point(alpha = .1) + scale_y_continuous(breaks = seq(0, 100, 5)) # Definimos cuantos breaks queremos ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) + geom_point(alpha = .1) + scale_x_continuous(n.breaks = 20, guide = guide_axis(angle = 90)) + scale_y_continuous(n.breaks = 20) # Separador de miles y breaks en x ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) + geom_point(alpha = .1) + scale_y_continuous(breaks = seq(0, 100, 5)) + scale_x_continuous(labels = scales::comma, n.breaks = 10) # Formato de $ ($M) ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) + geom_point(alpha = .1) + scale_y_continuous(breaks = seq(0, 100, 5)) + scale_x_continuous(labels = scales::dollar_format(prefix = &quot;$&quot;, suffix = &quot;M&quot;), breaks = seq(0, 100000, 20000)) # Escala log ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) + geom_point(alpha = .1) + scale_y_continuous(breaks = seq(0, 100, 5)) + scale_x_log10(labels = scales::dollar_format(prefix = &quot;$&quot;, suffix = &quot;M&quot;)) # Invertimos escala ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) + geom_point(alpha = .1) + scale_y_reverse() # No mostramos el texto de los breaks de x ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) + geom_point(alpha = .1) + scale_y_reverse() + theme(axis.text.x = element_blank()) # Porcentaje ggplot(gapminder, aes(continent, ..prop.., group = 1)) + geom_bar() + scale_y_continuous(labels = scales::percent) Usar eje secundario (derecho) para mostrar etiquetas: gapminder_last = gapminder %&gt;% group_by(continent) %&gt;% filter(year == max(year)) %&gt;% summarize(lifeExp = mean(lifeExp)) ggplot(gapminder, aes(year, lifeExp, linetype = continent, color = continent)) + stat_summary(fun = mean, geom = &quot;line&quot;) + scale_y_continuous( limits = c(0, max(gapminder$lifeExp)), expand = c(0,0), sec.axis = dup_axis( breaks = gapminder_last$lifeExp, labels = gapminder_last$continent, name = NULL)) + scale_x_continuous(expand = c(0,0)) + guides(color = &quot;none&quot;, linetype = &quot;none&quot;) Usar {geomtextpath} para ubicar las etiquetas en el camino de las líneas: # https://allancameron.github.io/geomtextpath/ ggplot(gapminder, aes(year, lifeExp, linetype = continent, color = continent)) + geomtextpath::geom_labelsmooth(aes(label = continent), text_smoothing = 30, method = &quot;loess&quot;, formula = y ~ x, size = 3, linewidth = 1, boxlinewidth = 0.3) + scale_x_continuous(expand = c(0,0)) + guides(color = &quot;none&quot;, linetype = &quot;none&quot;) Ejercicio El plot del panel (A) tiene varios problemas: los años no son enteros o factores los casos no se muestran con un separador de miles la leyenda esta a la derecha ocupado un espacio precioso, … Usando el plot base (A): ggplot(table1, aes(year, cases)) + geom_line(aes(group = country), colour = &quot;grey50&quot;) + geom_point(aes(colour = country)) Trata de resolver los problemas e intenta llegar al resultado que se ve en el panel (B). Soluciones: - as.factor(VARIABLE): convierte una variable en categórica - scale_x_discrete(expand = c(.05, 0)) nos ayuda a posicionar los niveles de year cerca de los extremos de la gráfica. Si te sobra tiempo, puedes tratar de reproducir la siguiente versión mejorada… 2.3.3 Colors and fill scales Las funciones scale_color_, scale_fill_ nos sirven para hacer cambios globales en los colores o rellenos de las gráficas. Algunos ejemplos: # Plot inicial ggplot(gapminder, aes(continent, lifeExp, fill = continent)) + geom_violin(alpha = .2) # Relleno usando paleta blues ggplot(gapminder, aes(continent, lifeExp, fill = continent)) + geom_violin(alpha = .2) + scale_fill_brewer(palette = &quot;Blues&quot;) # Color grey ggplot(iris, aes(Petal.Width, Petal.Length, color = Species)) + geom_point() + scale_color_grey(start = 0.2, end = 0.8, na.value = &quot;red&quot;) # Gradient ggplot(iris, aes(Petal.Width, Petal.Length, color = Petal.Width)) + geom_point() + scale_color_gradient(low = &quot;red&quot;, high = &quot;blue&quot;) # Gradient con un numero predefinidos de una paleta ggplot(iris, aes(Petal.Width, Petal.Length, color = Petal.Width)) + geom_point() + scale_colour_gradientn(colours = terrain.colors(3)) Ejercicio Usando como base este plot, podrias cambiarle la paleta de color para usar una de las cualitativas? Soluciones: Ver sección Palettes de la ayuda de scale_fill_brewer() ggplot(gapminder, aes(continent, lifeExp, fill = continent)) + geom_violin(alpha = .2) + scale_fill_brewer(palette = &quot;Blues&quot;) Si intentamos asignar colores manualmente a los continentes de este modo, recibimos un error: ggplot(gapminder, aes(gdpPercap, lifeExp)) + geom_point(color = c(&quot;red&quot;, &quot;grey&quot;, &quot;green&quot;, &quot;purple&quot;, &quot;black&quot;)) # Error: Aesthetics must be either length 1 or the same as the data (1704): colour Podrías resolver el error y mostrar el gráfico de abajo? Soluciones: Tenemos que: - indicar que el color depende de continent - usar scale_color_manual(), con el parámetro values para asignar los colores (ver ejemplos en la ayuda de la función) 2.3.4 Combinando gráficas Con {cowplot} podemos combinar gráficas de manera muy simple. Otro paquete muy interesante es {patchwork}. plot1 = ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) + geom_point(alpha = .1) + scale_y_continuous(breaks = seq(0, 100, 5)) + scale_x_log10(labels = scales::dollar_format(prefix = &quot;$&quot;, suffix = &quot;M&quot;)) + theme(legend.position = &quot;top&quot;) plot2 = ggplot(gapminder, aes(continent, ..prop.., group = 1)) + geom_bar() + scale_y_continuous(labels = scales::percent) + coord_flip() cowplot::plot_grid(plot2, plot1, rel_widths = c(.3, 0.7)) Ejercicio Combina los dos plots del ejercicio anterior, con las siguientes modificaciones: Elimina las leyendas asociadas a colores y rellenos Usa la paleta “Accent” para los colores y rellenos Soluciones: - guides(fill = “none”) quita la leyenda asociada a fill… - scale_fill_brewer(palette = “Accent”) asigna la paleta “Accent” a los rellenos (fill) 2.3.4.1 Combinando múltiples gráficas Podemos combinar múltiples gráficas y llegar a hacer cosas mucho más complejas como combinar un scatteplot con un par de histogramas: # Set up scatterplot scatterplot &lt;- ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) + geom_point(size = 3, alpha = 0.6) + guides(color = &quot;none&quot;) + theme(plot.margin = margin()) # Define marginal histogram marginal_distribution &lt;- function(x, var, group) { ggplot(x, aes_string(x = var, fill = group)) + geom_histogram(bins = 30, alpha = 0.4, position = &quot;identity&quot;) + # geom_density(alpha = 0.4, size = 0.1) + guides(fill = &quot;none&quot;) + theme_void() + theme(plot.margin = margin()) } # Set up marginal histograms x_hist &lt;- marginal_distribution(iris, &quot;Sepal.Length&quot;, &quot;Species&quot;) y_hist &lt;- marginal_distribution(iris, &quot;Sepal.Width&quot;, &quot;Species&quot;) + coord_flip() # Align histograms with scatterplot aligned_x_hist &lt;- align_plots(x_hist, scatterplot, align = &quot;v&quot;)[[1]] aligned_y_hist &lt;- align_plots(y_hist, scatterplot, align = &quot;h&quot;)[[1]] # Arrange plots cowplot::plot_grid( aligned_x_hist, NULL, scatterplot, aligned_y_hist, ncol = 2, nrow = 2, rel_heights = c(0.2, 1), rel_widths = c(1, 0.2) ) 2.3.5 Estilos Los estilos nos permiten personalizar los gráficos de manera muy sencilla, por ejemplo, usando {ggtheme}. Podéis ver un tutorial aquí. Primero creamos un gráfico sobre el que aplicaremos estilos. p &lt;- ggplot(iris, aes(Petal.Width, Petal.Length, color = Species)) + geom_point() + labs(title = &#39;A ggplot simple graph&#39;, subtitle = &#39;Simple tweaks to improve plots, or not&#39;, x = &#39;&#39;, y = &#39;&#39;, caption = &#39;https://github.com/gorkang / @gorkang&#39;) + theme_gray() # This is the default. Needed here because of the Bookdown theme p Usando el tema fivethirtyeight: p + ggthemes::scale_color_fivethirtyeight() + ggthemes::theme_fivethirtyeight() Usando el tema economist: p + ggthemes::scale_color_economist() + ggthemes::theme_economist() Ejercicios Serías capaz de reproducir este gráfico, usando el dataframe diamonds y el theme_economist? Gráfica inicial: ggplot(diamonds, aes(price, cut, fill = cut, color = cut)) + ggridges::geom_density_ridges(alpha = .6) Soluciones: - scale_x_log10() nos permite transformar el eje x a una escala logarítmica - Hay que aplicar un ggthemes::scale_* para cada elemento: color, fill… Serías capaz de reproducir este gráfico, usando el dataframe gapminder y la paleta Accent? Gráfica inicial: ggplot(gapminder, aes(gdpPercap, continent, fill = continent, color = continent)) + ggridges::geom_density_ridges(alpha = .6) Soluciones: - scales::dollar_format() aplicado al parámetro labels de las funciones scale_x_* nos permite darle formato de moneda a las etiquetas de la escala x 2.4 Otras gráficas Un tipo de gráfica genial para mostrar simultáneamente observaciones individuales, distribuciones, y cambios, es el raincloudplot. # Transforma datos para adaptarlos a la estructura necesaria para raincloudplot df_1x1 &lt;- data_1x1( array_1 = iris$Sepal.Length[1:50], array_2 = iris$Sepal.Length[51:100], jit_distance = .09, jit_seed = 321) # Crea raincloudplot raincloud_1x1_repmes( data = df_1x1, colors = (c(&#39;dodgerblue&#39;, &#39;darkorange&#39;)), fills = (c(&#39;dodgerblue&#39;, &#39;darkorange&#39;)), line_color = &#39;gray&#39;, line_alpha = .3, size = 1, alpha = .6, align_clouds = FALSE) + scale_x_continuous(breaks = c(1, 2), labels = c(&quot;Pre&quot;, &quot;Post&quot;), limits = c(0, 3)) + xlab(&quot;Time&quot;) + ylab(&quot;Score&quot;) 2.5 Visualización interactiva El paquete {plotly} nos permite crear gráficas con algunos niveles de interactividad usando funciones propias, o modificando gráficas creadas con ggplot. 2.5.1 ggplots interactivos con plotly Scatterplot creado con ggplot donde se puede ver el valor de los puntos, seleccionar áreas, etc. plotly::ggplotly( ggplot(gapminder %&gt;% filter(year == 2007), aes(gdpPercap, lifeExp, color = continent, size = country)) + geom_point(alpha = .3, point = 2) + scale_y_continuous(breaks = seq(0, 100, 5)) + scale_x_log10(labels = scales::dollar_format(prefix = &quot;$&quot;, suffix = &quot;M&quot;)) + theme(legend.position = &quot;none&quot;) ) 2.5.2 Surface plots con plotly Surface plot creado con plotly donde se muestra la relación entre 3 variables en un entorno interactivo 3D. DF_RAW = structure(c(181, 163, 60, 124, 76, 62, 73, 59, 17, 21, 26, 7, 1, 2, 3, 188, 145, 61, 130, 61, 59, 62, 57, 20, 22, 22, 6, 4, 5, 5, 137, 154, 54, 191, 75, 56, 65, 56, 22, 27, 33, 14, 5, 5, 5, 126, 185, 65, 109, 51, 71, 57, 38, 25, 23, 21, 10, 5, 5, 5, 150, 144, 44, 123, 58, 24, 48, 41, 19, 26, 21, 5, 5, 5, 5, 138, 137, 61, 130, 67, 34, 60, 44, 19, 21, 16, 4, 5, 5, 5, 121, 146, 101, 92, 70, 74, 88, 33, 18, 39, 24, 12, 5, 5, 5, 100, 160, 129, 117, 70, 61, 42, 35, 22, 25, 21, 7, 10, 23, 8, 100, 129, 130, 107, 64, 61, 44, 25, 23, 30, 18, 11, 20, 58, 40, 100, 136, 131, 96, 53, 31, 51, 37, 43, 31, 19, 2, 22, 40, 41, 100, 124, 154, 74, 62, 44, 34, 15, 26, 23, 20, 6, 23, 10, 19, 100, 126, 251, 76, 73, 84, 47, 40, 32, 25, 32, 6, 13, 10, 13, 100, 129, 194, 91, 53, 99, 46, 34, 60, 21, 17, 6, 14, 14, 26, 100, 115, 119, 88, 64, 108, 37, 24, 49, 26, 17, 6, 15, 15, 47), .Dim = 15:14, .Dimnames = list(c(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;10&quot;, &quot;11&quot;, &quot;12&quot;, &quot;13&quot;, &quot;14&quot;, &quot;15&quot;), c(&quot;2006&quot;, &quot;2007&quot;, &quot;2008&quot;, &quot;2009&quot;, &quot;2010&quot;, &quot;2011&quot;, &quot;2012&quot;, &quot;2013&quot;, &quot;2014&quot;, &quot;2015&quot;, &quot;2016&quot;, &quot;2017&quot;, &quot;2018&quot;, &quot;2019&quot;))) DF = DF_RAW plot1 = plotly::plot_ly(x = ~ colnames(DF), y = ~ rownames(DF), z = ~ DF) %&gt;% plotly::add_surface(name = &quot;3D mesh&quot;, connectgaps = TRUE, hidesurface = TRUE, contours = list( x = list(show = TRUE, width = 1, highlightwidth = 2, highlightcolor = &quot;#41a7b3&quot;, highlight = TRUE), y = list(show = TRUE, width = 1, highlightwidth = 2, highlightcolor = &quot;#41a7b3&quot;, highlight = TRUE), z = list(show = FALSE, width = 1, highlightwidth = 2, highlightcolor = &quot;#41a7b3&quot;, highlight = FALSE) )) %&gt;% plotly::add_surface(name = &quot;surface&quot;, connectgaps = FALSE, contours = list( x = list(show = F, width = 1, highlightwidth = 2, highlightcolor = &quot;#41a7b3&quot;, highlight = TRUE), y = list(show = F, width = 1, highlightwidth = 2, highlightcolor = &quot;#41a7b3&quot;, highlight = TRUE), z = list(show = FALSE, width = 1, highlightwidth = 2, highlightcolor = &quot;#41a7b3&quot;, highlight = FALSE) ) ) plot1 2.5.3 Animando gráficas con gganimate {gganimate} nos permite crear ggplots añadiendo la dimensión temporal if (!require(&#39;gganimate&#39;)) remotes::install_github(&#39;thomasp85/gganimate&#39;); library(&#39;gganimate&#39;) #sudo apt-get install ffmpeg p = ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) + geom_point(alpha = 0.7, show.legend = FALSE) + scale_colour_manual(values = country_colors) + scale_size(range = c(2, 12)) + scale_x_log10() + facet_wrap(~continent) + # Here comes the gganimate specific bits labs(title = &#39;Year: {frame_time}&#39;, x = &#39;GDP per capita&#39;, y = &#39;life expectancy&#39;) + transition_time(year) + ease_aes(&#39;linear&#39;) # Create animated plot animate(p, renderer = ffmpeg_renderer(), height = 6, width = 10, units = &quot;in&quot;, res = 300) # Save plot # anim_save(&quot;name_file.mp4&quot;, animation = last_animation()) Video Bibliografía Matejka, J., &amp; Fitzmaurice, G. (2017, May). Same stats, different graphs: Generating datasets with varied appearance and identical statistics through simulated annealing. In Proceedings of the 2017 CHI Conference on Human Factors in Computing Systems (pp. 1290-1294). ACM. https://bbc.github.io/rcookbook/ https://github.com/bbc/bbplot https://github.com/dreamRs/esquisse Garrick Aden-Buie. A Gentle Guide to the Grammar of Graphics with ggplot2: https://github.com/gadenbuie/gentle-ggplot2 Michael Toth. You Need to Start Branding Your Graphs. Here’s How, with ggplot!: https://michaeltoth.me/you-need-to-start-branding-your-graphs-heres-how-with-ggplot.html Claus Wilke: https://wilkelab.org/practicalgg/ Thomas Lin Pedersen: Part 1: https://www.youtube.com/watch?v=h29g21z0a68 Part 2: https://www.youtube.com/watch?v=0m4yywqNPVY Big Book or R : https://www.bigbookofr.com/index.html "],["preparación-y-transformación-de-datos.html", "Capítulo 3 Preparación y transformación de datos 3.1 Importar y exportar datos 3.2 Preparación y transformación de datos 3.3 Verbos avanzados y otras criaturas indómitas Ejercicios - wide to long 3.4 Separate, omit, ifelse, case_when, tipos de variables… Ejercicios - verbos avanzados dplyr 3.5 Regular expressions Ejercicios - Calcular puntajes de escalas usando regular expressions Bibliografía", " Capítulo 3 Preparación y transformación de datos En este capítulo vamos a aprender a importar y exportar todo tipo de archivos, ademas de pasar de una base de datos no especialmente amigable, a una base de datos tidy, esto es, siguiendo algunas reglas bien sencillas que harán más fácil trabajar con los datos. Paquetes para este capítulo if (!require(&#39;dplyr&#39;)) install.packages(&#39;dplyr&#39;); library(&#39;dplyr&#39;) if (!require(&quot;DT&quot;)) install.packages(&quot;DT&quot;); library(&quot;DT&quot;) if (!require(&quot;ggplot2&quot;)) install.packages(&quot;ggplot2&quot;); library(&quot;ggplot2&quot;) if (!require(&quot;googlesheets4&quot;)) install.packages(&quot;googlesheets4&quot;); library(&quot;googlesheets4&quot;) if (!require(&quot;haven&quot;)) install.packages(&quot;haven&quot;); library(&quot;haven&quot;) if (!require(&quot;here&quot;)) install.packages(&quot;here&quot;); library(&quot;here&quot;) if (!require(&quot;janitor&quot;)) install.packages(&quot;janitor&quot;); library(&quot;janitor&quot;) if (!require(&quot;purrr&quot;)) install.packages(&quot;purrr&quot;); library(&quot;purrr&quot;) if (!require(&#39;readr&#39;)) install.packages(&#39;readr&#39;); library(&#39;readr&#39;) if (!require(&quot;readxl&quot;)) install.packages(&quot;readxl&quot;); library(&quot;readxl&quot;) if (!require(&quot;readODS&quot;)) install.packages(&quot;readODS&quot;); library(&quot;readODS&quot;) if (!require(&quot;tidyr&quot;)) install.packages(&quot;tidyr&quot;); library(&quot;tidyr&quot;) if (!require(&quot;waldo&quot;)) install.packages(&quot;waldo&quot;); library(&quot;waldo&quot;) if (!require(&quot;writexl&quot;)) install.packages(&quot;writexl&quot;); library(&quot;writexl&quot;) if (!require(&#39;regexplain&#39;)) remotes::install_github(&quot;gadenbuie/regexplain&quot;); library(&#39;regexplain&#39;) 3.1 Importar y exportar datos Hasta ahora hemos trabajado con data-frames como mpg o gaminder, que forman parte de la instalación por defecto de R, o alguno de sus paquetes. Pero habitualmente trabajaremos con datos propios, por lo que necesitaremos leer uno o varios archivos. RStudio tiene un menú para ayudar a importar datos en formatos habituales , pero aquí aprenderemos a hacerlo todo en código, para que nuestros scripts sean autocontenidos. Podemos ver algunas de las funciones de esta sección y cómo usarlas en la Cheatsheet importar datos 3.1.1 Importar un solo archivo Empezaremos por la situación básica más común, cómo importar un solo archivo. Vamos a ver con más detalle los archivos CSV (comma separated values). Las funciones para importar archivos excel, Libreoffice, SPSS, etc. tienen parámetros muy similares. 3.1.1.1 Archivos CSV Usaremos las siguientes funciones del paquete readr: readr::read_csv(): valores separados por coma (“,”) readr::read_csv2(): valores separados por punto y coma (“;”) readr::read_delim( , delim = \"|\"): valores separados por un delimitador arbitrario Leemos el archivo 02-read-csv.csv de la carpeta data/files/: DF_name = read_csv(&quot;data/files/02-read-csv.csv&quot;) Si estamos usando rmarkdown, o similar, es recomendable usar here::here() para evitar problemas con los paths a los archivos. name_of_file = here::here(&quot;data/files/02-read-csv.csv&quot;) DF_name = read_csv(name_of_file) DF_name ## # A tibble: 103 × 9 ## ...1 ID Genero Edad Educacion FollowUP condition condition2 PPV_DECLARED ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 4 41904 1 47 8 80 PPV_Cond1 90LInt 99 ## 2 5 95041 2 21 6 90 PPV_Cond1 90RInt 99 ## 3 6 74594 2 29 6 10 PPV_Cond1 100LInt 99 ## 4 15 72903 2 27 7 75 PPV_Cond1 100RInt 1 ## 5 16 21260 1 29 5 35 PPV_Cond1 90LInt 24 ## 6 18 50315 2 28 6 14 PPV_Cond1 90RInt NA ## 7 19 21774 2 27 4 2 PPV_Cond1 100LInt 99 ## 8 20 20881 2 55 6 89 PPV_Cond1 100RInt 99 ## 9 21 39751 2 28 6 6 PPV_Cond1 90LInt 99 ## 10 22 99384 1 46 5 0 PPV_Cond1 90RInt 1 ## # … with 93 more rows ## # ℹ Use `print(n = ...)` to see more rows Si usamos un repositorio online para almacenar los archivos, podemos leer directamente de una URL. URL = &quot;https://raw.githubusercontent.com/gorkang/R_preparacion_visualizacion_datos/master/data/files/02-read-csv.csv&quot; read_csv(URL) 3.1.1.2 Otros tipos de archivos Archivos excel name_of_file = here::here(&quot;data/files/02-read-xlsx.xlsx&quot;) readxl::read_excel(name_of_file) Archivos SPSS name_of_file = here::here(&quot;data/files/02-read-sav.sav&quot;) haven::read_sav(name_of_file) Archivos Libreoffice name_of_file = here::here(&quot;data/files/02-read-ods.ods&quot;) df_ODS = readODS::read_ods(name_of_file) # Vemos las primeras filas head(df_ODS) Google sheets Para poder leer una gsheet debemos: Crear un enlace para compartirla: \"Share\" -&gt; \"Get shareable link\" Extraemos el identificador de la google sheet: De https://docs.google.com/spreadsheets/d/1KFmnYnKhPCi3zRJpkZzZii8H-aGSTwr97lonoaz76AY/edit?usp=sharing Usaremos: 1KFmnYnKhPCi3zRJpkZzZii8H-aGSTwr97lonoaz76AY if (!require(&quot;googlesheets4&quot;)) install.packages(&quot;googlesheets4&quot;); library(&quot;googlesheets4&quot;) name_of_sheet = &quot;1KFmnYnKhPCi3zRJpkZzZii8H-aGSTwr97lonoaz76AY&quot; googlesheets4::read_sheet(name_of_sheet) Ejercicios - Importar datos En el repositorio R para preparación y visualización de datos - DNSC - UAI de la Open Science Foundation podrás ver una carpeta llamada Capitulo 2. Si no tenéis conexión a internet, podéis encontrar los archivos en data/files/OSF_files. Importa los archivos que ahí aparecen, asegurándote que los nombres de columna se leen adecuadamente: Solucion: La función read_excel() tiene parámetros como skip, que permite no leer las primeras n lineas, o sheet, con la que puedes indicar que pestaña leer. 02-extralines-1.xlsx 02-extralines-2.xlsx 02-extralines-3.xlsx 02-spanish.csv 3.1.2 Importar múltiples archivos En ocasiones tenemos múltiples archivos en una carpeta (e.g. uno por participante) y queremos combinarlos todos en un solo DF. Importamos los archivos que están en la carpeta data/files/02-CSVs # Directorio donde se encuentran los archivos name_of_folder = here::here(&quot;data/files/02-CSVs&quot;) # Listamos los archivos a leer files &lt;- list.files(name_of_folder, full.names = TRUE) # Leemos todos los archivos, combinandolos en un dataframe full &lt;- purrr::map_df(files, read_csv) full ## # A tibble: 1,600 × 9 ## Sex Priming trialN Block Adjective Valence Answer Arrow rT ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 male Collective 1 we ofensivo negative yes left 623 ## 2 male Collective 2 we resentido negative no right 1235 ## 3 male Collective 3 we ego�sta negative yes left 335 ## 4 male Collective 4 we indiscreto negative yes left 355 ## 5 male Collective 5 we sumiso negative yes left 618 ## 6 male Collective 6 we agradable positive yes left 328 ## 7 male Collective 7 we clasista negative yes left 348 ## 8 male Collective 8 we altruista positive yes left 1620 ## 9 male Collective 9 we ansioso negative yes left 346 ## 10 male Collective 10 we presumido negative yes left 778 ## # … with 1,590 more rows ## # ℹ Use `print(n = ...)` to see more rows 3.1.2.1 Incluir nombres de archivos Habitualmente será importante saber a que archivo pertenecen los datos que hemos leído. Podemos incluir los nombres de archivo en una columna: name_of_folder = here::here(&quot;data/files/02-CSVs&quot;) files &lt;- list.files(name_of_folder, full.names = TRUE) %&gt;% # Asignamos nombres a los elementos del vector set_names(basename(.)) # Con el parámetro .id, almacenamos los nombres en la columna &quot;file&quot; full2 &lt;- map_df(files, read_csv, .id = &quot;file&quot;) full2 ## # A tibble: 1,600 × 10 ## file Sex Priming trialN Block Adjective Valence Answer Arrow rT ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 01.csv male Collective 1 we ofensivo negative yes left 623 ## 2 01.csv male Collective 2 we resentido negative no right 1235 ## 3 01.csv male Collective 3 we ego�sta negative yes left 335 ## 4 01.csv male Collective 4 we indiscreto negative yes left 355 ## 5 01.csv male Collective 5 we sumiso negative yes left 618 ## 6 01.csv male Collective 6 we agradable positive yes left 328 ## 7 01.csv male Collective 7 we clasista negative yes left 348 ## 8 01.csv male Collective 8 we altruista positive yes left 1620 ## 9 01.csv male Collective 9 we ansioso negative yes left 346 ## 10 01.csv male Collective 10 we presumido negative yes left 778 ## # … with 1,590 more rows ## # ℹ Use `print(n = ...)` to see more rows 3.1.2.2 Con parametros Añadimos parámetros a la función de lectura. En este caso, definimos el tipo de columna esperado con la función col_types(). Con esto nos aseguraremos que si alguno de los archivos tiene el tipo de datos “incorrecto”, aparecerán warnings en la importación: name_of_folder = here::here(&quot;data/files/02-CSVs&quot;) files &lt;- list.files(name_of_folder, full.names = TRUE) full &lt;- map_df(files, read_csv, col_types = cols( Sex = col_factor(), Priming = col_character(), trialN = col_integer(), Block = col_character(), Adjective = col_character(), Valence = col_factor(), Answer = col_character(), Arrow = col_character(), rT = col_double())) full ## # A tibble: 1,600 × 9 ## Sex Priming trialN Block Adjective Valence Answer Arrow rT ## &lt;fct&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;fct&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 male Collective 1 we ofensivo negative yes left 623 ## 2 male Collective 2 we resentido negative no right 1235 ## 3 male Collective 3 we ego�sta negative yes left 335 ## 4 male Collective 4 we indiscreto negative yes left 355 ## 5 male Collective 5 we sumiso negative yes left 618 ## 6 male Collective 6 we agradable positive yes left 328 ## 7 male Collective 7 we clasista negative yes left 348 ## 8 male Collective 8 we altruista positive yes left 1620 ## 9 male Collective 9 we ansioso negative yes left 346 ## 10 male Collective 10 we presumido negative yes left 778 ## # … with 1,590 more rows ## # ℹ Use `print(n = ...)` to see more rows Ejercicios - Importar múltiples archivos Cuando más arriba importamos los archivos que están en la carpeta data/files/02-CSVs: ¿Qué archivos importamos exáctamente? ¿Ves algún problema en lo que hicimos? Revisa el número de filas y la variable files. El resultado final debería ser así: ## # A tibble: 1,200 × 9 ## Sex Priming trialN Block Adjective Valence Answer Arrow rT ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 male Collective 1 we ofensivo negative yes left 623 ## 2 male Collective 2 we resentido negative no right 1235 ## 3 male Collective 3 we ego�sta negative yes left 335 ## 4 male Collective 4 we indiscreto negative yes left 355 ## 5 male Collective 5 we sumiso negative yes left 618 ## 6 male Collective 6 we agradable positive yes left 328 ## 7 male Collective 7 we clasista negative yes left 348 ## 8 male Collective 8 we altruista positive yes left 1620 ## 9 male Collective 9 we ansioso negative yes left 346 ## 10 male Collective 10 we presumido negative yes left 778 ## # … with 1,190 more rows ## # ℹ Use `print(n = ...)` to see more rows Leed los archivos .xlsx de la carpeta data/files/02-XLSs, combinándolos en un único DF. El resultado final debería ser como se ve a continuación: ## # A tibble: 1,200 × 9 ## Sex Priming trialN Block Adjective Valence Answer Arrow rT ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 male Collective 1 we ofensivo negative yes left 623 ## 2 male Collective 2 we resentido negative no right 1235 ## 3 male Collective 3 we ego�sta negative yes left 335 ## 4 male Collective 4 we indiscreto negative yes left 355 ## 5 male Collective 5 we sumiso negative yes left 618 ## 6 male Collective 6 we agradable positive yes left 328 ## 7 male Collective 7 we clasista negative yes left 348 ## 8 male Collective 8 we altruista positive yes left 1620 ## 9 male Collective 9 we ansioso negative yes left 346 ## 10 male Collective 10 we presumido negative yes left 778 ## # … with 1,190 more rows ## # ℹ Use `print(n = ...)` to see more rows 3.1.3 Exportar datos Muchas veces guardaremos los datos una vez procesados. Esto se puede hacer con la familia de funciones write_*. 3.1.3.1 Archivos CSV # Versión simple write_csv(DF_name, &quot;data/files/02-write-csv.csv&quot;) # Versión para Rmarkdown name_of_file = here::here(&quot;data/files/02-write-csv.csv&quot;) write_csv(DF_name, name_of_file) 3.1.3.2 Otros Archivos name_of_file = here::here(&quot;data/files/02-write-xlsx.xlsx&quot;) writexl::write_xlsx(DF_name, name_of_file) name_of_file = here::here(&quot;data/files/02-write-sav.sav&quot;) haven::write_sav(DF_name, name_of_file) name_of_file = here::here(&quot;data/files/02-write-ods.ods&quot;) readODS::write_ods(DF_name, name_of_file) 3.2 Preparación y transformación de datos Para la preparación y transformación de datos usaremos fundamentalmente dplyr. Hay otros paquetes más rápidos como data.table. Si trabajas con datos gigantescos (millones de filas), sin duda notarás la diferencia. La desventaja es que la sintaxis es (habitualmente) menos intuitiva. 3.2.1 Tidy data Existen tres sencillas reglas que definen la Tidy data: Cada variable tiene su columna propia Cada observación tiene su fila propia Cada valor tiene su celda propia Las ventajas fundamentales son: Uso de una manera consistente de trabajar, que se alinea con el tidyverse Facilidad para trabajar con la lógica vectorizada Por ejemplo. De manera muy sencilla y rápida podemos crear una nueva columna realizando algún cómputo arbitrario con los valores de otra columna. # Computa ratio por 100,000 table1 %&gt;% mutate(rate_per_100K = cases / population * 100000) ## # A tibble: 6 × 5 ## country year cases population rate_per_100K ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Afghanistan 1999 745 19987071 3.73 ## 2 Afghanistan 2000 2666 20595360 12.9 ## 3 Brazil 1999 37737 172006362 21.9 ## 4 Brazil 2000 80488 174504898 46.1 ## 5 China 1999 212258 1272915272 16.7 ## 6 China 2000 213766 1280428583 16.7 O contar el número de casos por valor de una variable. # Computa casos para cada año table1 %&gt;% count(year, cases) ## # A tibble: 6 × 3 ## year cases n ## &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 1999 745 1 ## 2 1999 37737 1 ## 3 1999 212258 1 ## 4 2000 2666 1 ## 5 2000 80488 1 ## 6 2000 213766 1 # La suma total de casos para cada año table1 %&gt;% count(year, wt = cases) ## # A tibble: 2 × 2 ## year n ## &lt;int&gt; &lt;int&gt; ## 1 1999 250740 ## 2 2000 296920 Y, como no, ggplot funciona con datos tidy, en formato long. # Visualizar cambios a lo largo del tiempo ggplot(table1, aes(as.factor(year), cases)) + geom_line(aes(group = country), colour = &quot;grey50&quot;) + geom_point(aes(colour = country)) 3.2.2 Verbos dplyr Usaremos {dplyr}, un paquete muy potente para la manipulación de datos. Su sintaxis, además, es bastante intuitiva (¡son verbos en inglés!). Usando pipes %&gt;% (CONTROL + SHIFT + M) podemos enlazar operaciones de transformación de datos de manera muy sencilla (una vez nos aprendamos los verbos). Podemos ver más detalle y ejemplos en la Cheatsheet de dplyr. Verbos esenciales: filter(): filtrar filas arrange(): ordenar filas select(): seleccionar columnas rename(): renombrar columnas mutate(): crear columnas, modificar columnas, etc. Tabla resumen dplyr 3.2.2.1 Filtrar y ordenar filas # DF original name_of_file = here::here(&quot;data/files/02-read-csv.csv&quot;) DF_name = read_csv(name_of_file) DF_name ## # A tibble: 103 × 9 ## ...1 ID Genero Edad Educacion FollowUP condition condition2 PPV_DECLARED ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 4 41904 1 47 8 80 PPV_Cond1 90LInt 99 ## 2 5 95041 2 21 6 90 PPV_Cond1 90RInt 99 ## 3 6 74594 2 29 6 10 PPV_Cond1 100LInt 99 ## 4 15 72903 2 27 7 75 PPV_Cond1 100RInt 1 ## 5 16 21260 1 29 5 35 PPV_Cond1 90LInt 24 ## 6 18 50315 2 28 6 14 PPV_Cond1 90RInt NA ## 7 19 21774 2 27 4 2 PPV_Cond1 100LInt 99 ## 8 20 20881 2 55 6 89 PPV_Cond1 100RInt 99 ## 9 21 39751 2 28 6 6 PPV_Cond1 90LInt 99 ## 10 22 99384 1 46 5 0 PPV_Cond1 90RInt 1 ## # … with 93 more rows ## # ℹ Use `print(n = ...)` to see more rows # Filtrar DF_name %&gt;% filter(Educacion &gt; 8) ## # A tibble: 3 × 9 ## ...1 ID Genero Edad Educacion FollowUP condition condition2 PPV_DECLARED ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 157 12207 1 26 9 57 PPV_Cond2 100RInt 45 ## 2 287 60873 1 72 10 51 PPV_Cond3 100RAmp 99 ## 3 381 64486 2 19 9 80 PPV_Cond4 100RAmp 92 # Ordenar DF_name %&gt;% arrange(Educacion, desc(Genero)) ## # A tibble: 103 × 9 ## ...1 ID Genero Edad Educacion FollowUP condition condition2 PPV_DECLARED ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 350 20439 2 41 1 81 PPV_Cond4 90LAmp 92 ## 2 399 81379 1 36 1 90 PPV_Cond4 90RAmp 92 ## 3 42 20361 2 37 2 60 PPV_Cond1 100LInt 1 ## 4 364 19201 2 21 2 67 PPV_Cond4 90LAmp 10 ## 5 412 60292 1 28 2 90 PPV_Cond4 100LAmp 80 ## 6 44 92735 2 30 3 95 PPV_Cond1 100RInt 99 ## 7 135 32344 2 34 3 81 PPV_Cond2 100LInt 46 ## 8 299 33562 2 35 3 95 PPV_Cond3 100LAmp 99 ## 9 333 29837 2 28 3 80 PPV_Cond4 100RAmp 60 ## 10 361 57804 2 40 3 30 PPV_Cond4 100RAmp 90 ## # … with 93 more rows ## # ℹ Use `print(n = ...)` to see more rows 3.2.2.2 Seleccionar, ordenar y renombrar columnas # Seleccionar columnas DF_name %&gt;% select(Genero, Edad) ## # A tibble: 103 × 2 ## Genero Edad ## &lt;dbl&gt; &lt;dbl&gt; ## 1 1 47 ## 2 2 21 ## 3 2 29 ## 4 2 27 ## 5 1 29 ## 6 2 28 ## 7 2 27 ## 8 2 55 ## 9 2 28 ## 10 1 46 ## # … with 93 more rows ## # ℹ Use `print(n = ...)` to see more rows # Eliminar columnas DF_name %&gt;% select(-...1) ## # A tibble: 103 × 8 ## ID Genero Edad Educacion FollowUP condition condition2 PPV_DECLARED ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 41904 1 47 8 80 PPV_Cond1 90LInt 99 ## 2 95041 2 21 6 90 PPV_Cond1 90RInt 99 ## 3 74594 2 29 6 10 PPV_Cond1 100LInt 99 ## 4 72903 2 27 7 75 PPV_Cond1 100RInt 1 ## 5 21260 1 29 5 35 PPV_Cond1 90LInt 24 ## 6 50315 2 28 6 14 PPV_Cond1 90RInt NA ## 7 21774 2 27 4 2 PPV_Cond1 100LInt 99 ## 8 20881 2 55 6 89 PPV_Cond1 100RInt 99 ## 9 39751 2 28 6 6 PPV_Cond1 90LInt 99 ## 10 99384 1 46 5 0 PPV_Cond1 90RInt 1 ## # … with 93 more rows ## # ℹ Use `print(n = ...)` to see more rows # Ordenar y eliminar columnas DF_name %&gt;% select(ID, Edad, Genero, everything(), -...1) ## # A tibble: 103 × 8 ## ID Edad Genero Educacion FollowUP condition condition2 PPV_DECLARED ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 41904 47 1 8 80 PPV_Cond1 90LInt 99 ## 2 95041 21 2 6 90 PPV_Cond1 90RInt 99 ## 3 74594 29 2 6 10 PPV_Cond1 100LInt 99 ## 4 72903 27 2 7 75 PPV_Cond1 100RInt 1 ## 5 21260 29 1 5 35 PPV_Cond1 90LInt 24 ## 6 50315 28 2 6 14 PPV_Cond1 90RInt NA ## 7 21774 27 2 4 2 PPV_Cond1 100LInt 99 ## 8 20881 55 2 6 89 PPV_Cond1 100RInt 99 ## 9 39751 28 2 6 6 PPV_Cond1 90LInt 99 ## 10 99384 46 1 5 0 PPV_Cond1 90RInt 1 ## # … with 93 more rows ## # ℹ Use `print(n = ...)` to see more rows # Renombrar columnas DF_name %&gt;% rename(Identificador = ID, Sexo = Genero) ## # A tibble: 103 × 9 ## ...1 Identificador Sexo Edad Educacion FollowUP condition condit…¹ PPV_D…² ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 4 41904 1 47 8 80 PPV_Cond1 90LInt 99 ## 2 5 95041 2 21 6 90 PPV_Cond1 90RInt 99 ## 3 6 74594 2 29 6 10 PPV_Cond1 100LInt 99 ## 4 15 72903 2 27 7 75 PPV_Cond1 100RInt 1 ## 5 16 21260 1 29 5 35 PPV_Cond1 90LInt 24 ## 6 18 50315 2 28 6 14 PPV_Cond1 90RInt NA ## 7 19 21774 2 27 4 2 PPV_Cond1 100LInt 99 ## 8 20 20881 2 55 6 89 PPV_Cond1 100RInt 99 ## 9 21 39751 2 28 6 6 PPV_Cond1 90LInt 99 ## 10 22 99384 1 46 5 0 PPV_Cond1 90RInt 1 ## # … with 93 more rows, and abbreviated variable names ¹​condition2, ## # ²​PPV_DECLARED ## # ℹ Use `print(n = ...)` to see more rows # Renombrar usando la posicion (DANGER!) DF_name %&gt;% rename(Identificador = 2) ## # A tibble: 103 × 9 ## ...1 Identificador Genero Edad Educacion FollowUP condition condi…¹ PPV_D…² ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 4 41904 1 47 8 80 PPV_Cond1 90LInt 99 ## 2 5 95041 2 21 6 90 PPV_Cond1 90RInt 99 ## 3 6 74594 2 29 6 10 PPV_Cond1 100LInt 99 ## 4 15 72903 2 27 7 75 PPV_Cond1 100RInt 1 ## 5 16 21260 1 29 5 35 PPV_Cond1 90LInt 24 ## 6 18 50315 2 28 6 14 PPV_Cond1 90RInt NA ## 7 19 21774 2 27 4 2 PPV_Cond1 100LInt 99 ## 8 20 20881 2 55 6 89 PPV_Cond1 100RInt 99 ## 9 21 39751 2 28 6 6 PPV_Cond1 90LInt 99 ## 10 22 99384 1 46 5 0 PPV_Cond1 90RInt 1 ## # … with 93 more rows, and abbreviated variable names ¹​condition2, ## # ²​PPV_DECLARED ## # ℹ Use `print(n = ...)` to see more rows # Renombrar usando vectores oldnames = c(&quot;ID&quot;,&quot;Genero&quot;) newnames = c(&quot;Identificador&quot;,&quot;Sexo&quot;) DF_name %&gt;% rename_at(all_of(oldnames), ~ newnames) ## # A tibble: 103 × 9 ## ...1 Identificador Sexo Edad Educacion FollowUP condition condit…¹ PPV_D…² ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 4 41904 1 47 8 80 PPV_Cond1 90LInt 99 ## 2 5 95041 2 21 6 90 PPV_Cond1 90RInt 99 ## 3 6 74594 2 29 6 10 PPV_Cond1 100LInt 99 ## 4 15 72903 2 27 7 75 PPV_Cond1 100RInt 1 ## 5 16 21260 1 29 5 35 PPV_Cond1 90LInt 24 ## 6 18 50315 2 28 6 14 PPV_Cond1 90RInt NA ## 7 19 21774 2 27 4 2 PPV_Cond1 100LInt 99 ## 8 20 20881 2 55 6 89 PPV_Cond1 100RInt 99 ## 9 21 39751 2 28 6 6 PPV_Cond1 90LInt 99 ## 10 22 99384 1 46 5 0 PPV_Cond1 90RInt 1 ## # … with 93 more rows, and abbreviated variable names ¹​condition2, ## # ²​PPV_DECLARED ## # ℹ Use `print(n = ...)` to see more rows Ejercicios - verbos dplyr simples Cuenta los registros por año en el dataframe mpg Filtra los datos para quedarnos solo con los del año 1999 Renombra la variable displ para que se llame “engine displacement” Si aparece el error Error: unexpected symbol in ..., puedes ver la ayuda de la función ?make.names, o este post Ordena los datos (no las columnas) por consumo en ciudad cty y clase de vehículo class Crea un data-frame que no contenga la variable model Soluciones: - mpg %&gt;% count(year) - mpg %&gt;% filter(year == 1999) - mpg %&gt;% rename(engine displacement = displ) #ERROR - mpg %&gt;% rename(engine_displacement = displ) #SOLUCION1 - mpg %&gt;% rename(engine displacement = displ) #SOLUCION2 - mpg %&gt;% arrange(cty, class) - mpg %&gt;% select(-model) 3.2.2.3 Selección avanzada con select_helpers() El everything() que usamos dentro de select() más arriba es uno de los select_helpers() existentes. Estos nos ayudan a realizar operaciones de selección de variables sin necesidad de escribir a mano todas las variables. select_helpers() starts_with(): Empieza con un prefijo (e.g. starts_with(“CI_”)) ends_with(): Acaba con un sufijo contains(): Contiene una cadena de texto específica matches(): Matches a regular expression num_range(): Matches a numerical range like x01, x02, x03 one_of(): Matches variable names in a character vector everything(): Matches all variables last_col(): Select last variable Trabajaremos con los datos del paper Cognitive and Socio-affective Predictors of Social Adaptation, de Neely et al. Estos se pueden encontrar en un repositorio público de la OSF. Empezaremos con la base RAW en formato wide. # DF original df_wide = read_csv(&quot;https://raw.githubusercontent.com/gorkang/cognitive-and-socio-affective-predictors-of-social-adaptation/master/data-raw/sa-raw-anonymised.csv&quot;) cat(names(df_wide)) ## ID dem_genero dem_edad dem_nivedu WVOC_01_cod WVOC_02_cod WVOC_03_cod WVOC_04_cod WVOC_05_cod WVOC_06_cod WVOC_07_cod WVOC_08_cod WVOC_09_cod WVOC_10_cod WVOC_11_cod WVOC_12_cod WVOC_13_cod WVOC_14_cod WVOC_15_cod WVOC_16_cod WVOC_17_cod WVOC_18_cod WVOC_19_cod WVOC_20_cod WVOC_21_cod WVOC_22_cod WVOC_23_cod WVOC_24_cod WVOC_25_cod WVOC_26_cod WVOC_27_cod WVOC_28_cod WVOC_29_cod WVOC_30_cod WVOC_31_cod WVOC_32_cod WVOC_33_cod WVOC_TOTAL WVOC_TOTAL_STD WMAT_01_cod WMAT_01_raw WMAT_02_cod WMAT_02_raw WMAT_03_cod WMAT_03_raw WMAT_04_cod WMAT_04_raw WMAT_05_cod WMAT_05_raw WMAT_06_cod WMAT_06_raw WMAT_07_cod WMAT_07_raw WMAT_08_cod WMAT_08_raw WMAT_09_cod WMAT_09_raw WMAT_10_cod WMAT_10_raw WMAT_11_cod WMAT_11_raw WMAT_12_cod WMAT_12_raw WMAT_13_cod WMAT_13_raw WMAT_14_cod WMAT_14_raw WMAT_15_cod WMAT_15_raw WMAT_16_cod WMAT_16_raw WMAT_17_cod WMAT_17_raw WMAT_18_cod WMAT_18_raw WMAT_19_cod WMAT_19_raw WMAT_20_cod WMAT_20_raw WMAT_21_cod WMAT_21_raw WMAT_22_cod WMAT_22_raw WMAT_23_cod WMAT_23_raw WMAT_24_cod WMAT_24_raw WMAT_25_cod WMAT_25_raw WMAT_26_cod WMAT_26_raw WMAT_A WMAT_B WMAT_C wmat_total wmat_total_std bfbs_01_cod bfbs_01_conf bfbs_01_raw bfbs_03_cod bfbs_03_conf bfbs_03_raw bfbs_04_cod bfbs_04_conf bfbs_04_raw bfbs_10_cod bfbs_10_conf bfbs_10_raw bfbs_12_cod bfbs_12_conf bfbs_12_raw bfbs_14_cod bfbs_14_conf bfbs_14_raw bfbs_17_cod bfbs_17_conf bfbs_17_raw bfbs_23_cod bfbs_23_conf bfbs_23_raw bfbs_conf_total bfbs_cong_conf bfbs_cong_total bfbs_creib_conf bfbs_creib_total bfbs_incong_conf bfbs_incon_total bfbs_increib_conf bfbs_increib_total bfbs_invalid_conf bfbs_invalid_total bfbs_total bfbs_valid_conf bfbs_valid_total EA_01_raw EA_02_raw EA_03_raw EA_04_raw EA_05_raw EA_06_raw EA_07_raw EA_08_raw EA_09_raw EA_10_raw EA_11_raw EA_12_raw EA_13_raw EA_14_raw EA_15_raw EA_16_raw EA_17_raw EA_18_raw EA_19_raw EA_20_raw EA_21_raw EA_22_raw EA_23_raw EA_24_raw EA_azar_TOTAL EA_control_interno_TOTAL EA_otros_poderosos_TOTAL EAR_01_raw EAR_02_raw EAR_03_raw EAR_04_raw EAR_05_raw EAR_06_raw EAR_07_raw EAR_08_raw EAR_09_raw EAR_10_raw EAR_TOTAL ECRRS_ansiedad_TOTAL ECRRS_evitacion_TOTAL ECRRS_madre_01_raw ECRRS_madre_02_raw ECRRS_madre_03_raw ECRRS_madre_04_raw ECRRS_madre_05_raw ECRRS_madre_06_raw ECRRS_madre_07_raw ECRRS_madre_08_raw ECRRS_madre_09_raw ECRRS_madre_ansiedad_TOTAL ECRRS_madre_evitacion_TOTAL ECRRS_mejoramig_01_raw ECRRS_mejoramig_02_raw ECRRS_mejoramig_03_raw ECRRS_mejoramig_04_raw ECRRS_mejoramig_05_raw ECRRS_mejoramig_06_raw ECRRS_mejoramig_07_raw ECRRS_mejoramig_08_raw ECRRS_mejoramig_09_raw ECRRS_mejoramigo_ansiedad_TOTAL ECRRS_mejoramigo_evitacion_TOTAL ECRRS_padre_01_raw ECRRS_padre_02_raw ECRRS_padre_03_raw ECRRS_padre_04_raw ECRRS_padre_05_raw ECRRS_padre_06_raw ECRRS_padre_07_raw ECRRS_padre_08_raw ECRRS_padre_09_raw ECRRS_padre_ansiedad_TOTAL ECRRS_padre_evitacion_TOTAL ECRRS_pareja_01_raw ECRRS_pareja_02_raw ECRRS_pareja_03_raw ECRRS_pareja_04_raw ECRRS_pareja_05_raw ECRRS_pareja_06_raw ECRRS_pareja_07_raw ECRRS_pareja_08_raw ECRRS_pareja_09_raw ECRRS_pareja_ansiedad_TOTAL ECRRS_pareja_evitacion_TOTAL GHQ_01 GHQ_02 GHQ_03 GHQ_04 GHQ_05 GHQ_06 GHQ_07 GHQ_08 GHQ_09 GHQ_10 GHQ_11 GHQ_12 GHQ_autoestima_TOTAL GHQ_estres_TOTAL GHQ_exito_afrontamiento_TOTAL GHQ_TOTAL wdig_dir_total wdig_inv_total WDIGSIMB_TOTAL wdig_total wdig_total_std lkns_01_cod lkns_01_raw lkns_02_cod lkns_02_raw lkns_03_cod lkns_03_raw lkns_04_cod lkns_04_raw lkns_05_cod lkns_05_raw lkns_06_cod lkns_06_raw lkns_07_cod lkns_07_raw lkns_08_cod lkns_08_raw lkns_09_cod lkns_09_raw lkns_10_cod lkns_10_raw lkns_11_cod lkns_11_raw lkns_total SASS_01_raw SASS_02_raw SASS_03_raw SASS_04_raw SASS_05_raw SASS_06_raw SASS_07_raw SASS_08_raw SASS_09_raw SASS_10_raw SASS_11_raw SASS_12_raw SASS_13_raw SASS_14_raw SASS_15_raw SASS_16_raw SASS_17_raw SASS_18_raw SASS_19_raw SASS_20_raw SASS_21_raw SASS_TOTAL SASS_trabajo bayes_all_accuracy bayes_all_confidence bayes_pictorial_qualitative_accuracy bayes_pictorial_quantitative_accuracy bayes_text_qualitative_accuracy bayes_text_quantitative_accuracy # Seleccionamos variables que contienen la cadena de texto &quot;dem&quot; df_wide %&gt;% select(contains(&quot;dem&quot;)) ## # A tibble: 232 × 3 ## dem_genero dem_edad dem_nivedu ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 38 4 ## 2 0 67 2 ## 3 0 24 4 ## 4 0 30 4 ## 5 0 38 3 ## 6 0 45 4 ## 7 1 58 3 ## 8 1 47 4 ## 9 1 52 3 ## 10 1 49 4 ## # … with 222 more rows ## # ℹ Use `print(n = ...)` to see more rows # Seleccionamos variables que acacan con la cadena de texto &quot;cod&quot; df_wide %&gt;% select(ID, ends_with(&quot;cod&quot;)) ## # A tibble: 232 × 79 ## ID WVOC_…¹ WVOC_…² WVOC_…³ WVOC_…⁴ WVOC_…⁵ WVOC_…⁶ WVOC_…⁷ WVOC_…⁸ WVOC_…⁹ ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 2 2 2 1 2 2 2 2 1 ## 2 2 2 2 2 1 0 0 1 2 1 ## 3 3 2 2 2 1 2 2 1 2 2 ## 4 4 2 1 1 1 2 2 1 2 2 ## 5 5 2 2 1 1 0 0 1 2 0 ## 6 6 1 1 2 1 2 2 1 1 1 ## 7 7 1 0 2 1 0 0 1 0 0 ## 8 8 2 2 2 1 2 2 2 1 2 ## 9 9 2 2 2 2 2 1 1 2 0 ## 10 10 2 2 2 2 2 0 1 2 0 ## # … with 222 more rows, 69 more variables: WVOC_10_cod &lt;dbl&gt;, ## # WVOC_11_cod &lt;dbl&gt;, WVOC_12_cod &lt;dbl&gt;, WVOC_13_cod &lt;dbl&gt;, WVOC_14_cod &lt;dbl&gt;, ## # WVOC_15_cod &lt;dbl&gt;, WVOC_16_cod &lt;dbl&gt;, WVOC_17_cod &lt;dbl&gt;, WVOC_18_cod &lt;dbl&gt;, ## # WVOC_19_cod &lt;dbl&gt;, WVOC_20_cod &lt;dbl&gt;, WVOC_21_cod &lt;dbl&gt;, WVOC_22_cod &lt;dbl&gt;, ## # WVOC_23_cod &lt;dbl&gt;, WVOC_24_cod &lt;dbl&gt;, WVOC_25_cod &lt;dbl&gt;, WVOC_26_cod &lt;dbl&gt;, ## # WVOC_27_cod &lt;dbl&gt;, WVOC_28_cod &lt;dbl&gt;, WVOC_29_cod &lt;dbl&gt;, WVOC_30_cod &lt;dbl&gt;, ## # WVOC_31_cod &lt;dbl&gt;, WVOC_32_cod &lt;dbl&gt;, WVOC_33_cod &lt;dbl&gt;, … ## # ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names # Lo mismo, pero usando expresiones regulares df_wide %&gt;% select(ID, matches(&quot;cod$&quot;)) # $: fin de la cadena de texto ## # A tibble: 232 × 79 ## ID WVOC_…¹ WVOC_…² WVOC_…³ WVOC_…⁴ WVOC_…⁵ WVOC_…⁶ WVOC_…⁷ WVOC_…⁸ WVOC_…⁹ ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 2 2 2 1 2 2 2 2 1 ## 2 2 2 2 2 1 0 0 1 2 1 ## 3 3 2 2 2 1 2 2 1 2 2 ## 4 4 2 1 1 1 2 2 1 2 2 ## 5 5 2 2 1 1 0 0 1 2 0 ## 6 6 1 1 2 1 2 2 1 1 1 ## 7 7 1 0 2 1 0 0 1 0 0 ## 8 8 2 2 2 1 2 2 2 1 2 ## 9 9 2 2 2 2 2 1 1 2 0 ## 10 10 2 2 2 2 2 0 1 2 0 ## # … with 222 more rows, 69 more variables: WVOC_10_cod &lt;dbl&gt;, ## # WVOC_11_cod &lt;dbl&gt;, WVOC_12_cod &lt;dbl&gt;, WVOC_13_cod &lt;dbl&gt;, WVOC_14_cod &lt;dbl&gt;, ## # WVOC_15_cod &lt;dbl&gt;, WVOC_16_cod &lt;dbl&gt;, WVOC_17_cod &lt;dbl&gt;, WVOC_18_cod &lt;dbl&gt;, ## # WVOC_19_cod &lt;dbl&gt;, WVOC_20_cod &lt;dbl&gt;, WVOC_21_cod &lt;dbl&gt;, WVOC_22_cod &lt;dbl&gt;, ## # WVOC_23_cod &lt;dbl&gt;, WVOC_24_cod &lt;dbl&gt;, WVOC_25_cod &lt;dbl&gt;, WVOC_26_cod &lt;dbl&gt;, ## # WVOC_27_cod &lt;dbl&gt;, WVOC_28_cod &lt;dbl&gt;, WVOC_29_cod &lt;dbl&gt;, WVOC_30_cod &lt;dbl&gt;, ## # WVOC_31_cod &lt;dbl&gt;, WVOC_32_cod &lt;dbl&gt;, WVOC_33_cod &lt;dbl&gt;, … ## # ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names 3.2.2.4 Modificar y añadir variables # DF original DF_name ## # A tibble: 103 × 9 ## ...1 ID Genero Edad Educacion FollowUP condition condition2 PPV_DECLARED ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 4 41904 1 47 8 80 PPV_Cond1 90LInt 99 ## 2 5 95041 2 21 6 90 PPV_Cond1 90RInt 99 ## 3 6 74594 2 29 6 10 PPV_Cond1 100LInt 99 ## 4 15 72903 2 27 7 75 PPV_Cond1 100RInt 1 ## 5 16 21260 1 29 5 35 PPV_Cond1 90LInt 24 ## 6 18 50315 2 28 6 14 PPV_Cond1 90RInt NA ## 7 19 21774 2 27 4 2 PPV_Cond1 100LInt 99 ## 8 20 20881 2 55 6 89 PPV_Cond1 100RInt 99 ## 9 21 39751 2 28 6 6 PPV_Cond1 90LInt 99 ## 10 22 99384 1 46 5 0 PPV_Cond1 90RInt 1 ## # … with 93 more rows ## # ℹ Use `print(n = ...)` to see more rows # Modificar variable reemplazando valor DF_name %&gt;% mutate(PPV_DECLARED = PPV_DECLARED/100) ## # A tibble: 103 × 9 ## ...1 ID Genero Edad Educacion FollowUP condition condition2 PPV_DECLARED ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 4 41904 1 47 8 80 PPV_Cond1 90LInt 0.99 ## 2 5 95041 2 21 6 90 PPV_Cond1 90RInt 0.99 ## 3 6 74594 2 29 6 10 PPV_Cond1 100LInt 0.99 ## 4 15 72903 2 27 7 75 PPV_Cond1 100RInt 0.01 ## 5 16 21260 1 29 5 35 PPV_Cond1 90LInt 0.24 ## 6 18 50315 2 28 6 14 PPV_Cond1 90RInt NA ## 7 19 21774 2 27 4 2 PPV_Cond1 100LInt 0.99 ## 8 20 20881 2 55 6 89 PPV_Cond1 100RInt 0.99 ## 9 21 39751 2 28 6 6 PPV_Cond1 90LInt 0.99 ## 10 22 99384 1 46 5 0 PPV_Cond1 90RInt 0.01 ## # … with 93 more rows ## # ℹ Use `print(n = ...)` to see more rows # Añadir variable DF_name %&gt;% mutate(PPV_DECLARED_PCT = PPV_DECLARED/100) ## # A tibble: 103 × 10 ## ...1 ID Genero Edad Educacion FollowUP condition condi…¹ PPV_D…² PPV_D…³ ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 4 41904 1 47 8 80 PPV_Cond1 90LInt 99 0.99 ## 2 5 95041 2 21 6 90 PPV_Cond1 90RInt 99 0.99 ## 3 6 74594 2 29 6 10 PPV_Cond1 100LInt 99 0.99 ## 4 15 72903 2 27 7 75 PPV_Cond1 100RInt 1 0.01 ## 5 16 21260 1 29 5 35 PPV_Cond1 90LInt 24 0.24 ## 6 18 50315 2 28 6 14 PPV_Cond1 90RInt NA NA ## 7 19 21774 2 27 4 2 PPV_Cond1 100LInt 99 0.99 ## 8 20 20881 2 55 6 89 PPV_Cond1 100RInt 99 0.99 ## 9 21 39751 2 28 6 6 PPV_Cond1 90LInt 99 0.99 ## 10 22 99384 1 46 5 0 PPV_Cond1 90RInt 1 0.01 ## # … with 93 more rows, and abbreviated variable names ¹​condition2, ## # ²​PPV_DECLARED, ³​PPV_DECLARED_PCT ## # ℹ Use `print(n = ...)` to see more rows # Añadir variable destruyendo el resto del DF DF_name %&gt;% transmute(PPV_DECLARED_PCT = PPV_DECLARED/100) ## # A tibble: 103 × 1 ## PPV_DECLARED_PCT ## &lt;dbl&gt; ## 1 0.99 ## 2 0.99 ## 3 0.99 ## 4 0.01 ## 5 0.24 ## 6 NA ## 7 0.99 ## 8 0.99 ## 9 0.99 ## 10 0.01 ## # … with 93 more rows ## # ℹ Use `print(n = ...)` to see more rows # Limpiar nombres con el paquete {janitor} DF_name %&gt;% janitor::clean_names() ## # A tibble: 103 × 9 ## x1 id genero edad educacion follow_up condition condition2 ppv_decla…¹ ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 4 41904 1 47 8 80 PPV_Cond1 90LInt 99 ## 2 5 95041 2 21 6 90 PPV_Cond1 90RInt 99 ## 3 6 74594 2 29 6 10 PPV_Cond1 100LInt 99 ## 4 15 72903 2 27 7 75 PPV_Cond1 100RInt 1 ## 5 16 21260 1 29 5 35 PPV_Cond1 90LInt 24 ## 6 18 50315 2 28 6 14 PPV_Cond1 90RInt NA ## 7 19 21774 2 27 4 2 PPV_Cond1 100LInt 99 ## 8 20 20881 2 55 6 89 PPV_Cond1 100RInt 99 ## 9 21 39751 2 28 6 6 PPV_Cond1 90LInt 99 ## 10 22 99384 1 46 5 0 PPV_Cond1 90RInt 1 ## # … with 93 more rows, and abbreviated variable name ¹​ppv_declared ## # ℹ Use `print(n = ...)` to see more rows 3.2.2.5 Resúmenes agrupados La combinación de verbos group_by() y summarise() es una de las más usadas. Con esta podemos calcular promedios, medianas, etc. por condición de manera sencilla. # Resumen DF_name %&gt;% summarise(Promedio_PPV = mean(PPV_DECLARED), N = n()) ## # A tibble: 1 × 2 ## Promedio_PPV N ## &lt;dbl&gt; &lt;int&gt; ## 1 NA 103 # Resumen agrupado DF_name %&gt;% group_by(Genero) %&gt;% summarise(Promedio_PPV = mean(PPV_DECLARED), N = n()) ## # A tibble: 2 × 3 ## Genero Promedio_PPV N ## &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 1 NA 40 ## 2 2 NA 63 # Resumen agrupando por multiples variables, y calculando varias cosas DF_name %&gt;% group_by(Genero, condition) %&gt;% summarise(promedio_PPV = mean(PPV_DECLARED), mediana_PPV = median(PPV_DECLARED), SD = sd(PPV_DECLARED), N = n()) ## # A tibble: 8 × 6 ## # Groups: Genero [2] ## Genero condition promedio_PPV mediana_PPV SD N ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 1 PPV_Cond1 63.8 88 43.1 9 ## 2 1 PPV_Cond2 NA NA NA 13 ## 3 1 PPV_Cond3 75.6 80 32.5 5 ## 4 1 PPV_Cond4 NA NA NA 13 ## 5 2 PPV_Cond1 NA NA NA 19 ## 6 2 PPV_Cond2 49.4 46 16.3 8 ## 7 2 PPV_Cond3 69.2 98.5 38.9 16 ## 8 2 PPV_Cond4 74.7 90 27.3 20 Ejercicios - verbos dplyr Usando la base df_wide, haz las siguientes cosas, una a una: Importa los datos (ver código abajo) Filtra el DF para quedarnos solo con edades entre 18 y 50 años Ordena los datos por genero y edad, esta última decreciente Selecciona las columnas para quedarnos solo con ID, variables demograficas, y respuestas crudas (raw) Crea una nueva variable que sea niv_edu_porc, en la que calcules cual es el porcentaje de nivel educativo al que han llegado relativo al máximo de la base de datos (nivel educativo persona / nivel educativo maximo; en porcentaje) Ahora combina el resultado de todas las operaciones anteriores en un DF Calcula el promedio y desviación típica de edad para cada género df_wide = read_csv(&quot;https://raw.githubusercontent.com/gorkang/cognitive-and-socio-affective-predictors-of-social-adaptation/master/data-raw/sa-raw-anonymised.csv&quot;) 3.3 Verbos avanzados y otras criaturas indómitas 3.3.1 Wide to long simple Empecemos con un ejemplo muy sencillo. 3 participantes, 2 items. # Creamos un DF df_simple_wide = tibble( ID = c(&quot;Participante1&quot;, &quot;Participante2&quot;, &quot;Participante3&quot;, &quot;Participante4&quot;), condition = c(&quot;calor&quot;, &quot;calor&quot;, &quot;frio&quot;, &quot;frio&quot;), Item1 = c(22, 33, 44, 55), Item2 = c(88, 99, 77, 66) ) df_simple_wide ## # A tibble: 4 × 4 ## ID condition Item1 Item2 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Participante1 calor 22 88 ## 2 Participante2 calor 33 99 ## 3 Participante3 frio 44 77 ## 4 Participante4 frio 55 66 # Wide to long df_simple_long = df_simple_wide %&gt;% pivot_longer(Item1:Item2, names_to = &quot;Item&quot;, values_to = &quot;Response&quot;) df_simple_long ## # A tibble: 8 × 4 ## ID condition Item Response ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Participante1 calor Item1 22 ## 2 Participante1 calor Item2 88 ## 3 Participante2 calor Item1 33 ## 4 Participante2 calor Item2 99 ## 5 Participante3 frio Item1 44 ## 6 Participante3 frio Item2 77 ## 7 Participante4 frio Item1 55 ## 8 Participante4 frio Item2 66 3.3.2 Long to wide simple Retomamos el ejemplo simple de antes: # Long to wide simple df_simple_long %&gt;% pivot_wider(names_from = Item, values_from = Response) ## # A tibble: 4 × 4 ## ID condition Item1 Item2 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Participante1 calor 22 88 ## 2 Participante2 calor 33 99 ## 3 Participante3 frio 44 77 ## 4 Participante4 frio 55 66 3.3.2.1 ¿Para que sirve tener los datos en formato long? Hay algunos análisis para los que necesitamos formato long (anovas, modelos mixtos…), y varias cosas que se simplifican cuando los datos estan en formato largo. Por ejemplo, si queremos usar resúmenes agrupados para obtener la media, mediana, desviación estandard… por ítem, con el formato WIDE necesitaremos 3 lineas de código para cada ítem que tenga nuestra base (imagina con 100 items…). Con el formato long, el código de abajo es suficiente. # En formato wide podriamos usar cosas como: # skimr::skim(df_simple_wide) # Añadir para cada item 3 líneas df_simple_wide %&gt;% summarise(mean_Item1 = mean(Item1), mean_Item2 = mean(Item2), # ... median_Item1 = median(Item1), median_Item2 = median(Item2), # ... sd_Item1 = sd(Item1), sd_Item2 = sd(Item2), # ... N = n() # NO aparece N por item ) ## # A tibble: 1 × 7 ## mean_Item1 mean_Item2 median_Item1 median_Item2 sd_Item1 sd_Item2 N ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 38.5 82.5 38.5 82.5 14.2 14.2 4 # Sirve para 1 item o para 10 millones de items df_simple_long %&gt;% group_by(Item) %&gt;% summarise(MEAN = mean(Response), MEDIAN = median(Response), SD = sd(Response), N = n()) ## # A tibble: 2 × 5 ## Item MEAN MEDIAN SD N ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 Item1 38.5 38.5 14.2 4 ## 2 Item2 82.5 82.5 14.2 4 # Análisis modelos mixtos model = lme4::lmer(Response ~ condition + (1|ID), df_simple_long) sjPlot::tab_model(model)   Response Predictors Estimates CI p (Intercept) 60.50 20.10 – 100.90 0.014 condition [frio] 0.00 -57.14 – 57.14 1.000 Random Effects σ2 847.00 τ00 ID 0.00 N ID 4 Observations 8 Marginal R2 / Conditional R2 0.000 / NA 3.3.3 Wide to long complex Ahora pasemos a un ejemplo mas complejo. Tenemos las puntuaciones a los 11 items de la lipkus numeracy scale de 232 participantes, ademas de datos demográficos. # Leemos documento en formato WIDE df_wide = read_csv(&quot;https://raw.githubusercontent.com/gorkang/cognitive-and-socio-affective-predictors-of-social-adaptation/master/data-raw/sa-raw-anonymised.csv&quot;) %&gt;% # Seleccionamos solo algunas de las filas select(ID, dem_genero, dem_edad, dem_nivedu, matches(&quot;lkns_[0-9]{2}_raw&quot;)) DT::datatable(df_wide) # Wide to long df_long = df_wide %&gt;% pivot_longer(cols = lkns_01_raw:lkns_11_raw, names_to = &quot;Item&quot;, values_to = &quot;Response&quot;, values_transform = list(Response = as.character)) # Podemos usar select_helpers! # Reemplaza lkns_01_raw:lkns_11_raw por matches(&quot;lkns&quot;) DT::datatable(df_long) 3.3.4 Long to wide complex Nos sirve el mismo código que con el ejemplo más simple: # Long to wide df_long %&gt;% pivot_wider(names_from = Item, values_from = Response) ## # A tibble: 232 × 15 ## ID dem_g…¹ dem_e…² dem_n…³ lkns_…⁴ lkns_…⁵ lkns_…⁶ lkns_…⁷ lkns_…⁸ lkns_…⁹ ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 1 38 4 500 10 10 b) 1 d… b)10% 2 ## 2 2 0 67 2 0 0 0 c) 1 d… c) 5% 0 ## 3 3 0 24 4 700 100 0.1 a) 1 d… b)10% 2 ## 4 4 0 30 4 500 30 1 c) 1 d… b)10% 2 ## 5 5 0 38 3 6 2 3 a) 1 d… b)10% 2 ## 6 6 0 45 4 40 200 2 c) 1 d… b)10% 2 ## 7 7 1 58 3 0 0 0 c) 1 d… b)10% 0 ## 8 8 1 47 4 500 100 0.1 c) 1 d… b)10% 2 ## 9 9 1 52 3 600 1 1 c) 1 d… c) 5% 3 ## 10 10 1 49 4 600 500 70 b) 1 d… b)10% 2 ## # … with 222 more rows, 5 more variables: lkns_07_raw &lt;chr&gt;, lkns_08_raw &lt;chr&gt;, ## # lkns_09_raw &lt;chr&gt;, lkns_10_raw &lt;chr&gt;, lkns_11_raw &lt;chr&gt;, and abbreviated ## # variable names ¹​dem_genero, ²​dem_edad, ³​dem_nivedu, ⁴​lkns_01_raw, ## # ⁵​lkns_02_raw, ⁶​lkns_03_raw, ⁷​lkns_04_raw, ⁸​lkns_05_raw, ⁹​lkns_06_raw ## # ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names Ejercicios - wide to long Trabajaremos con los datos procesados del paper Cognitive and Socio-affective Predictors of Social Adaptation, de Neely et al. Estos se pueden encontrar en un repositorio público de la OSF. Empezaremos con la base final en formato wide (Dentro de https://osf.io/egxy5/, ver archivo: /outputs/data/sa-prepared.csv). Cambia el orden de las variables para que ID sea la primera columna. Transforma la base a formato long (eso sí, mantén las variables demográficas en formato wide). Aprovechando que tenemos la base en formato long, sabrías hacer una gráfica con un histograma o densidad para cada una de las variables no deográficas? Pista: Tendras que usar la función select() y el select helper everything() para el primer paso. Para el segundo paso, pivot_longer(primera_variable:ultima_variable) Para el tercer paso, facet_wrap(~name, scales = \"free\") te ayudara a crear paneles para cada nombre, donde las escalas x/y pueden variar libremente. Importamos datos, y limpiamos nombres de variables: DF_wide = read_csv(&quot;https://raw.githubusercontent.com/gorkang/cognitive-and-socio-affective-predictors-of-social-adaptation/master/outputs/data/sa-prepared.csv&quot;) %&gt;% janitor::clean_names() 3.4 Separate, omit, ifelse, case_when, tipos de variables… Para transformaciones algo más complejas, pero muy habituales, usaremos algunos verbos del paquete {tidyr}, y variaciones con {dplyr} # Base original DF_name = read_csv(here::here(&quot;data/files/02-read-csv.csv&quot;)) %&gt;% select(-...1, -Educacion, -Edad, -condition2) DT::datatable(DF_name) Podemos separar la columna de condicion usando un separador. La separación puede ser en columnas o en filas: # Separate DF_separated = DF_name %&gt;% separate(condition, c(&quot;primer_chunk&quot;, &quot;segundo_chunk&quot;), sep = &quot;_&quot;) DF_separated ## # A tibble: 103 × 6 ## ID Genero FollowUP primer_chunk segundo_chunk PPV_DECLARED ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 41904 1 80 PPV Cond1 99 ## 2 95041 2 90 PPV Cond1 99 ## 3 74594 2 10 PPV Cond1 99 ## 4 72903 2 75 PPV Cond1 1 ## 5 21260 1 35 PPV Cond1 24 ## 6 50315 2 14 PPV Cond1 NA ## 7 21774 2 2 PPV Cond1 99 ## 8 20881 2 89 PPV Cond1 99 ## 9 39751 2 6 PPV Cond1 99 ## 10 99384 1 0 PPV Cond1 1 ## # … with 93 more rows ## # ℹ Use `print(n = ...)` to see more rows # Separate in rows DF_name %&gt;% separate_rows(condition, sep = &quot;_&quot;) ## # A tibble: 206 × 5 ## ID Genero FollowUP condition PPV_DECLARED ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 41904 1 80 PPV 99 ## 2 41904 1 80 Cond1 99 ## 3 95041 2 90 PPV 99 ## 4 95041 2 90 Cond1 99 ## 5 74594 2 10 PPV 99 ## 6 74594 2 10 Cond1 99 ## 7 72903 2 75 PPV 1 ## 8 72903 2 75 Cond1 1 ## 9 21260 1 35 PPV 24 ## 10 21260 1 35 Cond1 24 ## # … with 196 more rows ## # ℹ Use `print(n = ...)` to see more rows Con unite() podemos hacer lo contrario, unir columnas con un separador definido: # Unite: inversa de separate DF_separated %&gt;% unite(condition, c(primer_chunk, segundo_chunk), sep = &quot;_&quot;) ## # A tibble: 103 × 5 ## ID Genero FollowUP condition PPV_DECLARED ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 41904 1 80 PPV_Cond1 99 ## 2 95041 2 90 PPV_Cond1 99 ## 3 74594 2 10 PPV_Cond1 99 ## 4 72903 2 75 PPV_Cond1 1 ## 5 21260 1 35 PPV_Cond1 24 ## 6 50315 2 14 PPV_Cond1 NA ## 7 21774 2 2 PPV_Cond1 99 ## 8 20881 2 89 PPV_Cond1 99 ## 9 39751 2 6 PPV_Cond1 99 ## 10 99384 1 0 PPV_Cond1 1 ## # … with 93 more rows ## # ℹ Use `print(n = ...)` to see more rows Si necesitamos recodificar variables, cambiar valores condicionalmente,… podemos usar ifelse(), case_when() o recode(): # If else DF_name %&gt;% mutate(Genero = ifelse(Genero == 1, &quot;Hombre&quot;, &quot;Mujer&quot;)) ## # A tibble: 103 × 5 ## ID Genero FollowUP condition PPV_DECLARED ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 41904 Hombre 80 PPV_Cond1 99 ## 2 95041 Mujer 90 PPV_Cond1 99 ## 3 74594 Mujer 10 PPV_Cond1 99 ## 4 72903 Mujer 75 PPV_Cond1 1 ## 5 21260 Hombre 35 PPV_Cond1 24 ## 6 50315 Mujer 14 PPV_Cond1 NA ## 7 21774 Mujer 2 PPV_Cond1 99 ## 8 20881 Mujer 89 PPV_Cond1 99 ## 9 39751 Mujer 6 PPV_Cond1 99 ## 10 99384 Hombre 0 PPV_Cond1 1 ## # … with 93 more rows ## # ℹ Use `print(n = ...)` to see more rows # Case when ## las condiciones lógicas pueden ser arbitrariamente complejas DF_name %&gt;% mutate(Genero = case_when( Genero == 1 ~ &quot;Hombre&quot;, Genero == 2 ~ &quot;Mujer&quot;, Genero == 3 ~ &quot;No binario&quot;, TRUE ~ NA_character_) ) ## # A tibble: 103 × 5 ## ID Genero FollowUP condition PPV_DECLARED ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 41904 Hombre 80 PPV_Cond1 99 ## 2 95041 Mujer 90 PPV_Cond1 99 ## 3 74594 Mujer 10 PPV_Cond1 99 ## 4 72903 Mujer 75 PPV_Cond1 1 ## 5 21260 Hombre 35 PPV_Cond1 24 ## 6 50315 Mujer 14 PPV_Cond1 NA ## 7 21774 Mujer 2 PPV_Cond1 99 ## 8 20881 Mujer 89 PPV_Cond1 99 ## 9 39751 Mujer 6 PPV_Cond1 99 ## 10 99384 Hombre 0 PPV_Cond1 1 ## # … with 93 more rows ## # ℹ Use `print(n = ...)` to see more rows # Función recode DF_name %&gt;% # De número a texto mutate(Genero = recode( Genero, `1` = &quot;Hombre&quot;, `2` = &quot;Mujer&quot;, .default = &quot;No definido&quot; )) %&gt;% # De texto a número mutate(Genero2 = recode( Genero, &quot;Hombre&quot; = 1, &quot;Mujer&quot; = 2, .default = 999 )) ## # A tibble: 103 × 6 ## ID Genero FollowUP condition PPV_DECLARED Genero2 ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 41904 Hombre 80 PPV_Cond1 99 1 ## 2 95041 Mujer 90 PPV_Cond1 99 2 ## 3 74594 Mujer 10 PPV_Cond1 99 2 ## 4 72903 Mujer 75 PPV_Cond1 1 2 ## 5 21260 Hombre 35 PPV_Cond1 24 1 ## 6 50315 Mujer 14 PPV_Cond1 NA 2 ## 7 21774 Mujer 2 PPV_Cond1 99 2 ## 8 20881 Mujer 89 PPV_Cond1 99 2 ## 9 39751 Mujer 6 PPV_Cond1 99 2 ## 10 99384 Hombre 0 PPV_Cond1 1 1 ## # … with 93 more rows ## # ℹ Use `print(n = ...)` to see more rows Otras funciones útiles, extraer los valores de una columna con pull() o descartar los NA de una columna con drop_na(): # Pull DF_name %&gt;% pull(PPV_DECLARED) ## [1] 99 99 99 1 24 NA 99 99 99 1 94 99 88 0 1 99 99 99 70 99 1 99 99 7 10 ## [26] 99 99 99 46 45 46 40 NA 46 46 73 46 50 46 45 46 87 46 49 30 46 50 70 44 80 ## [51] 99 99 99 99 80 51 99 20 30 1 20 5 30 99 99 99 99 80 98 99 80 59 64 16 79 ## [76] 92 92 80 90 60 93 92 28 92 92 77 74 90 10 92 92 92 65 20 92 92 92 92 90 92 ## [101] NA 92 80 # Promedio de una columna (con pipes) DF_name %&gt;% pull(PPV_DECLARED) %&gt;% mean(.) ## [1] NA # Eliminando los NA&#39;s! DF_name %&gt;% pull(PPV_DECLARED) %&gt;% mean(., na.rm = TRUE) ## [1] 68.06 # Más sencillo, en base R (no siempre son necesarias las pipes) mean(DF_name$PPV_DECLARED, na.rm = TRUE) ## [1] 68.06 # Drop NAs DF_name %&gt;% drop_na(PPV_DECLARED) ## # A tibble: 100 × 5 ## ID Genero FollowUP condition PPV_DECLARED ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 41904 1 80 PPV_Cond1 99 ## 2 95041 2 90 PPV_Cond1 99 ## 3 74594 2 10 PPV_Cond1 99 ## 4 72903 2 75 PPV_Cond1 1 ## 5 21260 1 35 PPV_Cond1 24 ## 6 21774 2 2 PPV_Cond1 99 ## 7 20881 2 89 PPV_Cond1 99 ## 8 39751 2 6 PPV_Cond1 99 ## 9 99384 1 0 PPV_Cond1 1 ## 10 81868 1 50 PPV_Cond1 94 ## # … with 90 more rows ## # ℹ Use `print(n = ...)` to see more rows Ejercicios - verbos avanzados dplyr Importa los datos y limpia los nombres de columna: Para limpiar nombres de columnas automáticamente: clean_names() # Leemos los datos y usamos janitor::clean_names() para limpiar los nombres de las columnas DF_wide = read_csv(&quot;https://raw.githubusercontent.com/gorkang/cognitive-and-socio-affective-predictors-of-social-adaptation/master/outputs/data/sa-prepared.csv&quot;) En un nuevo DF (DF_split), crea una variable llamada social_adaptation_split con la median split para la variable social_adaptation. La mitad superior se llamará high_social_adaptation y la mitad inferior low_social_adaptation. Suele ser más facil si dividimos la tarea en varios pasos 1. Calculamos mediana2. Usamos case_when() Asegúrate que no hay valores NA. Pista: La función drop_na() . El resultado final debería ser: 3.5 Regular expressions Las expresiones regulares son una herramienta tan potente como dificil de utilizar. Eso si, podemos hacer algunas cosas básicas muy útiles, sin demasiado esfuerzo. Hay cheatsheets (Basic Regular Expressions Cheatsheet) y libros (introduction to Regular Expressions) que nos pueden ayudar a familiarizarnos con ellas. SOURCE: https://xkcd.com/208/ Imaginad que tenemos que trabajar con la columna condition2, donde están codificadas 3 variables importantes: DF_regexp = read_csv(here::here(&quot;data/files/02-read-csv.csv&quot;)) %&gt;% select(-...1, -Educacion, -Edad, -condition) DF_regexp ## # A tibble: 103 × 5 ## ID Genero FollowUP condition2 PPV_DECLARED ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 41904 1 80 90LInt 99 ## 2 95041 2 90 90RInt 99 ## 3 74594 2 10 100LInt 99 ## 4 72903 2 75 100RInt 1 ## 5 21260 1 35 90LInt 24 ## 6 50315 2 14 90RInt NA ## 7 21774 2 2 100LInt 99 ## 8 20881 2 89 100RInt 99 ## 9 39751 2 6 90LInt 99 ## 10 99384 1 0 90RInt 1 ## # … with 93 more rows ## # ℹ Use `print(n = ...)` to see more rows Cuando no tenemos separadores explícitos como vimos antes con separate(), podemos usar mutate() junto a gsub() y expresiones regulares para extraer, una a una, las condiciones. La función gsub() nos sirve para eliminar partes de una cadena de texto, para extraer un número, etc.: DF_regexp %&gt;% mutate(cond_NM = gsub(&quot;([0-9]{2,3}).*&quot;, &quot;\\\\1&quot;, condition2), cond_LR = gsub(&quot;[0-9]{2,3}([LR]).*&quot;, &quot;\\\\1&quot;, condition2), cond_IA = gsub(&quot;[0-9]{2,3}[LR](.*)&quot;, &quot;\\\\1&quot;, condition2)) ## # A tibble: 103 × 8 ## ID Genero FollowUP condition2 PPV_DECLARED cond_NM cond_LR cond_IA ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 41904 1 80 90LInt 99 90 L Int ## 2 95041 2 90 90RInt 99 90 R Int ## 3 74594 2 10 100LInt 99 100 L Int ## 4 72903 2 75 100RInt 1 100 R Int ## 5 21260 1 35 90LInt 24 90 L Int ## 6 50315 2 14 90RInt NA 90 R Int ## 7 21774 2 2 100LInt 99 100 L Int ## 8 20881 2 89 100RInt 99 100 R Int ## 9 39751 2 6 90LInt 99 90 L Int ## 10 99384 1 0 90RInt 1 90 R Int ## # … with 93 more rows ## # ℹ Use `print(n = ...)` to see more rows Extraemos la misma información, de una manera ligeramente distinta, siendo mucho más explícitos sobre la estructura esperada de la columna condition2: DF_regexp %&gt;% mutate(cond_NM = gsub(&quot;^([0-9]{2,3})([LR])(.*)$&quot;, &quot;\\\\1&quot;, condition2), cond_LR = gsub(&quot;^([0-9]{2,3})([LR])(.*)$&quot;, &quot;\\\\2&quot;, condition2), cond_IA = gsub(&quot;^([0-9]{2,3})([LR])(.*)$&quot;, &quot;\\\\3&quot;, condition2)) ## # A tibble: 103 × 8 ## ID Genero FollowUP condition2 PPV_DECLARED cond_NM cond_LR cond_IA ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 41904 1 80 90LInt 99 90 L Int ## 2 95041 2 90 90RInt 99 90 R Int ## 3 74594 2 10 100LInt 99 100 L Int ## 4 72903 2 75 100RInt 1 100 R Int ## 5 21260 1 35 90LInt 24 90 L Int ## 6 50315 2 14 90RInt NA 90 R Int ## 7 21774 2 2 100LInt 99 100 L Int ## 8 20881 2 89 100RInt 99 100 R Int ## 9 39751 2 6 90LInt 99 90 L Int ## 10 99384 1 0 90RInt 1 90 R Int ## # … with 93 more rows ## # ℹ Use `print(n = ...)` to see more rows Con select() y matches() seleccionamos columnas usando la siguiente regular expression lkns_[0-9]{2}_raw: lkns_ contiene esta cadena de texto [0-9]{2} a continuación, contiene cualquier dígito del 0 al 9, dos veces. _rawa continuación, contiene esta cadena de texto read_csv(&quot;https://raw.githubusercontent.com/gorkang/cognitive-and-socio-affective-predictors-of-social-adaptation/master/data-raw/sa-raw-anonymised.csv&quot;) %&gt;% # Seleccionamos solo algunas de las filas select(ID, dem_genero, dem_edad, dem_nivedu, matches(&quot;lkns_[0-9]{2}_raw&quot;)) ## # A tibble: 232 × 15 ## ID dem_g…¹ dem_e…² dem_n…³ lkns_…⁴ lkns_…⁵ lkns_…⁶ lkns_…⁷ lkns_…⁸ lkns_…⁹ ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 1 38 4 500 10 10 b) 1 d… b)10% 2 ## 2 2 0 67 2 0 0 0 c) 1 d… c) 5% 0 ## 3 3 0 24 4 700 100 0.1 a) 1 d… b)10% 2 ## 4 4 0 30 4 500 30 1 c) 1 d… b)10% 2 ## 5 5 0 38 3 6 2 3 a) 1 d… b)10% 2 ## 6 6 0 45 4 40 200 2 c) 1 d… b)10% 2 ## 7 7 1 58 3 0 0 0 c) 1 d… b)10% 0 ## 8 8 1 47 4 500 100 0.1 c) 1 d… b)10% 2 ## 9 9 1 52 3 600 1 1 c) 1 d… c) 5% 3 ## 10 10 1 49 4 600 500 70 b) 1 d… b)10% 2 ## # … with 222 more rows, 5 more variables: lkns_07_raw &lt;chr&gt;, lkns_08_raw &lt;dbl&gt;, ## # lkns_09_raw &lt;dbl&gt;, lkns_10_raw &lt;dbl&gt;, lkns_11_raw &lt;dbl&gt;, and abbreviated ## # variable names ¹​dem_genero, ²​dem_edad, ³​dem_nivedu, ⁴​lkns_01_raw, ## # ⁵​lkns_02_raw, ⁶​lkns_03_raw, ⁷​lkns_04_raw, ⁸​lkns_05_raw, ⁹​lkns_06_raw ## # ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names 3.5.1 Ayuda con regular expressions Es muy fácil cometer errores cuando usamos expresiones regulares. Algunas recomendaciones: Solo usar expresiones regulares cuando sea necesario Usar expresiones regulares lo más explícitas y definidas posible Verificar que estan funcionando bien! SOURCE: https://xkcd.com/1171/ Hay una aplicación Shiny muy útil que nos ayudará a construir Regular Expressions: regexplain::regexplain_gadget() Ejercicios - Calcular puntajes de escalas usando regular expressions Ahora volvemos a usar con los datos brutos (sa-raw-anonymised.csv) del paper Cognitive and Socio-affective Predictors of Social Adaptation, de Neely et al.  En estos datos tenemos las puntuaciones crudas (e.g. WMAT_01_raw) y ya codificadas/corregidas (WMAT_01_cod) para los ítems de varias escalas Para preparar los datos de cara al análisis final, necesitamos calcular el puntaje para cada participante y escala. Empezaremos con la prueba de Matrices de WAIS (WMAT_). Calcula el puntaje para cada participante en la prueba de Matrices de WAIS (ítems WMAT_[NUMEROS]_cod) Hay al menos dos estrategias posibles: Selecciona las columnas relevantes y haz la suma de columnas Convierte a long, filtra para quedarte con las filas correspondientes a la prueba relevante, y haz una suma agrupada Pista para seleccionar o filtrar columnas: Recuerda que usamos select() para seleccionar columnas, o filter() para filtrar. Pista para seleccionar columnas: Podemos usar matches(\"WMAT_[0-9]{2}_cod\") para seleccionar o filtrar todas las columnas o ítems que contienen: WMAT_, 2 numeros del 0 al 9, y acaban en _cod. Pista para suma de columnas: rowSums() es la función que podemos usar, pero su sintaxis es algo complicada. Pista para suma agrupada: Usamos group_by() %&gt;% summarise() poniendo parámetros dentro de cada función. Importar datos: df_wide_raw = read_csv(&quot;https://raw.githubusercontent.com/gorkang/cognitive-and-socio-affective-predictors-of-social-adaptation/master/data-raw/sa-raw-anonymised.csv&quot;) Bibliografía Cheatsheets RStudio Cheatsheet dplyr Tidyexplain "],["combinar-datos.html", "Capítulo 4 Combinar datos 4.1 Bind rows or columns 4.2 Joins Ejercicios JOINS 4.3 Datasets interesantes Bibliografía", " Capítulo 4 Combinar datos Combinar distintos data frames es una tarea muy común cuando preparamos datos. En ocasiones trabajaremos con distintos archivos que tendremos que combinar, y otras veces, separararemos nuestra base original en distintos data frames, para realizar procesamientos diferenciados, y más adelante volver a combinar los data frames en una base final. Paquetes para este capítulo if (!require(&#39;dplyr&#39;)) install.packages(&#39;dplyr&#39;); library(&#39;dplyr&#39;) if (!require(&quot;DT&quot;)) install.packages(&quot;DT&quot;); library(&quot;DT&quot;) if (!require(&quot;ggplot2&quot;)) install.packages(&quot;ggplot2&quot;); library(&quot;ggplot2&quot;) if (!require(&quot;here&quot;)) install.packages(&quot;here&quot;); library(&quot;here&quot;) if (!require(&quot;janitor&quot;)) install.packages(&quot;janitor&quot;); library(&quot;janitor&quot;) if (!require(&quot;purrr&quot;)) install.packages(&quot;purrr&quot;); library(&quot;purrr&quot;) if (!require(&#39;readr&#39;)) install.packages(&#39;readr&#39;); library(&#39;readr&#39;) if (!require(&quot;readxl&quot;)) install.packages(&quot;readxl&quot;); library(&quot;readxl&quot;) if (!require(&quot;tidyr&quot;)) install.packages(&quot;tidyr&quot;); library(&quot;tidyr&quot;) if (!require(&quot;waldo&quot;)) install.packages(&quot;waldo&quot;); library(&quot;waldo&quot;) 4.1 Bind rows or columns El método más sencillo. Simplemente unimos las filas o columnas de los data-frames. # Importar CSVs DF1 = read_csv(here::here(&quot;data/files/02-CSVs/01.csv&quot;)) DF2 = read_csv(here::here(&quot;data/files/02-CSVs/02.csv&quot;)) # Bind DFs añadiendo las *filas* de DF2 a DF1 DF1 %&gt;% bind_rows(DF2) ## # A tibble: 800 × 9 ## Sex Priming trialN Block Adjective Valence Answer Arrow rT ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 male Collective 1 we ofensivo negative yes left 623 ## 2 male Collective 2 we resentido negative no right 1235 ## 3 male Collective 3 we ego�sta negative yes left 335 ## 4 male Collective 4 we indiscreto negative yes left 355 ## 5 male Collective 5 we sumiso negative yes left 618 ## 6 male Collective 6 we agradable positive yes left 328 ## 7 male Collective 7 we clasista negative yes left 348 ## 8 male Collective 8 we altruista positive yes left 1620 ## 9 male Collective 9 we ansioso negative yes left 346 ## 10 male Collective 10 we presumido negative yes left 778 ## # … with 790 more rows ## # ℹ Use `print(n = ...)` to see more rows # Bind DFs añadiendo las *columnas* de DF2 a DF1 ## bind_cols renombra automaticamente los nombres de las columnas para que no haya coincidencias DF1 %&gt;% bind_cols(DF2) ## # A tibble: 400 × 18 ## Sex...1 Priming...2 trialN...3 Block…¹ Adjec…² Valen…³ Answe…⁴ Arrow…⁵ rT...9 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 male Collective 1 we ofensi… negati… yes left 623 ## 2 male Collective 2 we resent… negati… no right 1235 ## 3 male Collective 3 we ego�sta negati… yes left 335 ## 4 male Collective 4 we indisc… negati… yes left 355 ## 5 male Collective 5 we sumiso negati… yes left 618 ## 6 male Collective 6 we agrada… positi… yes left 328 ## 7 male Collective 7 we clasis… negati… yes left 348 ## 8 male Collective 8 we altrui… positi… yes left 1620 ## 9 male Collective 9 we ansioso negati… yes left 346 ## 10 male Collective 10 we presum… negati… yes left 778 ## # … with 390 more rows, 9 more variables: Sex...10 &lt;chr&gt;, Priming...11 &lt;chr&gt;, ## # trialN...12 &lt;dbl&gt;, Block...13 &lt;chr&gt;, Adjective...14 &lt;chr&gt;, ## # Valence...15 &lt;chr&gt;, Answer...16 &lt;chr&gt;, Arrow...17 &lt;chr&gt;, rT...18 &lt;dbl&gt;, and ## # abbreviated variable names ¹​Block...4, ²​Adjective...5, ³​Valence...6, ## # ⁴​Answer...7, ⁵​Arrow...8 ## # ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names 4.2 Joins El paquete {dplyr} tiene funciones que permiten trabajar combinando, filtrando, etc. distintos dataframes. Podéis ver más detalle y algunas ilustraciones fantásticas (como la de abajo; inner_join()) en el capítulo relational data de r4ds. SOURCE: https://r4ds.had.co.nz/relational-data.html#mutating-joins En https://github.com/gadenbuie/tidyexplain se pueden ver animaciones mostrando estas operaciones. Tipos de Join Estas operaciones tendrán la forma: DF_x %&gt;% WHATEVER_join(DF_y) Mutating joins: inner_join(): preserva pares de observaciones de DF_x y de DF_y con claves iguales left_join(): preserva las observaciones de DF_x, añadiendo las de DF_y con claves iguales right_join(): preserva las observaciones de DF_y, añadiendo las de DF_x con claves iguales full_join(): preserva todas las observaciones de DF_x y DF_y, alineándolas cuando tengan claves iguales Filtering joins: semi_join(): preserva solo aquellas observaciones de DF_x cuyas claves aparezcan en DF_y anti_join(): preserva solo aquellas observaciones de DF_x cuyas claves NO aparezcan en DF_y Nesting joins: nest_join(): preserva las observaciones de DF_x, añadiendo las de DF_y con claves iguales 4.2.1 Mutating joins Importamos datos Tenemos los siguientes dataframes: DF_IDs: Variables demográficas de participantes DF_results: Resultados en variables de interés de participantes DF_BAD: Grupo de participantes “selectos” # Importar CSVs para los joins DF_IDs = read_csv(here::here(&quot;data/files/02-join-IDs.csv&quot;)) DF_results = read_csv(here::here(&quot;data/files/02-join-results.csv&quot;)) DF_BAD = read_csv(here::here(&quot;data/files/02-join-BAD.csv&quot;)) 4.2.1.1 Inner join Preserva pares de observaciones de DF_x y de DF_y con claves iguales (fijaros en el mensaje que aparece en la Consola: Joining, by = \"ID\"). SOURCE: https://github.com/gadenbuie/tidyexplain DF_inner_joined = DF_IDs %&gt;% inner_join(DF_results) #nrow(DF_inner_joined) DT::datatable(DF_inner_joined) 4.2.1.2 Left join Preserva las observaciones de DF_x, añadiendo las de DF_y con claves iguales (columnas con el mismo nombre). SOURCE: https://github.com/gadenbuie/tidyexplain DF_left_joined = DF_IDs %&gt;% left_join(DF_results) # Vemos el número de filas de cada dataframe # nrow(DF_left_joined) # map(list(&quot;DF_left_joined&quot; = DF_left_joined, &quot;DF_IDs&quot; = DF_IDs, &quot;DF_results&quot; = DF_results), nrow) DT::datatable(DF_left_joined) Si no tenemos columnas con el mismo nombre en ambos dataframes, tenemos que indicarle a la función a partir de que dos columnas queremos unir los dataframes. Por ejemplo, con by = c(\"ID\" = \"Identificador\") le decimos que la columna ID el primer dataframe corresponde a Identificador del segundo dataframe. # Renombramos el identificador para que no coincidan DF_results2 = DF_results |&gt; rename(Identificador = ID) # Si no hay variables en común, nos da un error: # DF_left_joined = DF_IDs %&gt;% # left_join(DF_results2) # Error in `left_join()`: # ! `by` must be supplied when `x` and `y` have no common variables. # ℹ use by = character()` to perform a cross-join. # Tenemos que indicar explicitamente que identificador del primer dataframe (DF_IDs) # coincide con que identificador del segundo dataframe (DF_results2) DF_left_joined = DF_IDs %&gt;% left_join(DF_results2, by = c(&quot;ID&quot; = &quot;Identificador&quot;)) 4.2.1.3 Full join Preserva todas las observaciones de DF_x y DF_y, alineándolas cuando tengan claves iguales. SOURCE: https://github.com/gadenbuie/tidyexplain DF_full_joined = DF_IDs %&gt;% full_join(DF_results) # CHECK # map(list(&quot;DF_full_joined&quot; = DF_full_joined, &quot;DF_IDs&quot; = DF_IDs, &quot;DF_results&quot; = DF_results), nrow) DT::datatable(DF_full_joined) 4.2.2 Filtering joins 4.2.2.1 Anti join Preserva solo aquellas observaciones de DF_x cuyas claves NO aparezcan en DF_y. SOURCE: https://github.com/gadenbuie/tidyexplain # AVOID the people present in DF_BAD DF_anti_joined = DF_IDs %&gt;% anti_join(DF_BAD, by = &quot;ID&quot;) %&gt;% left_join(DF_results) # CHECK # map(list(&quot;DF_anti_joined&quot; = DF_anti_joined, &quot;DF_IDs&quot; = DF_IDs, &quot;DF_BAD&quot; = DF_BAD, &quot;DF_results&quot; = DF_results), nrow) DT::datatable(DF_anti_joined) 4.2.2.2 Semi join Preserva solo aquellas observaciones de DF_x cuyas claves aparezcan en DF_y. La diferencia con inner_join() es que NO se preservan las observaciones de DF_y. SOURCE: https://github.com/gadenbuie/tidyexplain # INCLUDE ONLY the people present in DF_BAD DF_semi_joined = DF_IDs %&gt;% semi_join(DF_BAD, by = &quot;ID&quot;) %&gt;% left_join(DF_results) # CHECK # map(list(&quot;DF_semi_joined&quot; = DF_semi_joined, &quot;DF_IDs&quot; = DF_IDs, &quot;DF_BAD&quot; = DF_BAD, &quot;DF_results&quot; = DF_results), nrow) DT::datatable(DF_semi_joined) 4.2.3 Nesting joins DF_nest_joined = DF_IDs %&gt;% nest_join(DF_results, by = &quot;ID&quot;) DT::datatable(DF_nest_joined) Ejercicios JOINS Con los DFs de abajo, haz las siguientes operaciones: DF_IDs = read_csv(here::here(&quot;data/files/02-join-IDs2.csv&quot;)) DF_results = read_csv(here::here(&quot;data/files/02-join-results.csv&quot;)) DF_BAD = read_csv(here::here(&quot;data/files/02-join-BAD.csv&quot;)) Une los datos demográficos con los resultados. Pista para unir bases: Vimos en el apartado left_join() como hacer esto A la base resultante, quítale los sujetos descartados de DF_BAD. Pista descartar filas: anti_join()! Crea una nueva base con datos demográficos y resultados para los sujetos descartados. Pista para filtrar a partir de una base: semi_join()! Comprueba si el promedio para Crystallized Intelligence de los participantes descartados difiere de la de los no descartados. Pista para promedios agrupados: group_by() %&gt;% summarise() Haz una gráfica donde se puedan ver las diferencias En el ejercicio 3 de verbos avanzados creaste un DF llamado DF_split con la median split a partir de la variable Social.Adaptation. DF_wide = read_csv(&quot;https://raw.githubusercontent.com/gorkang/cognitive-and-socio-affective-predictors-of-social-adaptation/master/outputs/data/sa-prepared.csv&quot;) %&gt;% janitor::clean_names() median_social_adaptation = DF_wide %&gt;% pull(social_adaptation) %&gt;% median(., na.rm = TRUE) DF_split = DF_wide %&gt;% mutate(social_adaptation_split = as.factor( case_when( social_adaptation &gt;= median_social_adaptation ~ &quot;high_social_adaptation&quot;, social_adaptation &lt; median_social_adaptation ~ &quot;low_social_adaptation&quot;, TRUE ~ NA_character_))) %&gt;% select(id, social_adaptation, social_adaptation_split) %&gt;% drop_na(social_adaptation_split) DF_long = DF_wide %&gt;% pivot_longer(fluid_intelligence:working_memory) Uno ese DF al DF_long que habías creado en el ejercicio 2 de la misma sección. El DF final se vera así: Haz un plot donde se vea la distribución para todas las variables de resultados de los dos niveles de social_adaptation_split. 4.3 Datasets interesantes En los siguientes repositorios podréis encontrar datasets interesantes para jugar. fivethirtyeight Our World in Data TidyTuesday Bibliografía Cheatsheets RStudio data-carpentry-week lesson_joins R4ds - Joins Tidyexplain "],["análisis-de-datos-exploratorio.html", "Capítulo 5 Análisis de datos exploratorio 5.1 Visualizando distribuciones 5.2 Covariación 5.3 Ejercicios finales Bibliografía", " Capítulo 5 Análisis de datos exploratorio Paquetes para este capítulo if (!require(&#39;cowplot&#39;)) install.packages(&#39;cowplot&#39;); library(&#39;cowplot&#39;) if (!require(&#39;dplyr&#39;)) install.packages(&#39;dplyr&#39;); library(&#39;dplyr&#39;) if (!require(&#39;gapminder&#39;)) install.packages(&#39;gapminder&#39;); library(&#39;gapminder&#39;) if (!require(&#39;ggplot2&#39;)) install.packages(&#39;ggplot2&#39;); library(&#39;ggplot2&#39;) if (!require(&#39;ggridges&#39;)) install.packages(&#39;ggridges&#39;); library(&#39;ggridges&#39;) if (!require(&#39;haven&#39;)) install.packages(&#39;haven&#39;); library(&#39;haven&#39;) if (!require(&#39;inspectdf&#39;)) install.packages(&#39;inspectdf&#39;); library(&#39;inspectdf&#39;) if (!require(&#39;tidyr&#39;)) install.packages(&#39;tidyr&#39;); library(&#39;tidyr&#39;) En este capítulo vamos a aplicar lo que hemos aprendido en los dos capítulos anteriores, combinando transformación de datos con visualización para entender nuestras bases de datos, buscar patrones interesantes, etc. Podéis encontrar una introducción más completa en el manual R 4 data science - exploratory data analysis. 5.1 Visualizando distribuciones Para visualizar la distribución de nuestras variables, tendremos que seguir estrategias diferentes dependiendo de si se trata de variables categóricas o continuas. 5.1.1 Variables categóricas ggplot(gapminder, aes(continent)) + geom_bar() gapminder %&gt;% count(continent) ## # A tibble: 5 × 2 ## continent n ## &lt;fct&gt; &lt;int&gt; ## 1 Africa 624 ## 2 Americas 300 ## 3 Asia 396 ## 4 Europe 360 ## 5 Oceania 24 5.1.2 Variables continuas Para ver la distribución de una variable podemos empezar con un histograma sencillo. ggplot(gapminder, aes(lifeExp)) + geom_histogram(binwidth = 1) summarise() nos permite ver medias, medianas, etc. gapminder %&gt;% summarise(MEAN = mean(lifeExp), MEDIAN = median(lifeExp), SD = sd(lifeExp), MAX = max(lifeExp), MIN = min(lifeExp)) ## # A tibble: 1 × 5 ## MEAN MEDIAN SD MAX MIN ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 59.5 60.7 12.9 82.6 23.6 Alternativamente, hay funciones como skimr::skim() que nos muestran una panorámica muy util de las variables de nuestro dataframe. Corre la función en tu Consola para ver el output completo. skimr::skim(gapminder) Table 5.1: Data summary Name gapminder Number of rows 1704 Number of columns 6 _______________________ Column type frequency: factor 2 numeric 4 ________________________ Group variables None Variable type: factor skim_variable n_missing complete_rate ordered n_unique top_counts country 0 1 FALSE 142 Afg: 12, Alb: 12, Alg: 12, Ang: 12 continent 0 1 FALSE 5 Afr: 624, Asi: 396, Eur: 360, Ame: 300 Variable type: numeric skim_variable n_missing complete_rate mean sd p0 p25 p50 p75 p100 hist year 0 1 1979.50 17.27 1952.00 1965.75 1979.50 1993.25 2007.0 ▇▅▅▅▇ lifeExp 0 1 59.47 12.92 23.60 48.20 60.71 70.85 82.6 ▁▆▇▇▇ pop 0 1 29601212.32 106157896.74 60011.00 2793664.00 7023595.50 19585221.75 1318683096.0 ▇▁▁▁▁ gdpPercap 0 1 7215.33 9857.45 241.17 1202.06 3531.85 9325.46 113523.1 ▇▁▁▁▁ Ejercicio variables individuales Usando el DF mpg, visualiza la distribucion de las variables manufacturer, y hwy. Fijate que la primera es categórica, y la segunda continua. Ejercicios ¿Podrías replicar la visualización de abajo? Queremos mostrar un histograma por continente. Lo mejor es dividir el proceso en varios pasos 1) Empieza con el histograma de arriba variables-continuas. 2) recuerda que puedes usar el parámetro fill (dentro de aes), para asignar un color de relleno por nivel de una variable categórica. 3) Finalmente, usando facetas podrás crear una gráfica para cada nivel de la variable categórica facet_wrap()! ¿Como podemos añadir el histograma general para poder entender donde se ubica cada continente? La solución está en el capítulo 1 El paquete gghighlight es justo lo que necesitas También queremos ver los descriptivos por continente, ordenados por el promedio: ## # A tibble: 5 × 6 ## continent MEAN MEDIAN SD MAX MIN ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Africa 48.9 47.8 9.15 76.4 23.6 ## 2 Asia 60.1 61.8 11.9 82.6 28.8 ## 3 Americas 64.7 67.0 9.35 80.7 37.6 ## 4 Europe 71.9 72.2 5.43 81.8 43.6 ## 5 Oceania 74.3 73.7 3.80 81.2 69.1 5.1.3 Visualizando datasets completos Cuando nos llega una nueva base de datos, una de las primeras cosas que haremos será familiarizarnos con los datos. Cómo se distribuyen, cual es la relación entre distintas variables, etc. # Wide to long d &lt;- gapminder %&gt;% pivot_longer(everything(), values_transform = list(value = as.character)) %&gt;% filter(value != 999) %&gt;% # Si existiera algun codigo para missing values, filtrar mutate(value_NUM = as.numeric(value)) # Plot numeric variables d %&gt;% drop_na(value_NUM) %&gt;% ggplot(aes(value_NUM)) + facet_wrap(~ name, scales = &quot;free&quot;) + geom_histogram(bins = 15) #+ scale_x_log10() # Plot non-numeric variables d %&gt;% drop_na(value) %&gt;% filter(is.na(value_NUM)) %&gt;% ggplot(aes(value)) + facet_wrap(~ name, scales = &quot;free&quot;) + geom_bar() + coord_flip() 5.2 Covariación 5.2.1 Variable categórica y continua Podemos contar el numero de elementos por nivel de la variable o ver densidad, etc. Esto funciona bien si tenemos pocos niveles de la variable categórica. ggplot(gapminder, aes(lifeExp, colour = continent)) + geom_freqpoly(binwidth = 2) Podemos usar geom_density_ridges() para combinar puntos con distribuciones: ggplot(gapminder, aes(lifeExp, continent, fill = continent)) + ggridges::geom_density_ridges(stat = &quot;binline&quot;, bins = 20, scale = 0.95, draw_baseline = FALSE, alpha = .3) + ggridges::geom_density_ridges(jittered_points = TRUE, position = &quot;raincloud&quot;, alpha = 0.5, scale = 0.9) ¿Qué estamos viendo exáctamente arriba? Hay un punto por cada pais, y por cada año, lo que da lugar aalgo bien dificil de interpretar. Podemos ver los datos únicamente del último año: gapminder %&gt;% group_by(year) %&gt;% summarise(n()) ## # A tibble: 12 × 2 ## year `n()` ## &lt;int&gt; &lt;int&gt; ## 1 1952 142 ## 2 1957 142 ## 3 1962 142 ## 4 1967 142 ## 5 1972 142 ## 6 1977 142 ## 7 1982 142 ## 8 1987 142 ## 9 1992 142 ## 10 1997 142 ## 11 2002 142 ## 12 2007 142 ggplot(gapminder %&gt;% filter(year &gt; 1995), aes(lifeExp, continent, fill = continent)) + ggridges::geom_density_ridges(stat = &quot;binline&quot;, bins = 20, scale = 0.95, draw_baseline = FALSE, alpha = .3) + ggridges::geom_density_ridges(jittered_points = TRUE, position = &quot;raincloud&quot;, alpha = 0.5, scale = 0.9) 5.2.2 Ejercicio avanzado - Introducción En este ejercicio vamos a intentar mostrar la como la distribución de esperanza de vida ha cambiado a lo largo del tiempo. Para ello, usando la base gapminder, compararemos las distribuciones por continente del año 1952 con el año 2007. Empezamos creando dos gráficos. En cada uno filtramos por el año deseado (e.g. filter(year == 1952)). Fíjate que usamos scale_x_continuous(n.breaks = 10, limits = c(20, 90)) para que ambas gráficas compartan la misma escala en el eje x: A = ggplot(gapminder %&gt;% filter(year == 1952), aes(lifeExp, continent, fill = continent)) + ggridges::geom_density_ridges(stat = &quot;binline&quot;, bins = 20, scale = 0.95, draw_baseline = FALSE, alpha = .3) + ggridges::geom_density_ridges(jittered_points = TRUE, position = &quot;raincloud&quot;, alpha = 0.5, scale = 0.9) + theme(legend.position = &quot;none&quot;) + scale_x_continuous(n.breaks = 10, limits = c(20, 90)) + ggtitle(&quot;1952&quot;) B = ggplot(gapminder %&gt;% filter(year == 2007), aes(lifeExp, continent, fill = continent)) + ggridges::geom_density_ridges(stat = &quot;binline&quot;, bins = 20, scale = 0.95, draw_baseline = FALSE, alpha = .3) + ggridges::geom_density_ridges(jittered_points = TRUE, position = &quot;raincloud&quot;, alpha = 0.5, scale = 0.9) + theme(legend.position = &quot;none&quot;) + scale_x_continuous(n.breaks = 10, limits = c(20, 90)) + ggtitle(&quot;2007&quot;) cowplot::plot_grid(A, B) Para visualizar la diferencia entre 2007 y 1952, podemos calcular primero cuanto ha cambiado la esperanza de vida en cada pais de cada continente, y crear una gráfica con esa variable: # Cálculo de la diferencia entre el máximo y mínimo de lifeExp para cada country. Incluimos continent en group_by() para poder usar esa variable en la gráfica DF_gapminder_max_min = gapminder %&gt;% group_by(continent, country) %&gt;% summarise(lifeExp = max(lifeExp) - min(lifeExp)) ggplot(DF_gapminder_max_min, aes(lifeExp, continent, fill = continent)) + ggridges::geom_density_ridges(stat = &quot;binline&quot;, bins = 20, scale = 0.95, draw_baseline = FALSE, alpha = .3) + ggridges::geom_density_ridges(jittered_points = TRUE, position = &quot;raincloud&quot;, alpha = 0.5, scale = 0.9) + theme(legend.position = &quot;none&quot;) + ggtitle(&quot;Diferencia entre max y min por país&quot;) 5.2.3 Ejercicio Arriba estamos restando la esperanza de vida máxima y mínima de cada pais, pero querríamos ver la diferencia entre 2007 y 1952 ¿Podrías rehacer el cálculo para mostrar la diferencia entre 2007 y 1952? Pista 1. Crear un DF para cada 2007 y otro para 1952, renombrando la variable lifeExp (e.g. max_lifeExp y min_lifeExp, respectivamente)2. Usando la funcion full_join(), juntamos ambas bases (tendras que usar el parametro by = c(\"country\", \"continent\")). 3. Con mutate() calculamos la diferencia. 5.2.4 Dos variables categóricas ggplot(diamonds, aes(cut, color)) + geom_count() diamonds %&gt;% count(color, cut) ## # A tibble: 35 × 3 ## color cut n ## &lt;ord&gt; &lt;ord&gt; &lt;int&gt; ## 1 D Fair 163 ## 2 D Good 662 ## 3 D Very Good 1513 ## 4 D Premium 1603 ## 5 D Ideal 2834 ## 6 E Fair 224 ## 7 E Good 933 ## 8 E Very Good 2400 ## 9 E Premium 2337 ## 10 E Ideal 3903 ## # … with 25 more rows ## # ℹ Use `print(n = ...)` to see more rows diamonds %&gt;% count(color, cut) %&gt;% ggplot(aes(color, cut, fill = n)) + geom_tile() 5.2.5 Dos variables continuas ggplot(gapminder, aes(lifeExp, gdpPercap)) + geom_point() ggplot(gapminder, aes(lifeExp, gdpPercap, color = continent)) + geom_point(alpha = 1 / 2) + scale_y_log10() ggplot(gapminder, aes(lifeExp, gdpPercap)) + geom_hex() ggplot(gapminder, aes(lifeExp, gdpPercap)) + geom_boxplot(mapping = aes(group = cut_width(lifeExp, 10))) + scale_y_log10() 5.2.6 Ejercicio covariación 2 Usando el DF mpg, visualiza la covariación entre: manufacturer y hwy class y hwy hwy y cty Visualizando una variable categórica y una continua geom_density_ridges()! Visualizando pares de variables continuas geom_smooth()! 5.3 Ejercicios finales 5.3.1 Ejercicio exploración base nueva Usando la base del paper Cancer Screening Risk Literacy of Physicians in Training, haz un primer análisis exploratorio que incluya: histogramas de todas las variables numéricas y no-numéricas scatterplots de la relación entre comprensión y numeracy, y entre comprensión y screenbeliefs Puedes ir al enlace anterior y descargar el archivo Cancer screening risk literacy R1.sav en la carpeta Data and results, o directamente usar el codigo de abajo. Como visualizar todas las variables Ver el apartado visualizando-datasets-completos en este mismo capítulo # Usamos haven::read_sav() para leer los archivos .sav DF_dafina = haven::read_sav(here::here(&quot;data/files/Dafina&quot;, &quot;Cancer screening risk literacy R1.sav&quot;)) %&gt;% as_tibble() Bibliografía Wickham, H., &amp; Grolemund, G. (2016). R for data science: import, tidy, transform, visualize, and model data. O’Reilly Media, Inc. https://r4ds.had.co.nz/ "],["análisis-de-datos-inferencial.html", "Capítulo 6 Análisis de datos inferencial 6.1 Análisis de datos y reporte de resultados 6.2 Tablas descriptivos 6.3 Tablas resultados inferenciales 6.4 Unir tablas 6.5 Reporte de resultados 6.6 Texto inline Ejercicio - Resultados inferenciales 6.7 Otros análisis y sus tablas Bibliografía", " Capítulo 6 Análisis de datos inferencial Paquetes para este capítulo if (!require(&#39;afex&#39;)) install.packages(&#39;afex&#39;); library(&#39;afex&#39;) if (!require(&#39;correlation&#39;)) install.packages(&#39;correlation&#39;); library(&#39;correlation&#39;) if (!require(&#39;corrr&#39;)) install.packages(&#39;corrr&#39;); library(&#39;corrr&#39;) if (!require(&#39;cowplot&#39;)) install.packages(&#39;cowplot&#39;); library(&#39;cowplot&#39;) if (!require(&#39;dplyr&#39;)) install.packages(&#39;dplyr&#39;); library(&#39;dplyr&#39;) if (!require(&#39;gapminder&#39;)) install.packages(&#39;gapminder&#39;); library(&#39;gapminder&#39;) if (!require(&#39;ggplot2&#39;)) install.packages(&#39;ggplot2&#39;); library(&#39;ggplot2&#39;) if (!require(&#39;ggridges&#39;)) install.packages(&#39;ggridges&#39;); library(&#39;ggridges&#39;) if (!require(&#39;gtsummary&#39;)) install.packages(&#39;gtsummary&#39;); library(&#39;gtsummary&#39;) if (!require(&#39;haven&#39;)) install.packages(&#39;haven&#39;); library(&#39;haven&#39;) if (!require(&#39;inspectdf&#39;)) install.packages(&#39;inspectdf&#39;); library(&#39;inspectdf&#39;) if (!require(&#39;knitr&#39;)) install.packages(&#39;knitr&#39;); library(&#39;knitr&#39;) if (!require(&#39;lme4&#39;)) install.packages(&#39;lme4&#39;); library(&#39;lme4&#39;) if (!require(&#39;papaja&#39;)) install.packages(&quot;papaja&quot;); library(&#39;papaja&#39;) if (!require(&#39;parameters&#39;)) install.packages(&#39;parameters&#39;); library(&#39;parameters&#39;) if (!require(&#39;performance&#39;)) install.packages(&#39;performance&#39;); library(&#39;performance&#39;) if (!require(&#39;report&#39;)) install.packages(&#39;report&#39;); library(&#39;report&#39;) if (!require(&#39;sjPlot&#39;)) install.packages(&#39;sjPlot&#39;); library(&#39;sjPlot&#39;) if (!require(&#39;tidyr&#39;)) install.packages(&#39;tidyr&#39;); library(&#39;tidyr&#39;) 6.1 Análisis de datos y reporte de resultados R es un lenguaje creado por estadísicos que ha ido evolucionando hacia un lenguaje de programación completo. No obstante, una de sus fortalezas innegables es el análisis de datos, y el reporte de resultados. En esta sección vamos a ver de manera muy general algunas de las herramientas que tenemos a nuestra disposición. 6.1.1 Tablas Hay numerosos paquetes para crear tablas descriptivas o para facilitar el reporte de resultados en R: {gtsummary} {stargazer} {papaja} {flextable} {huxtable} Mostraremos algunos ejemplos usando gtsummary. Una ventaja interesante es que permite de manera sencilla transformar nuestra tabla a otros formatos. 6.2 Tablas descriptivos Podemos crear tablas con los descriptivos de nuestros datos usando la función tbl_summary() de {gtsummary} # Por defecto, usa: mediana (rango inter cuartil) gapminder %&gt;% select(-country) %&gt;% gtsummary::tbl_summary() html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #nrwtoslwab .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #nrwtoslwab .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #nrwtoslwab .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #nrwtoslwab .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #nrwtoslwab .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #nrwtoslwab .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #nrwtoslwab .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #nrwtoslwab .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #nrwtoslwab .gt_column_spanner_outer:first-child { padding-left: 0; } #nrwtoslwab .gt_column_spanner_outer:last-child { padding-right: 0; } #nrwtoslwab .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #nrwtoslwab .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #nrwtoslwab .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #nrwtoslwab .gt_from_md > :first-child { margin-top: 0; } #nrwtoslwab .gt_from_md > :last-child { margin-bottom: 0; } #nrwtoslwab .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #nrwtoslwab .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #nrwtoslwab .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #nrwtoslwab .gt_row_group_first td { border-top-width: 2px; } #nrwtoslwab .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #nrwtoslwab .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #nrwtoslwab .gt_first_summary_row.thick { border-top-width: 2px; } #nrwtoslwab .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #nrwtoslwab .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #nrwtoslwab .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #nrwtoslwab .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #nrwtoslwab .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #nrwtoslwab .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #nrwtoslwab .gt_footnote { margin: 0px; font-size: 90%; padding-left: 4px; padding-right: 4px; padding-left: 5px; padding-right: 5px; } #nrwtoslwab .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #nrwtoslwab .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #nrwtoslwab .gt_left { text-align: left; } #nrwtoslwab .gt_center { text-align: center; } #nrwtoslwab .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #nrwtoslwab .gt_font_normal { font-weight: normal; } #nrwtoslwab .gt_font_bold { font-weight: bold; } #nrwtoslwab .gt_font_italic { font-style: italic; } #nrwtoslwab .gt_super { font-size: 65%; } #nrwtoslwab .gt_two_val_uncert { display: inline-block; line-height: 1em; text-align: right; font-size: 60%; vertical-align: -0.25em; margin-left: 0.1em; } #nrwtoslwab .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 75%; vertical-align: 0.4em; } #nrwtoslwab .gt_asterisk { font-size: 100%; vertical-align: 0; } #nrwtoslwab .gt_slash_mark { font-size: 0.7em; line-height: 0.7em; vertical-align: 0.15em; } #nrwtoslwab .gt_fraction_numerator { font-size: 0.6em; line-height: 0.6em; vertical-align: 0.45em; } #nrwtoslwab .gt_fraction_denominator { font-size: 0.6em; line-height: 0.6em; vertical-align: -0.05em; } Characteristic N = 1,7041 continent Africa 624 (37%) Americas 300 (18%) Asia 396 (23%) Europe 360 (21%) Oceania 24 (1.4%) year 1,980 (1,966, 1,993) lifeExp 61 (48, 71) pop 7,023,596 (2,793,664, 19,585,222) gdpPercap 3,532 (1,202, 9,325) 1 n (%); Median (IQR) Usando el parámetro by podemos crear columnas para cada valor de una variable: # Por continente gapminder %&gt;% select(-country) %&gt;% gtsummary::tbl_summary(by = continent) html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #vrofdpwjne .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #vrofdpwjne .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #vrofdpwjne .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #vrofdpwjne .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #vrofdpwjne .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #vrofdpwjne .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #vrofdpwjne .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #vrofdpwjne .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #vrofdpwjne .gt_column_spanner_outer:first-child { padding-left: 0; } #vrofdpwjne .gt_column_spanner_outer:last-child { padding-right: 0; } #vrofdpwjne .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #vrofdpwjne .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #vrofdpwjne .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #vrofdpwjne .gt_from_md > :first-child { margin-top: 0; } #vrofdpwjne .gt_from_md > :last-child { margin-bottom: 0; } #vrofdpwjne .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #vrofdpwjne .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #vrofdpwjne .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #vrofdpwjne .gt_row_group_first td { border-top-width: 2px; } #vrofdpwjne .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #vrofdpwjne .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #vrofdpwjne .gt_first_summary_row.thick { border-top-width: 2px; } #vrofdpwjne .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #vrofdpwjne .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #vrofdpwjne .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #vrofdpwjne .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #vrofdpwjne .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #vrofdpwjne .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #vrofdpwjne .gt_footnote { margin: 0px; font-size: 90%; padding-left: 4px; padding-right: 4px; padding-left: 5px; padding-right: 5px; } #vrofdpwjne .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #vrofdpwjne .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #vrofdpwjne .gt_left { text-align: left; } #vrofdpwjne .gt_center { text-align: center; } #vrofdpwjne .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #vrofdpwjne .gt_font_normal { font-weight: normal; } #vrofdpwjne .gt_font_bold { font-weight: bold; } #vrofdpwjne .gt_font_italic { font-style: italic; } #vrofdpwjne .gt_super { font-size: 65%; } #vrofdpwjne .gt_two_val_uncert { display: inline-block; line-height: 1em; text-align: right; font-size: 60%; vertical-align: -0.25em; margin-left: 0.1em; } #vrofdpwjne .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 75%; vertical-align: 0.4em; } #vrofdpwjne .gt_asterisk { font-size: 100%; vertical-align: 0; } #vrofdpwjne .gt_slash_mark { font-size: 0.7em; line-height: 0.7em; vertical-align: 0.15em; } #vrofdpwjne .gt_fraction_numerator { font-size: 0.6em; line-height: 0.6em; vertical-align: 0.45em; } #vrofdpwjne .gt_fraction_denominator { font-size: 0.6em; line-height: 0.6em; vertical-align: -0.05em; } Characteristic Africa, N = 6241 Americas, N = 3001 Asia, N = 3961 Europe, N = 3601 Oceania, N = 241 year 1,980 (1,966, 1,993) 1,980 (1,966, 1,993) 1,980 (1,966, 1,993) 1,980 (1,966, 1,993) 1,980 (1,966, 1,993) lifeExp 48 (42, 54) 67 (58, 72) 62 (51, 70) 72 (70, 75) 74 (71, 78) pop 4,579,311 (1,342,075, 10,801,490) 6,227,510 (2,962,359, 18,340,309) 14,530,830 (3,844,393, 46,300,348) 8,551,125 (4,331,500, 21,802,867) 6,403,492 (3,199,212, 14,351,625) gdpPercap 1,192 (761, 2,377) 5,466 (3,428, 7,830) 2,647 (1,057, 8,549) 12,082 (7,213, 20,461) 17,983 (14,142, 22,214) 1 Median (IQR) El parámetro statistic nos permite controlar que estadísticos mostrar en función del tipo de variable: # Usando promedio (desviación estandard) gapminder %&gt;% select(-country) %&gt;% gtsummary::tbl_summary(by = continent, statistic = list(all_continuous() ~ &quot;{mean} ({sd})&quot;, all_categorical() ~ &quot;{n} / {N} ({p}%)&quot;), missing = &quot;ifany&quot;) %&gt;% gtsummary::add_n() html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #iugakojknq .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #iugakojknq .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #iugakojknq .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #iugakojknq .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #iugakojknq .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #iugakojknq .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #iugakojknq .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #iugakojknq .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #iugakojknq .gt_column_spanner_outer:first-child { padding-left: 0; } #iugakojknq .gt_column_spanner_outer:last-child { padding-right: 0; } #iugakojknq .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #iugakojknq .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #iugakojknq .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #iugakojknq .gt_from_md > :first-child { margin-top: 0; } #iugakojknq .gt_from_md > :last-child { margin-bottom: 0; } #iugakojknq .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #iugakojknq .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #iugakojknq .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #iugakojknq .gt_row_group_first td { border-top-width: 2px; } #iugakojknq .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #iugakojknq .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #iugakojknq .gt_first_summary_row.thick { border-top-width: 2px; } #iugakojknq .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #iugakojknq .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #iugakojknq .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #iugakojknq .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #iugakojknq .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #iugakojknq .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #iugakojknq .gt_footnote { margin: 0px; font-size: 90%; padding-left: 4px; padding-right: 4px; padding-left: 5px; padding-right: 5px; } #iugakojknq .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #iugakojknq .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #iugakojknq .gt_left { text-align: left; } #iugakojknq .gt_center { text-align: center; } #iugakojknq .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #iugakojknq .gt_font_normal { font-weight: normal; } #iugakojknq .gt_font_bold { font-weight: bold; } #iugakojknq .gt_font_italic { font-style: italic; } #iugakojknq .gt_super { font-size: 65%; } #iugakojknq .gt_two_val_uncert { display: inline-block; line-height: 1em; text-align: right; font-size: 60%; vertical-align: -0.25em; margin-left: 0.1em; } #iugakojknq .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 75%; vertical-align: 0.4em; } #iugakojknq .gt_asterisk { font-size: 100%; vertical-align: 0; } #iugakojknq .gt_slash_mark { font-size: 0.7em; line-height: 0.7em; vertical-align: 0.15em; } #iugakojknq .gt_fraction_numerator { font-size: 0.6em; line-height: 0.6em; vertical-align: 0.45em; } #iugakojknq .gt_fraction_denominator { font-size: 0.6em; line-height: 0.6em; vertical-align: -0.05em; } Characteristic N Africa, N = 6241 Americas, N = 3001 Asia, N = 3961 Europe, N = 3601 Oceania, N = 241 year 1,704 1,980 (17) 1,980 (17) 1,980 (17) 1,980 (17) 1,980 (18) lifeExp 1,704 49 (9) 65 (9) 60 (12) 72 (5) 74 (4) pop 1,704 9,916,003 (15,490,923) 24,504,795 (50,979,430) 77,038,722 (206,885,205) 17,169,765 (20,519,438) 8,874,672 (6,506,342) gdpPercap 1,704 2,194 (2,828) 7,136 (6,397) 7,902 (14,045) 14,469 (9,355) 18,622 (6,359) 1 Mean (SD) Ejercicio - Descriptivos Usando la base de datos del apartado anterior: DF_dafina = haven::read_sav(here::here(&quot;data/files/Dafina&quot;, &quot;Cancer screening risk literacy R1.sav&quot;)) %&gt;% as_tibble() %&gt;% select(IDparticipante, resident, screenbeliefs, compR1, numeracy) %&gt;% rename(comprehension = compR1) Intenta reproducir la siguiente tabla: Donde encontrar ayuda En el manual de gtsummary tienes ejemplos para todo lo que necesitarás. Busca a la función tbl_summary() Demasiado detalle, solo quiero los promedios Puedes usar type = list(everything() ~ 'continuous'), dentro de tbl_summary() para forzar el tratamiento de variables con pocos niveles como continuas. Error al añadir valor p En la ayuda de la funcion: ?add_p.tbl_summary encontrarás que puedes usar algo como: add_p(test = everything() ~ \"t.test\") html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #icdyiaobwc .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #icdyiaobwc .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #icdyiaobwc .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #icdyiaobwc .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #icdyiaobwc .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #icdyiaobwc .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #icdyiaobwc .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #icdyiaobwc .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #icdyiaobwc .gt_column_spanner_outer:first-child { padding-left: 0; } #icdyiaobwc .gt_column_spanner_outer:last-child { padding-right: 0; } #icdyiaobwc .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #icdyiaobwc .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #icdyiaobwc .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #icdyiaobwc .gt_from_md > :first-child { margin-top: 0; } #icdyiaobwc .gt_from_md > :last-child { margin-bottom: 0; } #icdyiaobwc .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #icdyiaobwc .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #icdyiaobwc .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #icdyiaobwc .gt_row_group_first td { border-top-width: 2px; } #icdyiaobwc .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #icdyiaobwc .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #icdyiaobwc .gt_first_summary_row.thick { border-top-width: 2px; } #icdyiaobwc .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #icdyiaobwc .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #icdyiaobwc .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #icdyiaobwc .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #icdyiaobwc .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #icdyiaobwc .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #icdyiaobwc .gt_footnote { margin: 0px; font-size: 90%; padding-left: 4px; padding-right: 4px; padding-left: 5px; padding-right: 5px; } #icdyiaobwc .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #icdyiaobwc .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #icdyiaobwc .gt_left { text-align: left; } #icdyiaobwc .gt_center { text-align: center; } #icdyiaobwc .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #icdyiaobwc .gt_font_normal { font-weight: normal; } #icdyiaobwc .gt_font_bold { font-weight: bold; } #icdyiaobwc .gt_font_italic { font-style: italic; } #icdyiaobwc .gt_super { font-size: 65%; } #icdyiaobwc .gt_two_val_uncert { display: inline-block; line-height: 1em; text-align: right; font-size: 60%; vertical-align: -0.25em; margin-left: 0.1em; } #icdyiaobwc .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 75%; vertical-align: 0.4em; } #icdyiaobwc .gt_asterisk { font-size: 100%; vertical-align: 0; } #icdyiaobwc .gt_slash_mark { font-size: 0.7em; line-height: 0.7em; vertical-align: 0.15em; } #icdyiaobwc .gt_fraction_numerator { font-size: 0.6em; line-height: 0.6em; vertical-align: 0.45em; } #icdyiaobwc .gt_fraction_denominator { font-size: 0.6em; line-height: 0.6em; vertical-align: -0.05em; } Characteristic N Resident p-value2 0, N = 541 1, N = 1181 IDparticipante 172 72 (51) 93 (48) 0.012 Screening beliefs 172 27.4 (5.0) 28.4 (6.8) 0.3 Comprehension of the evidence 172 2.91 (1.28) 2.54 (1.16) 0.077 Numeracy BNT-S 172 3.70 (1.54) 2.87 (1.56) 0.001 1 Mean (SD) 2 Welch Two Sample t-test 6.3 Tablas resultados inferenciales Para tablas con los resultados de nuestros modelos estadísticos, usamos la función tbl_regression() de {gtsummary} Primero preparamos los datos: # Transform variables DF_gapminder = gapminder %&gt;% # Log mutate(gdpPercap_log = log(gdpPercap), pop_log = log(pop) ) %&gt;% # Mean center variables so the 0 values have meaning mutate(year = year - mean(year, na.rm = TRUE), gdpPercap_log = gdpPercap_log - mean(gdpPercap_log, na.rm = TRUE), pop_log = pop_log - mean(pop_log, na.rm = TRUE)) %&gt;% # Will use only last year filter(year == max(year)) Creamos un modelo sencillo y mostramos la tabla de resultados. model1 = lm(lifeExp ~ gdpPercap_log + pop_log, DF_gapminder) table_model1 = gtsummary::tbl_regression(model1, intercept = TRUE) %&gt;% add_global_p() %&gt;% bold_labels() %&gt;% italicize_levels() %&gt;% add_glance_table(include = c(&quot;nobs&quot;, &quot;df.residual&quot;, &quot;r.squared&quot;, &quot;adj.r.squared&quot;)) table_model1 html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #dxkotyjejc .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #dxkotyjejc .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #dxkotyjejc .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #dxkotyjejc .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #dxkotyjejc .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #dxkotyjejc .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #dxkotyjejc .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #dxkotyjejc .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #dxkotyjejc .gt_column_spanner_outer:first-child { padding-left: 0; } #dxkotyjejc .gt_column_spanner_outer:last-child { padding-right: 0; } #dxkotyjejc .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #dxkotyjejc .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #dxkotyjejc .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #dxkotyjejc .gt_from_md > :first-child { margin-top: 0; } #dxkotyjejc .gt_from_md > :last-child { margin-bottom: 0; } #dxkotyjejc .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #dxkotyjejc .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #dxkotyjejc .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #dxkotyjejc .gt_row_group_first td { border-top-width: 2px; } #dxkotyjejc .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #dxkotyjejc .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #dxkotyjejc .gt_first_summary_row.thick { border-top-width: 2px; } #dxkotyjejc .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #dxkotyjejc .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #dxkotyjejc .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #dxkotyjejc .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #dxkotyjejc .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #dxkotyjejc .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #dxkotyjejc .gt_footnote { margin: 0px; font-size: 90%; padding-left: 4px; padding-right: 4px; padding-left: 5px; padding-right: 5px; } #dxkotyjejc .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #dxkotyjejc .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #dxkotyjejc .gt_left { text-align: left; } #dxkotyjejc .gt_center { text-align: center; } #dxkotyjejc .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #dxkotyjejc .gt_font_normal { font-weight: normal; } #dxkotyjejc .gt_font_bold { font-weight: bold; } #dxkotyjejc .gt_font_italic { font-style: italic; } #dxkotyjejc .gt_super { font-size: 65%; } #dxkotyjejc .gt_two_val_uncert { display: inline-block; line-height: 1em; text-align: right; font-size: 60%; vertical-align: -0.25em; margin-left: 0.1em; } #dxkotyjejc .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 75%; vertical-align: 0.4em; } #dxkotyjejc .gt_asterisk { font-size: 100%; vertical-align: 0; } #dxkotyjejc .gt_slash_mark { font-size: 0.7em; line-height: 0.7em; vertical-align: 0.15em; } #dxkotyjejc .gt_fraction_numerator { font-size: 0.6em; line-height: 0.6em; vertical-align: 0.45em; } #dxkotyjejc .gt_fraction_denominator { font-size: 0.6em; line-height: 0.6em; vertical-align: -0.05em; } Characteristic Beta 95% CI1 p-value (Intercept) 63 62, 65 gdpPercap_log 7.2 6.4, 8.1 pop_log 0.81 0.04, 1.6 0.039 No. Obs. 142 Residual df 139 R² 0.665 Adjusted R² 0.660 1 CI = Confidence Interval 6.4 Unir tablas De manera muy sencilla podemos unir varias tablas: # Primero creamos un modelo más sencillo, basado en el anterior model10 = lm(lifeExp ~ gdpPercap_log, DF_gapminder) # Creamos la tabla table_model10 = gtsummary::tbl_regression(model10, intercept = TRUE) %&gt;% add_global_p() %&gt;% bold_labels() %&gt;% italicize_levels() %&gt;% add_glance_table(include = c(&quot;nobs&quot;, &quot;df.residual&quot;, &quot;r.squared&quot;, &quot;adj.r.squared&quot;)) # Combinamos ambas tablas tbl_merge( tbls = list(table_model10, table_model1), tab_spanner = c(&quot;**Baseline**&quot;, &quot;**Step 1**&quot;)) %&gt;% # Necesario para que los parámetros globales de los modelos se muestren al final modify_table_body(~.x %&gt;% arrange(row_type == &quot;glance_statistic&quot;) ) html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #aubslilpxl .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #aubslilpxl .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #aubslilpxl .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #aubslilpxl .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #aubslilpxl .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #aubslilpxl .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #aubslilpxl .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #aubslilpxl .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #aubslilpxl .gt_column_spanner_outer:first-child { padding-left: 0; } #aubslilpxl .gt_column_spanner_outer:last-child { padding-right: 0; } #aubslilpxl .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #aubslilpxl .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #aubslilpxl .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #aubslilpxl .gt_from_md > :first-child { margin-top: 0; } #aubslilpxl .gt_from_md > :last-child { margin-bottom: 0; } #aubslilpxl .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #aubslilpxl .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #aubslilpxl .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #aubslilpxl .gt_row_group_first td { border-top-width: 2px; } #aubslilpxl .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #aubslilpxl .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #aubslilpxl .gt_first_summary_row.thick { border-top-width: 2px; } #aubslilpxl .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #aubslilpxl .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #aubslilpxl .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #aubslilpxl .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #aubslilpxl .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #aubslilpxl .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #aubslilpxl .gt_footnote { margin: 0px; font-size: 90%; padding-left: 4px; padding-right: 4px; padding-left: 5px; padding-right: 5px; } #aubslilpxl .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #aubslilpxl .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #aubslilpxl .gt_left { text-align: left; } #aubslilpxl .gt_center { text-align: center; } #aubslilpxl .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #aubslilpxl .gt_font_normal { font-weight: normal; } #aubslilpxl .gt_font_bold { font-weight: bold; } #aubslilpxl .gt_font_italic { font-style: italic; } #aubslilpxl .gt_super { font-size: 65%; } #aubslilpxl .gt_two_val_uncert { display: inline-block; line-height: 1em; text-align: right; font-size: 60%; vertical-align: -0.25em; margin-left: 0.1em; } #aubslilpxl .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 75%; vertical-align: 0.4em; } #aubslilpxl .gt_asterisk { font-size: 100%; vertical-align: 0; } #aubslilpxl .gt_slash_mark { font-size: 0.7em; line-height: 0.7em; vertical-align: 0.15em; } #aubslilpxl .gt_fraction_numerator { font-size: 0.6em; line-height: 0.6em; vertical-align: 0.45em; } #aubslilpxl .gt_fraction_denominator { font-size: 0.6em; line-height: 0.6em; vertical-align: -0.05em; } Characteristic Baseline Step 1 Beta 95% CI1 p-value Beta 95% CI1 p-value (Intercept) 64 62, 65 63 62, 65 gdpPercap_log 7.2 6.3, 8.1 7.2 6.4, 8.1 pop_log 0.81 0.04, 1.6 0.039 No. Obs. 142 142 Residual df 140 139 R² 0.654 0.665 Adjusted R² 0.652 0.660 1 CI = Confidence Interval 6.5 Reporte de resultados Con la función report() podemos ver una descripción completa de los resultados de nuestro modelo: report::report(model1) ## We fitted a linear model (estimated using OLS) to predict lifeExp with ## gdpPercap_log and pop_log ## (formula: lifeExp ~ gdpPercap_log + pop_log). The model explains a ## statistically significant and substantial proportion of variance (R2 = 0.66, ## F(2, 139) = 137.93, p &lt; .001, adj. R2 = 0.66). The model&#39;s intercept, ## corresponding to gdpPercap_log = 0 and pop_log = 0 ## , is at 63.28 (95% CI [61.98, 64.58], t(139) = 96.30, p &lt; .001). Within this ## model: ## ## - The effect of gdpPercap log is statistically significant and positive (beta = ## 7.24, 95% CI [6.38, 8.11], t(139) = 16.56, p &lt; .001; Std. beta = 0.81, 95% CI ## [0.72, 0.91]) ## - The effect of pop log is statistically significant and positive (beta = 0.81, ## 95% CI [0.04, 1.58], t(139) = 2.09, p = 0.039; Std. beta = 0.10, 95% CI ## [5.35e-03, 0.20]) ## ## Standardized parameters were obtained by fitting the model on a standardized ## version of the dataset. 95% Confidence Intervals (CIs) and p-values were ## computed using a Wald t-distribution approximation. 6.6 Texto inline Algo genial de gtsummary, es que podemos usar las propias tablas para extraer detalles de los resultados y usarlos directamente en el texto. El paquete report tiene también funcionalidades muy potentes que merece la pena explorar. La ventaja de escribir los resultados de esta manera es que si hacemos algun pequeño cambio en la preparación de datos, podemos volver a correr el script de generación del reporte de resultados, y los valores p, etc. se ajustarán automáticamente. Únicamente tenemos que asegurarnos que la interpretación cualitativa no cambia :) paste0(&quot;Life expectancy was significantly associated with GDP per capita (log), beta = &quot;, gtsummary::inline_text(table_model1, variable = gdpPercap_log)) ## [1] &quot;Life expectancy was significantly associated with GDP per capita (log), beta = 3.3 (95% CI 2.8, 3.8; p&lt;0.001)&quot; Ejercicio - Resultados inferenciales Usando la misma base de datos del ejercicio anterior: DF_dafina = haven::read_sav(here::here(&quot;data/files/Dafina&quot;, &quot;Cancer screening risk literacy R1.sav&quot;)) %&gt;% as_tibble() %&gt;% select(IDparticipante, resident, screenbeliefs, compR1, numeracy) %&gt;% rename(comprehension = compR1) Haz una regresión lineal preciciendo compresion a partir de las variables de la base. Finalmente, crea una tabla para reportar los resultados de tu análisis, como la siguiente: Donde encontrar ayuda En el manual de gtsummary tienes ejemplos para todo lo que necesitarás. tbl_regression() es tu amiga. Como añadir información en el pie de la tabla Tendrás que usar la función add_glance_source_note() o add_glance_table(). Para saber que nombres poner en el paràmetro include, puedes usar la función broom::glance(model) html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #slilpxlrgd .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #slilpxlrgd .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #slilpxlrgd .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #slilpxlrgd .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #slilpxlrgd .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #slilpxlrgd .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #slilpxlrgd .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #slilpxlrgd .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #slilpxlrgd .gt_column_spanner_outer:first-child { padding-left: 0; } #slilpxlrgd .gt_column_spanner_outer:last-child { padding-right: 0; } #slilpxlrgd .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #slilpxlrgd .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #slilpxlrgd .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #slilpxlrgd .gt_from_md > :first-child { margin-top: 0; } #slilpxlrgd .gt_from_md > :last-child { margin-bottom: 0; } #slilpxlrgd .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #slilpxlrgd .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #slilpxlrgd .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #slilpxlrgd .gt_row_group_first td { border-top-width: 2px; } #slilpxlrgd .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #slilpxlrgd .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #slilpxlrgd .gt_first_summary_row.thick { border-top-width: 2px; } #slilpxlrgd .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #slilpxlrgd .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #slilpxlrgd .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #slilpxlrgd .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #slilpxlrgd .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #slilpxlrgd .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #slilpxlrgd .gt_footnote { margin: 0px; font-size: 90%; padding-left: 4px; padding-right: 4px; padding-left: 5px; padding-right: 5px; } #slilpxlrgd .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #slilpxlrgd .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #slilpxlrgd .gt_left { text-align: left; } #slilpxlrgd .gt_center { text-align: center; } #slilpxlrgd .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #slilpxlrgd .gt_font_normal { font-weight: normal; } #slilpxlrgd .gt_font_bold { font-weight: bold; } #slilpxlrgd .gt_font_italic { font-style: italic; } #slilpxlrgd .gt_super { font-size: 65%; } #slilpxlrgd .gt_two_val_uncert { display: inline-block; line-height: 1em; text-align: right; font-size: 60%; vertical-align: -0.25em; margin-left: 0.1em; } #slilpxlrgd .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 75%; vertical-align: 0.4em; } #slilpxlrgd .gt_asterisk { font-size: 100%; vertical-align: 0; } #slilpxlrgd .gt_slash_mark { font-size: 0.7em; line-height: 0.7em; vertical-align: 0.15em; } #slilpxlrgd .gt_fraction_numerator { font-size: 0.6em; line-height: 0.6em; vertical-align: 0.45em; } #slilpxlrgd .gt_fraction_denominator { font-size: 0.6em; line-height: 0.6em; vertical-align: -0.05em; } Characteristic Beta 95% CI1 p-value (Intercept) 2.8 1.9, 3.8 Resident -0.23 -0.62, 0.17 0.3 Screening beliefs -0.02 -0.05, 0.01 0.2 Numeracy BNT-S 0.14 0.03, 0.26 0.016 No. Obs. = 172; Adjusted R² = 0.047; Residual df = 168; Statistic = 3.83; p-value = 0.011; df = 3 1 CI = Confidence Interval 6.7 Otros análisis y sus tablas Que test estadístico debería usar, con código en R 6.7.1 Correlación simple # Data iris %&gt;% as_tibble() ## # A tibble: 150 × 5 ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa ## 7 4.6 3.4 1.4 0.3 setosa ## 8 5 3.4 1.5 0.2 setosa ## 9 4.4 2.9 1.4 0.2 setosa ## 10 4.9 3.1 1.5 0.1 setosa ## # … with 140 more rows ## # ℹ Use `print(n = ...)` to see more rows # Test simple_corr_test = cor.test(iris$Sepal.Width, iris$Sepal.Length, method = &quot;spearman&quot;) # Report simple_corr_test %&gt;% report::report() ## Effect sizes were labelled following Funder&#39;s (2019) recommendations. ## ## The Spearman&#39;s rank correlation rho between iris$Sepal.Width and ## iris$Sepal.Length is negative, statistically significant, and small (rho = ## -0.17, S = 6.56e+05, p = 0.041) 6.7.2 Multiples correlaciones # Multiple correlations table_correlations = iris %&gt;% correlation(partial = FALSE, method = &quot;spearman&quot;) # Print table TABLE_CORR = table_correlations %&gt;% summary(stars = FALSE, include_significance = TRUE, p_digits = 3) # Fancy table TABLE_CORR %&gt;% parameters::print_md() Correlation Matrix (spearman-method) Parameter Petal.Width Petal.Length Sepal.Width Sepal.Length 0.83 (p &lt; .001) 0.88 (p &lt; .001) -0.17 (p = 0.041) Sepal.Width -0.29 (p &lt; .001) -0.31 (p &lt; .001) Petal.Length 0.94 (p &lt; .001) p-value adjustment method: Holm (1979) 6.7.3 Anova Ver paquete {afex} data(obk.long, package = &quot;afex&quot;) head(obk.long) ## id treatment gender age phase hour value ## 1 1 control M -4.75 pre 1 1 ## 2 1 control M -4.75 pre 2 2 ## 3 1 control M -4.75 pre 3 4 ## 4 1 control M -4.75 pre 4 2 ## 5 1 control M -4.75 pre 5 1 ## 6 1 control M -4.75 post 1 3 # estimate mixed ANOVA on the full design: model = afex::aov_ez(id = &quot;id&quot;, dv = &quot;value&quot;, data = obk.long, between = c(&quot;treatment&quot;), within = c(&quot;phase&quot;, &quot;hour&quot;)) table_afex = papaja::apa_print(model)$table knitr::kable(table_afex) term estimate conf.int statistic df df.residual p.value Treatment .211 [.000, .468] 2.91 2 13 .090 Phase .164 [.000, .356] 19.29 1.74 22.64 &lt; .001 Hour .129 [.000, .237] 18.44 1.95 25.41 &lt; .001 Treatment \\(\\times\\) Phase .099 [.000, .212] 5.43 3.48 22.64 .004 Treatment \\(\\times\\) Hour .001 [.000, .000] 0.08 3.91 25.41 .987 Phase \\(\\times\\) Hour .017 [.000, .000] 1.35 4.02 52.29 .265 Treatment \\(\\times\\) Phase \\(\\times\\) Hour .008 [.000, .000] 0.33 8.05 52.29 .951 6.7.4 Modelos mixtos Primero preparamos los datos: # Transform variables DF_gapminder2 = gapminder %&gt;% # Log mutate(gdpPercap_log = log(gdpPercap), pop_log = log(pop) ) %&gt;% # Mean center variables so the 0 values have meaning mutate(year = year - mean(year, na.rm = TRUE), gdpPercap_log = gdpPercap_log - mean(gdpPercap_log, na.rm = TRUE), pop_log = pop_log - mean(pop_log, na.rm = TRUE)) # Reference levels and contrast coding DF_gapminder2 &lt;- within(DF_gapminder2, continent &lt;- relevel(continent, ref = &quot;Oceania&quot;)) contrasts(DF_gapminder2$continent) = car::contr.Sum(levels(DF_gapminder2$continent)) Creamos un modelo sencillo: model2 = lme4::lmer(lifeExp ~ gdpPercap_log + pop_log + year + (1|country), DF_gapminder2) # Extraemos los R2 del modelo para usar en la tabla R2_1 = performance::r2(model2) Y mostramos la tabla de resultados. Como se trata de modelos mixtos, tenemos que añadir manualmente los R2’s. table_model2 = gtsummary::tbl_regression(model2, intercept = TRUE) %&gt;% add_global_p() %&gt;% bold_labels() %&gt;% italicize_levels() %&gt;% add_glance_source_note(include = c(&quot;nobs&quot;, &quot;df.residual&quot;)) # broomExtra::glance_performance(model2) table_model2 %&gt;% as_gt() %&gt;% gt::tab_source_note( gt::md(paste0(deparse1(model2@call$formula), &quot;&lt;BR&gt; &quot;, &quot;R2 conditional = &quot;, round(R2_1$R2_conditional, 3), &quot;, R2 marginal = &quot;, round(R2_1$R2_marginal, 3)))) html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #ixhaubslil .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #ixhaubslil .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ixhaubslil .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #ixhaubslil .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #ixhaubslil .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ixhaubslil .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ixhaubslil .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #ixhaubslil .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #ixhaubslil .gt_column_spanner_outer:first-child { padding-left: 0; } #ixhaubslil .gt_column_spanner_outer:last-child { padding-right: 0; } #ixhaubslil .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #ixhaubslil .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #ixhaubslil .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #ixhaubslil .gt_from_md > :first-child { margin-top: 0; } #ixhaubslil .gt_from_md > :last-child { margin-bottom: 0; } #ixhaubslil .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #ixhaubslil .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #ixhaubslil .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #ixhaubslil .gt_row_group_first td { border-top-width: 2px; } #ixhaubslil .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ixhaubslil .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #ixhaubslil .gt_first_summary_row.thick { border-top-width: 2px; } #ixhaubslil .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ixhaubslil .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ixhaubslil .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #ixhaubslil .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #ixhaubslil .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ixhaubslil .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ixhaubslil .gt_footnote { margin: 0px; font-size: 90%; padding-left: 4px; padding-right: 4px; padding-left: 5px; padding-right: 5px; } #ixhaubslil .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ixhaubslil .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #ixhaubslil .gt_left { text-align: left; } #ixhaubslil .gt_center { text-align: center; } #ixhaubslil .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #ixhaubslil .gt_font_normal { font-weight: normal; } #ixhaubslil .gt_font_bold { font-weight: bold; } #ixhaubslil .gt_font_italic { font-style: italic; } #ixhaubslil .gt_super { font-size: 65%; } #ixhaubslil .gt_two_val_uncert { display: inline-block; line-height: 1em; text-align: right; font-size: 60%; vertical-align: -0.25em; margin-left: 0.1em; } #ixhaubslil .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 75%; vertical-align: 0.4em; } #ixhaubslil .gt_asterisk { font-size: 100%; vertical-align: 0; } #ixhaubslil .gt_slash_mark { font-size: 0.7em; line-height: 0.7em; vertical-align: 0.15em; } #ixhaubslil .gt_fraction_numerator { font-size: 0.6em; line-height: 0.6em; vertical-align: 0.45em; } #ixhaubslil .gt_fraction_denominator { font-size: 0.6em; line-height: 0.6em; vertical-align: -0.05em; } Characteristic Beta 95% CI1 p-value (Intercept) 59 58, 61 gdpPercap_log 3.3 2.8, 3.8 pop_log 6.1 5.4, 6.9 year 0.15 0.13, 0.17 No. Obs. = 1,704; Residual df = 1,698 lifeExp ~ gdpPercap_log + pop_log + year + (1 | country) R2 conditional = 0.964, R2 marginal = 0.49 1 CI = Confidence Interval Bibliografía Wickham, H., &amp; Grolemund, G. (2016). R for data science: import, tidy, transform, visualize, and model data. O’Reilly Media, Inc. https://r4ds.had.co.nz/ "],["trabajo-con-rmarkdown-para-reportes-reproducibles.html", "Capítulo 7 Trabajo con RMarkdown para reportes reproducibles Dependencias 7.1 Que es la reproducibilidad 7.2 Proyectos de R-Studio 7.3 RMarkdown/Quarto, openscience y análisis reproducibles 7.4 Sintaxis, chunks de código, tipos de archivo Ejercicio básico RMarkdown Ejercicio avanzado 7.5 Avanzado Bibliografía", " Capítulo 7 Trabajo con RMarkdown para reportes reproducibles Paquetes para este capítulo if (!require(&#39;afex&#39;)) install.packages(&#39;afex&#39;); library(&#39;afex&#39;) if (!require(&#39;correlation&#39;)) install.packages(&quot;correlation&quot;); library(&#39;correlation&#39;) if (!require(&#39;corrr&#39;)) install.packages(&#39;corrr&#39;); library(&#39;corrr&#39;) if (!require(&#39;dplyr&#39;)) install.packages(&#39;dplyr&#39;); library(&#39;dplyr&#39;) if (!require(&#39;DT&#39;)) install.packages(&#39;DT&#39;); library(&#39;DT&#39;) if (!require(&#39;ggraph&#39;)) install.packages(&#39;ggraph&#39;); library(&#39;ggraph&#39;) if (!require(&#39;here&#39;)) install.packages(&#39;here&#39;); library(&#39;here&#39;) if (!require(&#39;gtsummary&#39;)) install.packages(&#39;gtsummary&#39;); library(&#39;gtsummary&#39;) if (!require(&#39;knitr&#39;)) install.packages(&#39;knitr&#39;); library(&#39;knitr&#39;) if (!require(&#39;papaja&#39;)) install.packages(&quot;papaja&quot;); library(&#39;papaja&#39;) if (!require(&#39;parameters&#39;)) install.packages(&#39;parameters&#39;); library(&#39;parameters&#39;) if (!require(&#39;remotes&#39;)) install.packages(&#39;remotes&#39;); library(&#39;remotes&#39;) if (!require(&#39;renv&#39;)) install.packages(&quot;renv&quot;); library(&#39;renv&#39;) if (!require(&#39;report&#39;)) install.packages(&quot;report&quot;); library(&#39;report&#39;) if (!require(&#39;rticles&#39;)) install.packages(&#39;rticles&#39;); library(&#39;rticles&#39;) if (!require(&#39;see&#39;)) install.packages(&quot;see&quot;); library(&#39;see&#39;) if (!require(&#39;sjPlot&#39;)) install.packages(&#39;sjPlot&#39;); library(&#39;sjPlot&#39;) if (!require(&#39;stringi&#39;)) install.packages(&#39;stringi&#39;); library(&#39;stringi&#39;) if (!require(&#39;tinytex&#39;)) install.packages(&#39;tinytex&#39;); library(&#39;tinytex&#39;) if (!require(&#39;usethis&#39;)) install.packages(&#39;usethis&#39;); library(&#39;usethis&#39;) # if (!require(&#39;grateful&#39;)) remotes::install_github(&quot;Pakillo/grateful&quot;); library(&#39;grateful&#39;) Dependencias Instalar latex: Para generar pdf’s necesitaremos tener instalado Latex. tinytex nos ayudará a simplificar el proceso: tinytex::install_tinytex() # Llevará un rato 7.1 Que es la reproducibilidad La crisis de replicación (replication crisis) se inició con un paper que trató de replicar los resultados de 100 investigaciones clásicas. Esta crisis ha generado un movimiento muy interesante dentro de las Ciencias Sociales y la Psicología en particular. Cada vez es más común aplicar algunos principios de buenas prácticas como compartir materiales, datos y scripts de análisis, para que tanto los revisores como otros investigadores puedan entender, reanalizar, etc. nuestras investigaciones. Hay algunas organizaciones que han surgido para tratar de mejorar la colaboración, transparencia, y manera de trabajar, como el Psychological Science Accelerator, la Peer Reviewer’s Openness Initiative (PRO), o la Open Science Foundation. Una de las soluciones propuestas para resolver muchos de los problemas actuales pasa por los Registered reports. En estos se da una restructured submission timeline: Before collecting data, authors submit a study protocol containing their hypotheses, planned methods, and analysis pipeline, which undergoes peer review. La última evolución de los Registered Reports es la Peer Community in Registered Reports, la cual establece un sistema de revisión de RR global, independiente de las revistas. Además de los motivos científicos para trabajar de manera más transparente y reproducible, hay también motivos prácticos. Si trabajamos de manera reproducible, las modificaciones en tablas, gráficas, número de participantes o reanálisis son triviales. En este capítulo vamos a ver algunos pasos fundamentales para tender un workflow que permita y ayude a la reproducibilidad. 7.2 Proyectos de R-Studio El primer paso empieza por crear un proyecto de RStudio. Al usar proyectos, simplificamos varias cosas, haciendo automáticamente más fácil compartir nuestro trabajo con otras personas. Podéis leer algo más sobre esto aquí. 7.3 RMarkdown/Quarto, openscience y análisis reproducibles RMarkdown/Quarto son herramientas que nos permiten combinar texto formateado con código y resultados en un mismo documento (html, pdf, docx, …). Existe una evolución de Rmarkdown que reemplazará a Rmarkdown en el futuro, y que facilita la interoperabilidad entre R, Python, Julia, etc. llamada quarto. La diferencia esencial es que usaremos archivos .qmd en lugar de .Rmd, y que tendremos que instalar quarto en nuestro ordenador. Pero en general, resulta trivial convertir nuestros archivos Rmd a qmd (solo hay que renombrarlos). Aprovechando la potencia de estas herramientas, algunas personas han creado paquetes para preparar artículos en formato APA, o con las plantillas de decenas de editoriales. 7.4 Sintaxis, chunks de código, tipos de archivo La sintáxis básica de RMarkdown es sorprendentemente sencilla, como se puede ver más abajo. Eso si, lo que hay detrás es toda la potencia de latex, así que el cielo es el límite. Y como no, tenemos mucha ayuda: R Markdown cheatsheet R Markdown: The Definitive Guide Web oficial de Rmarkdown dentro de RStudio y quarto Resumiendo, tienes tres elementos básicos: 7.4.1 Cabecera YAML Cuando creas un documento .Rmd nuevo verás algo similar a lo siguiente en las primeras lineas: --- title: &quot;Untitled&quot; author: &quot;G&quot; date: &quot;6/1/2019&quot; output: pdf_document --- Esta es la cabecera YAML, en la cual se le pueden pasar parámetros para añadir un índice, cambiar formato, y muchas otras cosas. 7.4.2 Rmarkdown En el resto del documento (con la excepción de los chunks de código), el formato que usaremos será Rmarkdown. Su sintaxis es muy sencilla pero nada tolerante. Podéis ver las bases en la R Markdown cheatsheet. IMPORTANTE. Si algo no funciona como esperas: Añade saltos de linea entre párrafos. Añade dos espacios al final de las líneas. Añade un espacio después de #: MAL: #Título grande BIEN: # Título grande 7.4.3 Chunks de código Los chunks de código están delimitados por: En su interior, puedes usar código R como si estuvieras en un script de R normal. library(dplyr) myvariable = c(1, 2, 3) En la cabecera puedes añadir opciones. Hay una cantidad apabullante de opciones. Por ejemplo, en el siguiente chunk: {r nombre_chunk, eval=TRUE, include=TRUE, fig.height=10, fig.width=12, message=FALSE, warning=FALSE, cache=TRUE, results='asis'} eval=TRUE: Muestra el código include=TRUE: Corre el código fig.height=10: altura de los plots (en inches) fig.width=12: ancho de los plots (en inches) message=FALSE: NO muestres mensajes warning=FALSE: NO muestres warnings cache=TRUE: cachea el output del plot results='asis': muestra el output tal cual (importante cuando el output es en latex/pdf) Haciendo click en la herramienta de la derecha del chunk puedes controlar varios parámetros esenciales. TRUCO: Si tienes un chunk llamado setup al principio de tu documento .Rmd/.qmd, cada vez que reinicies RStudio y ejecutes código en cualquier parte de tu documento, ese bloque se ejecutara automaticamente. Esto es ideal para poner tus librerias, lectura de datos… Ejercicio básico RMarkdown Volvamos al archivo .Rmd que creamos antes. Hagamos lo siguiente: Dale formato de artículo científico, creando las siguientes secciones: Title Abstract Introducción Materials and Methods Participants Materials Results Experiment 1 Discussion Bibliography Pon texto de relleno dentro de cada sección. Para ello puedes usar la función stringi::stri_rand_lipsum(n_paragraphs = 1) del paquete {stringi}. Los chunks de código deberán ser similares a este: ``{r abstract, echo=FALSE, results=&#39;asis&#39;} cat(stringi::stri_rand_lipsum(n_paragraphs = 1)) `` Renderiza tu documento en formato PDF. El resultado del ejercicio anterior deberá ser un archivo pdf con la estructura general de un artículo científico. Puedes ver el archivo Rmd y su pdf resultante en data/files/07-markdown/. Si el botón knit no funciona, puedes renderizar el pdf usando: rmarkdown::render(\"data/files/07-markdown/ejercicio-basico.Rmd\") Ejercicio avanzado Usando una base propia, incluye en el documento .Rmd de antes: Una tabla de descriptivos. Una tabla con los resultados de un análisis sencillo (e.g. una regresión lineal). Podéis ver ejemplos de tablas de descriptivos o tablas de resultados inferenciales en el capítulo anterior. El resultado de este ejercicio deberá ser un archivo pdf como el que se puede ver en data/files/07-markdown/. De nuevo, si el botón knit no funciona, puedes renderizar el pdf usando: rmarkdown::render(\"data/files/07-markdown/ejercicio-basico.Rmd\") 7.5 Avanzado Puedes crear artículos en formato APA, añadir bibliografía a tus documentos facilmente, citar los paquetes de R que usas, etc. 7.5.1 Artículos APA con Papaja Preparar artículos en formato APA # remotes::install_github(&quot;crsh/papaja&quot;) install.packages(&quot;papaja&quot;) # Create new R Markdown file rmarkdown::draft( here::here(&quot;data&quot;, &quot;output&quot;, &quot;mymanuscript.Rmd&quot;), &quot;apa6&quot;, package = &quot;papaja&quot;, create_dir = FALSE, edit = FALSE) # Render manuscript rmarkdown::render( here::here(&quot;data&quot;, &quot;output&quot;, &quot;mymanuscript.Rmd&quot;), quiet = TRUE, clean = TRUE) Y no olvidemos el paquete {rticles}, que contiene plantillas de decenas de editoriales 7.5.2 Usar bibliografía Puedes incluir citas en tu documento facilmente con Rmarkdown o Quarto. Necesitaras un archivo .bib e incluirlo en el yaml inicial, por ejemplo: bibliography: name_file.bib. A partir de ahí, puedes citar artículos simplemente incluyendo Blah Blah [@wickham2015; @knuth1984]. o @knuth1984 says blah.. Para saber más: https://quarto.org/docs/authoring/footnotes-and-citations.html https://blog.rstudio.com/2020/11/09/rstudio-1-4-preview-citations/ https://rmarkdown.rstudio.com/authoring_bibliographies_and_citations.html https://www.r-bloggers.com/bibliography-with-knitr-cite-your-references-and-packages/ 7.5.3 Citar los paquetes que usamos ¿Debemos citar los paquetes que usamos? Respuesta corta, si Respuesta larga, la mayoría de los paquetes # grateful::cite_packages(all.pkg = FALSE, # out.format = &quot;rmd&quot;, # out.dir = &quot;dev&quot;) 7.5.4 Manejo de dependencias Usando un sistema de manejo de dependencias renv creamos un snapshot de las librerías usadas actualmente. Es muy importante para garantizar que nuestros scripts correran en el futuro. Instalamos renv: install.packages(\"renv\") Inicializamos el entorno local de un nuevo proyecto, con una librería privada de R renv::init() Trabajamos en el proyecto, instalando los paquetes que necesitemos Guardamos el estado de las librerías usadas en el proyecto en un lockfile (llamado renv.lock), renv::snapshot() Restauramos el estado de las librerías a partir del lockfile generado por renv::snapshot(). renv::restore() 7.5.5 Shortcuts! Alt+SHIFT+K: Ver shortcuts! CTRL+SHIFT+M: Pipe CTRL+SHIFT+A: Reformat code CTRL+I: Reindent lines 7.5.6 Estilo Es recomendable ser consistente en la manera de escribir código. Habitualmente se recomienda seguir una guía de estilo. Por ejemplo, Hadley Wickham’s Style guide o la guia de estilo del tidyverse. Bibliografía Guia de estilo del tidyverse Hadley Wickham’s Style guide targets Scheel, A. M., Schijen, M., &amp; Lakens, D. (in press). An excess of positive results: Comparing the standard Psychology literature with Registered Reports. Advances in Methods and Practices in Psychological Science. Xie, Y., Allaire, J. J., &amp; Grolemund, G. (2018). R Markdown: The Definitive Guide. CRC Press. https://bookdown.org/yihui/rmarkdown/ Yihui Xie (2018). bookdown: Authoring Books and Technical Documents with R Markdown https://bookdown.org/yihui/bookdown/markdown-syntax.html Mas cosas sobre reproducibilidad: Reproducibility project: Psychology Many labs 2 "],["control-de-cambios-con-git-y-github.html", "Capítulo 8 Control de cambios con Git y Github Dependencias 8.1 Git 8.2 Github 8.3 Clonar un repositorio existente 8.4 Crear un proyecto en RStudio asociado a Github Ejercicio Git-Github 8.5 Workflow Bibliografía", " Capítulo 8 Control de cambios con Git y Github Paquetes para este capítulo if (!require(&#39;afex&#39;)) install.packages(&#39;afex&#39;); library(&#39;afex&#39;) if (!require(&#39;correlation&#39;)) install.packages(&quot;correlation&quot;); library(&#39;correlation&#39;) if (!require(&#39;corrr&#39;)) install.packages(&#39;corrr&#39;); library(&#39;corrr&#39;) if (!require(&#39;dplyr&#39;)) install.packages(&#39;dplyr&#39;); library(&#39;dplyr&#39;) if (!require(&#39;DT&#39;)) install.packages(&#39;DT&#39;); library(&#39;DT&#39;) if (!require(&#39;ggraph&#39;)) install.packages(&#39;ggraph&#39;); library(&#39;ggraph&#39;) if (!require(&#39;here&#39;)) install.packages(&#39;here&#39;); library(&#39;here&#39;) if (!require(&#39;gtsummary&#39;)) install.packages(&#39;gtsummary&#39;); library(&#39;gtsummary&#39;) if (!require(&#39;knitr&#39;)) install.packages(&#39;knitr&#39;); library(&#39;knitr&#39;) if (!require(&#39;papaja&#39;)) install.packages(&quot;papaja&quot;); library(&#39;papaja&#39;) if (!require(&#39;parameters&#39;)) install.packages(&#39;parameters&#39;); library(&#39;parameters&#39;) if (!require(&#39;remotes&#39;)) install.packages(&#39;remotes&#39;); library(&#39;remotes&#39;) if (!require(&#39;renv&#39;)) install.packages(&quot;renv&quot;); library(&#39;renv&#39;) if (!require(&#39;report&#39;)) install.packages(&quot;report&quot;); library(&#39;report&#39;) if (!require(&#39;rticles&#39;)) install.packages(&#39;rticles&#39;); library(&#39;rticles&#39;) if (!require(&#39;see&#39;)) install.packages(&quot;see&quot;); library(&#39;see&#39;) if (!require(&#39;sjPlot&#39;)) install.packages(&#39;sjPlot&#39;); library(&#39;sjPlot&#39;) if (!require(&#39;stringi&#39;)) install.packages(&#39;stringi&#39;); library(&#39;stringi&#39;) if (!require(&#39;tinytex&#39;)) install.packages(&#39;tinytex&#39;); library(&#39;tinytex&#39;) if (!require(&#39;usethis&#39;)) install.packages(&#39;usethis&#39;); library(&#39;usethis&#39;) Dependencias Vamos a necesitar Git y Latex para poder trabajar: Instalar Git Ver instrucciones para Windows, Mac y Linux.   Importante: en el paso Adjusting your PATH environment en en Windows, selecciona Git from the command line and also from 3rd-party software 8.1 Git SOURCE: https://xkcd.com/1597/ Un segundo elemento que nos va a ayudar a trabajar en equipo, y a evitar problemas en proyectos relativamente complejos es el uso de un sistema de control de versiones como Git. Los proyectos de RStudio hacen especialmente sencillo usar algunas funcionalidades básicas de Git. Algunas referencias útiles: OhshitGit website Git in practice happygitwithr 8.2 Github SOURCE: github.githubassets.com Github es una plataforma web muy popular donde almacenar proyectos de programación que usa como motor. Muchos de los paquetes de R, el mismo RStudio, etc, tienen repositorios abiertos en Github. Una de las ventajas fundamentales de usar Github es que esta plataforma integra algunas herramientas para hacer más sencillo el control de versiones, como el pull request, que nos permite combinar ramas de proyectos sin apenas problemas. Github tiene un programa especial para estudiantes: https://education.github.com/ 8.3 Clonar un repositorio existente Algo que podemos hacer con todos los repositorios de Github es clonarlos localmente: Primero, copiamos la repository URL del repo de Github (ver imagen de abajo). Será algo similar a https://github.com/VUESTRO_NOMBRE_DE_USUARIO/NOMBRE_REPOSITORIO.git Segundo, en RStudio: File &gt; New Project &gt; Version Control &gt; Git 8.4 Crear un proyecto en RStudio asociado a Github Podemos empezar creando un repositorio en Github, para después clonarlo localmente. Si necesitamos crear un personal access token, podemos consultar la ayuda de Github. # Puedes usar: usethis::create_github_token() # O manualmente, como los animales: # En tu página de Github, haz click en tu icon (arriba a la derecha) -&gt; Settings -&gt; Developer settings -&gt; Personal access tokens -&gt; [Generate new token] -&gt; Give gist, repo and workflow permissions. Versión simple [recomendado] En Github: Creamos repositorio nuevo Initialize this repository with a README Clonar repositorio Alternativamente, si ya tenemos un proyecto de RStudio, podemos crear un repositorio de Github asociado automágicamente. Usando el terminal Crear local git repo (solo si no lo tenemos aún): usethis::use_git() (se crea una carpeta oculta llamada .git) Crear Github Token: usethis::create_github_token() Insertar token en archivo .Renviron: usethis::edit_r_environ() Crear Github repo: usethis::use_github() Empujar el repositorio local a Github: git push --set-upstream origin master Ejercicio Git-Github Crea un proyecto de RStudio Abre una cuenta en Github y/o haz login Sigue los pasos de arriba para crear un repositorio público y asociarlo a un repositorio local 8.5 Workflow SOURCE: nvie.com Hay diferentes filosofias sobre cual es la mejor manera de trabajar con Git. En este post por Vincent Driessen podeis ver una explicación bien detallada, complementada con imagenes como la que se ve a continuación. El modelo básico implica la existencia de dos ramas. Una master (“producción”), que siempre debe funcionar, y una develop (para desarrollo), donde experimentamos, rompemos cosas, etc. Podeis ver un manual super completo llamado Happy Git and GitHub for the useR elaborado por Jenny Bryan, Jim Hester, entre otros. 8.5.1 Modelo básico En RStudio podemos trabajar gráficamente, Usando el panel Git. Usando el entorno gráfico Empezamos en la rama master: Pull : nos aseguramos que nuestro repositorio local esta actualizado Branch : Creamos nueva rama llamada development Hacemos cambios en nuestros scripts Commit : Commiteamos los cambios Push : subimos la rama a Github Pull request (En Github): Compare &amp; Pull request Pull : nos aseguramos que nuestro repositorio local esta actualizado Como hacerlo usando el terminal Pull: nos aseguramos que nuestro repositorio local esta actualizado: git pull Branch: Creamos nueva rama llamada development: git checkout -b development Hacemos cambios en nuestros scripts Commit: Commiteamos los cambios Añadimos archivos: git add foo.txt Hacemos el commit: git commit --message \"A commit message\" Push: subimos la rama a Github: git push origin development Pull request (En Github): Compare &amp; Pull request Pull: nos aseguramos que nuestro repositorio local esta actualizado: git pull 8.5.2 Pull request en 3 + 1 sencillos pasos Después de hacer el push de arriba, al entrar en nuestro repositorio deberíamos ver algo parecido a lo siguiente (si no lo vemos, ir a branches). La única dificultad es saber cual de los botones verdes apretar: 8.5.2.1 Paso 1. Compare &amp; pull request 8.5.2.2 Paso 2. Create pull request 8.5.2.3 Paso 3. Merge pull request Borrar rama antigua Ejercicio Nuestro primer commit Usando el proyecto de RStudio de antes, crea una rama nueva llamada development Crea un nuevo archivo en formato .Rmd: Haz un commit de ese archivo y subelo (push) a Github (asegurate que esta allá!). No olvides hacer un pull! Ahora haz cambios en el archivo, commitealos, súbelos, y sincroniza tu repo local Bibliografía Guia de estilo del tidyverse Hadley Wickham’s Style guide Happy Git and GitHub for the useR targets Scheel, A. M., Schijen, M., &amp; Lakens, D. (in press). An excess of positive results: Comparing the standard Psychology literature with Registered Reports. Advances in Methods and Practices in Psychological Science. Xie, Y., Allaire, J. J., &amp; Grolemund, G. (2018). R Markdown: The Definitive Guide. CRC Press. https://bookdown.org/yihui/rmarkdown/ Yihui Xie (2018). bookdown: Authoring Books and Technical Documents with R Markdown https://bookdown.org/yihui/bookdown/markdown-syntax.html Mas cosas sobre reproducibilidad: Reproducibility project: Psychology Many labs 2 "],["experimentos-reproducibles.html", "Capítulo 9 Experimentos reproducibles 9.1 Pipeline experimental abierto y reproducible 9.2 Como crear un protocolo experimental 9.3 Como simular datos 9.4 Como preparar datos 9.5 Como crear un reporte dentro del jsPsychHelpeR 9.6 Como crear una nueva tarea 9.7 Como preparar datos para una tarea nueva", " Capítulo 9 Experimentos reproducibles En el CSCN usamos distintas tecnologías para desarrollar experimentos. Algunos ejemplos son Psychopy, Qualtrics, Limesurvey, jsPsych, Gorilla, etc. Cada una de estas tiene ventajas y desventajas, y en general es importante tener en cuenta aspectos pragmáticos a la hora de adoptar una u otra tecnología (costo económico, tipo de experimento [EEG/conductual, laboratorio/online]). Algunos de nosotros hemos optado principalmente por jsPsych para experimentos conductuales por tratarse de una librería javascript de código abierto, basada en tecnologías web standard, y que puede ser usada online y offline. Dado que en el CSCN disponemos de servidor propio, los costos habituales de hosting no se aplican. En los últimos años, hemos empezado a trabajar en un conjunto de herramientas (jsPsychR) para crear experimentos usando la librería jsPsych con jsPsychMaker, simular participantes con jspsychMonkeys y estandarizar y automatizar la preparación de datos con jsPsychHelpeR. Nuestro objetivo final es tener un gran número de tareas disponibles para ser usadas en el repositorio de jsPsychMaker. Cada una de estas tareas funcionará en jspsychMonkeys para crear participantes virtuales. Cada tarea tendrá un script hermano en jsPsychHelpeR para automatizar la preparación de datos. Puedes consultar las tareas disponibles en el manual de jsPsychR para más detalles. 9.1 Pipeline experimental abierto y reproducible Replicar el experimento a partir de una publicación no es trivial. Una de las fortalezas fundamentales de este sistema es que compartir y reproducir un experimento y los análisis asociados se convierte en algo muy sencillo. Además, todos los componentes del proceso son código abierto, lo que permite que revisores, colaboradores, etc. puedan verificar que no hay errores en el código. Con este sistema podremos crear fácilmente el código del experimento, simular datos y preparar datos de manera casi automática (incluyendo anonimización). El output del sistema es estandarizado, lo que implica que los nombres de las variables y la estructura de datos son predecibles. Finalmente, la generación de gráficas, tablas, reportes y los análisis son reproducibles. 9.2 Como crear un protocolo experimental En el manual de jsPsychR puedes ver las tareas disponibles junto con una breve descripción de cada una de ellas. Alternativamente, puedes ver el documento con todos los detalles de las tareas disponibles. Si quieres consultar los scripts de las tareas puedes hacerlo en la carpeta canonical_protocol/ del repositorio de jsPsychMaker. Sigue los siguientes 3 pasos para crear tu protocolo: Descargamos el proyecto de RStudio jsPsychMaker: usethis::use_course(url = &quot;gorkang/jsPsychMaker&quot;, destdir = &quot;~/Downloads/&quot;) # Select YES to delete zip En a la carpeta canonical_protocols: Editamos config.js para indicar las tareas que queremos usar en la sección // ORDER OF TASKS Alternativamente, podemos usar la jsPsychMaker Shiny APP para crear nuestro archivo config.js (recuerda copiar el archivo config.js a la carpeta de tu protocolo) Finalmente, en config.js revisamos la sección // Main parameters para asegurarnos que todo esta bien (e.g. online = false;) El experimento esta listo para ser utilizado localmente. Podemos hacerlo ejecutando index.html Ejercicio 1 Ve al ejercicio 1 del siguiente capítulo 9.3 Como simular datos El sistema para simular participantes utiliza Selenium dentro de un contenedor de Docker. En Linux es trivial su uso, pero en Windows su configuración puede ser más compleja. Puedes seguir los siguientes pasos, pero si no tienes una instalación funcional de Docker que utilice contenedores Linux, el sistema fallará. En ese caso, quedan las siguientes opciones: Correr un par de participantes manualmente Usar un ordenador con Linux o crear una partición Linux Crear una máquina virtual linux desde la que simular participantes. Puedes usar Virtualbox para instalar Ubuntu. Una vez dentro, tendrás que seguir los pasos del manual para prepara el sistema para correr R y RStudio De nuevo, podemos hacer esto en 3 pasos: Instalamos docker (descarga de ~ 500MB): Windows, o Apple Ubuntu: sudo apt install docker Descargamos el proyecto de RStudio jsPsychMonkeys. En la Consola de RStudio: usethis::use_course(url = &quot;gorkang/jsPsychMonkeys&quot;, destdir = &quot;~/Downloads/&quot;) # Select YES to delete zip Abrimos run.R y seguimos las instrucciones. 9.4 Como preparar datos Cada tarea de jsPsychMaker debería tener un script hermano en jsPsychHelpeR para automatizar la preparación de datos. Una vez tengamos nuestro protocolo listo para el pilotaje, con una función de jsPsychHelpeR crearemos todo lo necesario para que la preparación de datos corra automáticamente. Una vez más, nuestros 3 pasos: Descargamos el proyecto de RStudio jsPsychHelper: usethis::use_course(url = &quot;gorkang/jsPsychHelper&quot;, destdir = &quot;~/Downloads/&quot;) # Select YES to delete zip #Si es la primera vez que abrimos jsPsychHelper: source(&quot;setup/setup.R&quot;) Abrimos run.R y seguimos las instrucciones. En esencia: Ponemos datos en la carpeta data/ID_PROTOCOLO (reemplazar ID_PROTOCOLO por el número de nuestro protocolo. Si lo desconoces, es el primer número de tus archivos de datos, antes del “_“). Correr las dos líneas de abajo, cambiando el 999 por tu número de protocolo: invisible(lapply(list.files(&quot;./R&quot;, full.names = TRUE, pattern = &quot;.R$&quot;), source)) run_initial_setup(pid = 999, download_files = FALSE, download_task_script = FALSE) targets::tar_make() Para ver el data frame final listo para el análisis # List available objects targets::tar_objects() # Load DF_analysis file targets::tar_load(DF_analysis) # See DF_analysis dataframe DF_analysis 9.5 Como crear un reporte dentro del jsPsychHelpeR Dentro del proyecto en el que has preparado los datos, simplemente tienes que: Abre la plantilla report_analysis.Rmd: rstudioapi::navigateToFile(\"Rmd/report_analysis.Rmd\") En el archivo _targets.R, en la sección análisis, descomenta las dos líneas de abajo # tar_render(report_analysis, &quot;Rmd/report_analysis.Rmd&quot;, # output_file = paste0(&quot;../outputs/reports/report_analysis.html&quot;)), Finalmente, puedes trabajar en report_analysis.Rmd tal y como hiciste en el capítulo anterior. Cuando acabes, o quieras probar si todo funciona bien, solo tienes que correr targets::tar_make() desde la Consola. Ejercicio FINAL Ya estáis listas/os para enfrentaros al ejercicio FINAL 9.6 Como crear una nueva tarea Tenemos un buen número de tareas disponibles para usar (puedes verlas en el manual de jsPsychR). Si la tarea que necesitas no está disponible, puedes crearla usando una de las plantillas que encontrarás en canonical_protocol_clean. Están preparadas para que puedas modificarlas fácilmente y crear tu propia tarea. Alternativamente, también puedes usar como punto de partida las tareas que tenemos en jsPSychMaker. Veamos como usar las plantillas de canonical_protocol_clean para crear nuestra tarea: Descargamos el proyecto de RStudio jsPsychMaker. En la Consola de RStudio: usethis::use_course(url = &quot;gorkang/jsPsychMaker&quot;, destdir = &quot;~/Downloads/&quot;) # Select YES to delete zip Ve a la carpeta canonical_protocols_clean del proyecto RStudio jsPsychMaker En la carpeta tasks tienes tareas que empiezan por SHORNAMETASK, por ejemplo: SHORNAMETASKmultichoice.js SHORNAMETASKslider.js Elige el tipo de tarea que quieres, y modifica el archivo para adaptar las instrucciones y los ítems. 9.6.1 Como adaptar la tarea 9.6.1.1 Nombre de la tarea Lo primero es elegir el nombre de la tarea, para ello, recuerda: Generalmente será un acrónimo, breve, por ejemplo, EA. El nombre NO debe contener espacios ni caracteres extraños. NO: (?!“#$%&amp;/=?¡¿;:_.,-). Puedes hacer una mínima verificación con esta función: janitor::make_clean_names(\"NOMBRE tarea!\", case = \"upper_lower\") : NOMBREtarea Deber ser un nombre UNICO. Comprueba que no existe en: Tareas jsPsychR NUEVAS Tareas jsPsychR Renombra el archivo para que coincida con el nombre de tu tarea 9.6.1.2 Instrucciones Puedes tener tantas páginas de instrucciones como desees, simplemente, modifica la variables pages: [] para que contenga lo que necesitas. Cada página de instrucciones estará separada por ,: pages: [`pagina1`, `pagina2`, `pagina3`] Para darle formato tendrás que usar lenguaje HTML. var instruction_screen_experiment = { type: &#39;instructions&#39;, pages: [`&lt;p&gt;&lt;left&gt;&lt;b&gt;&lt;big&gt;NAME TASK&lt;/big&gt;&lt;/b&gt;&lt;br/&gt;&lt;br&gt; Instrucciones detalladas de tarea con slider&lt;br&gt;&lt;br&gt; Muchas gracias por tu colaboración.&lt;/p&gt;`, `&lt;p&gt;Pagina 2 de instrucciones. &lt;BR&gt;&lt;BR&gt;Dale a siguiente para empezar la tarea&lt;/p&gt;`], data:{trialid: &#39;SHORNAMETASKslider_000&#39;, procedure: &#39;SHORNAMETASKslider&#39;}, show_clickable_nav: true, on_trial_start: function(){ bloquear_enter = 0; } }; 9.6.1.3 Items En las plantillas encontrarás dos ítems. Si necesitas mas de dos: Copia la definición del ítem var question01 = {…}, más la línea SHORNAMETASKslider.push(...) tantas veces como ítems necesites Incrementa en 1 los números de question0X y SHORNAMETASKslider_00X para que sean correlativos Fijate que question0X aparece en dos lugares. En el ejemplo de abajo: var question01 = { SHORNAMETASKslider.push(question01); Modifica el contenido de stimulus: en los ítems. Modifica las labels o options Recuerda que estamos usando javascript. Los vectores son: labels: [\"una cosa\", \"otra cosa\"] Puedes usar buscar y reemplazar todos para hacerlo de un solo paso. Cada uno de los plugins de jsPsych tiene múltiples parámetros que podemos definir. Puedes ver la ayuda de jsPsych aquí. Por ejemplo, si se trata de un slider, modificando la variable labels: [] controlarás los anclajes de la escala. Si se trata de un multichoice, podrás establecer las alternativas con la variable options: []. //Un item var question01 = { type: &#39;html-slider-response&#39;, stimulus: &quot;&lt;div class=&#39;justified&#39;&gt;Una pregunta&lt;/div&gt;&lt;/br&gt;&quot;, require_movement:true, required: true, min: 0, max: 4, slider_width: 500, slider_start: 2, step: 1, labels: [&quot;No me describe bien&quot;, &quot;Me describe muy bien&quot;], button_label: &quot;Siguiente&quot;, data: {trialid: &#39;SHORNAMETASKslider_001&#39;, procedure: &#39;SHORNAMETASKslider&#39;} }; SHORNAMETASKslider.push(question01); 9.6.1.4 Task name &amp; trialid’s Por último, tienes que hacer una cosa muy sencilla: Buscar y reemplazar (CONTROL + F) todas las instancias de SHORNAMETASKslider o SHORNAMETASKmultichoice por el nombre de tu tarea. 9.6.1.5 Probar la tarea Ve a config.js y haz lo siguiente: cambia la línea: randomly_ordered_tasks_1 = ['SHORNAMETASKslider', 'SHORNAMETASKmultichoice']; por randomly_ordered_tasks_1 = ['NOMBREtarea']; Asegurate que online = false; Ahora ya puedes abrir el archivo index.html en tu navegador Es recomendable usar el modo incógnito (en Google Chrome: CONTROL + ALT + N) 9.6.1.6 Corrección de la tarea Para cada tarea en jsPsychMaker, aspiramos a tener un script de corrección en jsPsychHelpeR. Si has creado una nueva tarea, por favor, completa la información de NUEVAS Tareas jsPsychR para que podamos integrar tu tarea en el repositorio común. Ejercicio Crear nueva tarea Ve al ejercicio 2 del siguiente capítulo 9.7 Como preparar datos para una tarea nueva Tendremos que crear primero el script de preparación para la nueva tarea. En jsPsychHelpeR tienes una tarea que te ayudará con esto. Si has completado los datos en NUEVAS Tareas jsPsychR, el proceso será muy sencillo. Descargamos el proyecto de RStudio jsPsychHelper. En la Consola de RStudio: usethis::use_course(url = &quot;gorkang/jsPsychHelper&quot;, destdir = &quot;~/Downloads/&quot;) # Select YES to delete zip #Si es la primera vez que abrimos jsPsychHelper: source(&quot;setup/setup.R&quot;) Creamos el nuevo archivo prepare_NOMBRETAREA(): invisible(lapply(list.files(&quot;./R&quot;, full.names = TRUE, pattern = &quot;.R$&quot;), source)) create_new_task(short_name_task = &quot;NAMETASK&quot;, get_info_googledoc = TRUE) Esta función: Creará un nuevo archivo de corrección a partir de la plantilla Lo adaptará para que funciones con el nombre que le has asignado a la tarea Abrirá el archivo para que lo puedas editar Si hay información en todas las pestañas de NUEVAS Tareas jsPsychR, en la consola se mostrará información lista para copiar y pegar en tu script sobre: nombres de dimensiones ítems para cada dimensión cálculo de dimensiones ítems invertidos conversión numérica "],["ejercicios-7.html", "Capítulo 10 Ejercicios 10.1 Ejercicio 1 10.2 Ejercicio FINAL", " Capítulo 10 Ejercicios 10.1 Ejercicio 1 Diseña un sencillo experimento: Debes usar alguna de las tareas que aparecen en en manual (máximo 2) La duración total del “experimento” no debería superar los 5 minutos Tendrás que hacer una breve presentación contándonos el diseño experimental. Notas (tareas jsPsychMaker): Usa un máximo de 2 tareas 10.2 Ejercicio FINAL El profesor os ayudará a simular datos para tu experimento con jsPsychMonkeys. Una vez tengamos los datos: Crearemos un proyecto de jsPsychHelpeR que procesará los datos automáticamente Crearemos un reporte en Rmd como parte del pipeline de jsPsychHelpeR donde incluiremos: Tabla/s con descriptivos Gráfico/s con resultado Tabla/s con resultados de un análisis sencillo Una frase reportando resultados del análisis (usando Texto inline de gtsummary) El proyecto tiene que correr en cualquier computador. IMPORTANTE La nota del workshop estará basada en el resultado de esta tarea. Tendréis que compartir el proyecto completo con el profesor, y él deberá poder correrlo y ver como resultado el reporte en pdf incluyendo los elementos detallados arriba. Notas (simulación datos): El profesor os ayudara con esto y/o os compartirá los datos (procesamiento datos): Ver el manual de jsPsychR "],["paquetes-usados.html", "Paquetes usados References", " Paquetes usados En la documentación y ejercicios de este workshop se usaron los paquetes que se pueden ver abajo. Este listado se creó automáticamente usando {grateful}: base (R Core Team 2019) knitr (Xie 2014) stargazer (Hlavac 2018) rticles (Allaire et al. 2019) renv (Ushey 2019) remotes (Hester et al. 2019) papaja (Aust and Barth 2018) easystats (Lüdecke and Makowski 2019) estimate (Makowski and Lüdecke 2019b) see (Lüdecke et al. 2019) report (Makowski et al. 2019) correlation (Makowski 2019) parameters (Makowski and Lüdecke 2019a) bayestestR (Makowski, Ben-Shachar, and Lüdecke 2019) performance (Lüdecke, Makowski, and Waggoner 2019) insight (Lüdecke, Waggoner, and Makowski 2019) corrr (Jackson, Cimentada, and Ruiz 2019) afex (Singmann et al. 2019) lme4 (Bates et al. 2015) Matrix (Bates and Maechler 2019) hexbin (Carr et al. 2019) FFTrees (Phillips et al. 2018) caret (Jed Wing et al. 2019) lattice (Sarkar 2008) janitor (Firke 2019) gsheet (Conway 2016) DT (Xie, Cheng, and Tan 2019) writexl (Ooms 2018) readODS (Schutten et al. 2018) here (Müller 2017) haven (Wickham and Miller 2019) readxl (Wickham and Bryan 2019) plotly (Sievert 2018) ggridges (Wilke 2018) ggthemes (Arnold 2019) gganimate (Pedersen and Robinson 2019) gapminder (Bryan 2017) esquisse (Meyer and Perrier 2019) cowplot (Wilke 2019) forcats (Wickham 2019a) stringr (Wickham 2019b) dplyr (Wickham et al. 2019) purrr (Henry and Wickham 2019) readr (Wickham, Hester, and Francois 2018) tidyr (Wickham and Henry 2019) tibble (Müller and Wickham 2019) ggplot2 (Wickham 2016) tidyverse (Wickham 2017) References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
