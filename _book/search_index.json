[
["index.html", "R para preparación y visualización de datos Doctorado en Neurociencia Social y Cognición Introducción Objetivos Como empezar Bibliografía", " R para preparación y visualización de datos Doctorado en Neurociencia Social y Cognición Gorka Navarrete, ORCID: 0000-0001-7678-8656 Introducción El seminario estará centrado en el uso de R para la preparación y visualización de datos, además de la generación de reportes reproducibles. R es un lenguaje de programación abierto, con una gran comunidad orientada al trabajo, visualización y modelado de datos en contextos científicos y técnicos. Nos introduciremos de manera práctica a R, resolviendo problemas que encontramos habitualmente durante el quehacer científico, focalizándonos en el trabajo abierto, colaborativo y reproducible. Objetivos Dar las herramientas básicas a los alumnos para que puedan trabajar de manera autónoma con R y RStudio para el proceso de importación, transformación, visualización y reporte de datos. Al finalizar el curso los alumnos serán capaces de: Importar archivos de datos, transformar los datos, crear nuevas variables. Realizar análisis de datos exploratorios, visualizar distribuciones y comparar grupos. Generar reportes reproducibles con RMarkdown. Como empezar Si ya has completado los pasos indicados en Preparando nuesto sistema, puedes lanzar el siguiente código en tu ordenador para descargar los materiales del curso: if (!require(&#39;usethis&#39;)) install.packages(&#39;usethis&#39;); library(&#39;usethis&#39;) usethis::use_course(&quot;gorkang/R_preparacion_visualizacion_datos&quot;) Bibliografía Bryan, J., &amp; Hester, J. What They Forgot to Teach You About R. https://whattheyforgot.org/ Wickham, H., &amp; Grolemund, G. (2016). R for data science: import, tidy, transform, visualize, and model data. O’Reilly Media, Inc. https://r4ds.had.co.nz/ Wickham, H. (2014). Advanced r. Chapman and Hall/CRC. https://adv-r.hadley.nz/ Xie, Y., Allaire, J. J., &amp; Grolemund, G. (2018). R Markdown: The Definitive Guide. CRC Press. https://bookdown.org/yihui/rmarkdown/ Yihui Xie (2018). bookdown: Authoring Books and Technical Documents with R Markdown https://bookdown.org/yihui/bookdown/markdown-syntax.html "],
["preparando-sistema.html", "Preparando nuestro sistema 0.1 Empezando en A-B-C 0.2 Algo más sobre la instalación de paquetes Bibliografía", " Preparando nuestro sistema 0.1 Empezando en A-B-C Para poder iniciar el workshop necesitamos tener R y RStudio instalados, además de algunas librerías. Para tener un sistema funcional, completa los pasos A, B y C. Si ya tienes R y Rstudio instalados (recientemente), puedes pasar directamente al paso (C). (A) Instalar R R, es un lenguaje de programación especializado en el computación estadística y visualización de datos. Es recomendable tener instalada la última versión de R. Puedes usar uno de los enlaces siguientes: Windows: Descargar e instalar R para Windows Mac: Descargar e instalar R para Mac Ubuntu Linux: más detalles en la web de R. En un terminal: sudo apt-get install r-base (B) Instalar RStudio RStudio es un entorno integrado de desarrollo (IDE) para la programación R. Descargar e instalar RStudio. Una vez descargado e instalado, abre RStudio. Deberías ver algo parecido a lo siguiente: (C) Paquetes para el workshop Usaremos un buen numero de paquetes en el workshop. Hay algunos meta-paquetes que simplifican la instalación de múltiples paquetes (e.g. pacman, pak, …), pero en este caso vamos a usar una versión casera. Copia y pega el código de abajo y ejecútalo [tecla ENTER] en la consola de RStudio. El proceso de instalación requiere Internet y tardará un buen rato. list_of_packages = c(&quot;bookdown&quot;, &quot;corrplot&quot;, &quot;cowplot&quot;, &quot;esquisse&quot;, &quot;gapminder&quot;, &quot;ggpubr&quot;, &quot;ggridges&quot;, &quot;ggthemes&quot;, &quot;hrbrthemes&quot;, &quot;janitor&quot;, &quot;knitr&quot;, &quot;plotly&quot;, &quot;psych&quot;, &quot;remotes&quot;, &quot;stringr&quot;, &quot;tictoc&quot;, &quot;tidyverse&quot;, &quot;usethis&quot;, &quot;yarrr&quot;) new_packages &lt;- list_of_packages[!(list_of_packages %in% installed.packages()[,&quot;Package&quot;])] if (length(new_packages)) install.packages(new_packages, dependencies = TRUE) 0.2 Algo más sobre la instalación de paquetes Los paquetes de R son una colección de funciones, datos y documentación que amplían las capacidades básicas de R. En 2019 el numero de paquetes en R-cran ha superado los 14,000 (ver este buscador de paquetes). Gran parte de las funciones y paquetes que utilizaremos en este workshop se encuentran contenidas en el meta-paquete “tidyverse” (este es un paquete de paquetes). Ya lo instalamos en (C), pero si quisieras instalarlo solo tendrías que ejecutar la siguiente linea en la consola de RStudio ((1) en la imagen de arriba): install.packages(&quot;tidyverse&quot;) Para instalar otro paquete diferente de “tidyverse”, remplaza su nombre entre comillas dentro de la función: install.packages(&quot;NOMBRE_DE_PAQUETE&quot;). Una vez instalado un paquete, no es necesario volver hacerlo, a menos que reinstales R. 0.2.1 Cargar paquetes Las funciones, datos y documentación dentro de nuestros paquetes no podrán ser utilizadas hasta que se carguen en R (en realidad también pueden ser llamadas usando su referencia absoluta ::, por ejemplo: dplyr::tibble(columna = 1). La estructura de lo anterior es: nombre_paquete::nombre_de_funcion(parametros)). Una vez instalados, para cargar los paquetes se usa la función library(): library(tidyverse) 0.2.2 Todo en uno El siguiente código simplifica lo anterior. Comprueba que el paquete esta instalado; Si no se encuentra instalado, lo instala. Finalmente lo carga. if (!require(&#39;tidyverse&#39;)) install.packages(&#39;tidyverse&#39;); library(&#39;tidyverse&#39;) Para instalar múltiples paquetes, podemos repetir la linea de mas arriba tantas veces como sea necesaria, o usar una versión algo mas sofisticada como el código del apartado (C): if (!require('tidyverse')) install.packages('tidyverse'); library('tidyverse') if (!require('bookdown')) install.packages('bookdown'); library('bookdown') ... 0.2.3 Instalar paquetes de Github En ocasiones querremos instalar directamente la versión en desarrollo del paquete desde Github. Para eso podemos usar la función install_github del paquete remotes. Por ejemplo, para instalar el paquete {renv} desde su repositorio de Github: if (!require('remotes')) install.packages('remotes'); library('remotes') remotes::install_github(&quot;rstudio/renv&quot;) Bibliografía Algunos de los manuales que vamos a usar para el workshop son los siguientes: Wickham, H., &amp; Grolemund, G. (2016). R for data science: import, tidy, transform, visualize, and model data. O’Reilly Media, Inc. https://r4ds.had.co.nz/ Xie, Y., Allaire, J. J., &amp; Grolemund, G. (2018). R Markdown: The Definitive Guide. CRC Press. https://bookdown.org/yihui/rmarkdown/ Bryan, J., &amp; Hester, J. What They Forgot to Teach You About R. https://whattheyforgot.org/ "],
["introduccion-a-r-y-visualizacion-de-datos.html", "Capítulo 1 Introducción a R y visualización de datos 1.1 Introducción: porque la visualización de datos es importante 1.2 Por qué R? 1.3 Visualización de datos con ggplot2 1.4 Visualización interactiva 1.5 Ejercicios Bibliografía", " Capítulo 1 Introducción a R y visualización de datos Paquetes para este capítulo if (!require(&#39;cowplot&#39;)) install.packages(&#39;cowplot&#39;); library(&#39;cowplot&#39;) if (!require(&#39;esquisse&#39;)) install.packages(&#39;esquisse&#39;); library(&#39;esquisse&#39;) if (!require(&#39;gapminder&#39;)) install.packages(&#39;gapminder&#39;); library(&#39;gapminder&#39;) if (!require(&#39;gganimate&#39;)) devtools::install_github(&#39;thomasp85/gganimate&#39;); library(&#39;gganimate&#39;) if (!require(&#39;ggplot2&#39;)) install.packages(&#39;ggplot2&#39;); library(&#39;ggplot2&#39;) if (!require(&#39;ggthemes&#39;)) install.packages(&#39;ggthemes&#39;); library(&#39;ggthemes&#39;) if (!require(&#39;ggridges&#39;)) install.packages(&#39;ggridges&#39;); library(&#39;ggridges&#39;) if (!require(&#39;hrbrthemes&#39;)) install.packages(&#39;hrbrthemes&#39;); library(&#39;hrbrthemes&#39;) if (!require(&#39;plotly&#39;)) install.packages(&#39;plotly&#39;); library(&#39;plotly&#39;) if (!require(&#39;tidyverse&#39;)) install.packages(&#39;tidyverse&#39;); library(&#39;tidyverse&#39;) 1.1 Introducción: porque la visualización de datos es importante “These 13 datasets (the Datasaurus, plus 12 others) each have the same summary statistics (x/y mean, x/y standard deviation, and Pearson’s correlation) to two decimal places, while being drastically different in appearance.” (Matejka, J., &amp; Fitzmaurice, G., 2017) SOURCE: https://www.autodeskresearch.com/publications/samestats 1.1.1 Porque la visualización de datos es importante - ejemplo del mundo real Este ejemplo viene de un experimento que realizamos junto con Carlos Santamaría hace algún tiempo. Presentamos una tarea sobre cálculo de probabilidades en un contexto real. Nuestros participantes estaban entrando a un examen para convertirse en trabajadores del estado. La historia real tiene algunos matices, pero simplificando, digamos que la materia para el examen eran unos 80 temas. Las personas generalmente no podían estudiar con profundidad todos los temas (o sabían que esa no era la estrategia óptima), así que se concentraban en un subconjunto de esos temas (e.g. 30 de 80). En el examen, se seleccionaban al azar 5 de estos temas, y las personas tenían que elegir uno de ellos para desarrollar. Abajo se puede ver como cambia la probabilidad de que uno de los temas estudiados aparezca dentro de los 5 seleccionados al azar. Con 30 temas estudiados (de los 80 totales), la probabilidad de que uno de ellos salga en la prueba es del 91%. Si estudiáramos 47, subiríamos a una probabilidad del 99%. En el experimento le preguntamos a las personas por la probabilidad de que les aparezca alguno de los temas que han estudiado en la prueba. Comparamos las siguientes dos preguntas: ¿Cuál es la probabilidad de que salga uno de los temas que has estudiado? ¿Cuál es la probabilidad de que no salga ninguno de los temas que has estudiado? Miramos el error promedio en función de la pregunta (cuanto se han alejado de la probabilidad correcta), y vemos que nuestra manipulación ha tenido un efecto considerable: # Leemos datos DF = read_csv( here::here(&quot;data&quot;, &quot;files&quot;, &quot;01-visualizacion-importante.csv&quot;)) %&gt;% mutate(Question = as.factor( case_when(Question_p_of == 0 ~ &quot;p (salga uno)&quot;, Question_p_of == 1 ~ &quot;p (no salga ninguno)&quot;))) # Promedio por condicion DF %&gt;% group_by(Question) %&gt;% summarise(Error_promedio = mean(Error), SD = sd(Error, na.rm = TRUE), N = n()) ## # A tibble: 2 x 4 ## Question Error_promedio SD N ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 p (no salga ninguno) -30.7 20.0 31 ## 2 p (salga uno) 4.02 35.8 31 Hay una diferencia notable entre condiciones. Pasamos de un error promedio del -30.7% a tan solo 4%, simplemente cambiando la pregunta. Hagamos un sencillo análisis de regresión para ver si la diferencia es significativa, y cuanta varianza explica nuestro modelo. # Modelo de regresion modelo_regresion = lm(Error ~ Question, DF) # Resultados summary(modelo_regresion) ## ## Call: ## lm(formula = Error ~ Question, data = DF) ## ## Residuals: ## Min 1Q Median 3Q Max ## -53.516 -15.758 -2.758 25.984 70.742 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -30.742 5.212 -5.899 1.81e-07 *** ## Questionp (salga uno) 34.758 7.370 4.716 1.48e-05 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 29.02 on 60 degrees of freedom ## Multiple R-squared: 0.2704, Adjusted R-squared: 0.2583 ## F-statistic: 22.24 on 1 and 60 DF, p-value: 1.479e-05 # Histograma de los residuos hist(modelo_regresion$residuals) # Supuesto de normalidad de residuales shapiro.test(modelo_regresion$residuals) ## ## Shapiro-Wilk normality test ## ## data: modelo_regresion$residuals ## W = 0.96215, p-value = 0.0532 Todo es hermoso. Tenemos un efecto claramente significativo de la pregunta (y con un R2-ajustado de .258, no está nada mal), y además, nuestro modelo no incumple el supuesto de normalidad de residuos (por los pelos!). Preparamos un plot con promedios y barras con error standard para nuestro paper: # Plot para publicación plot_inicial = ggplot(DF, aes(Question, Error, fill = Question)) + stat_summary( fun.y = mean, geom = &quot;point&quot;, size = 4, color = &quot;darkgrey&quot;) + stat_summary(geom = &quot;errorbar&quot;, fun.data = mean_se, position = &quot;dodge&quot;, color = &quot;black&quot;, width = .2) + scale_y_continuous(limits = c(-50, 50), breaks = seq(-50, 50, 10)) + theme_minimal(base_size = 12) + theme(legend.position = &quot;none&quot;) plot_inicial Estamos listos para escribir nuestro paper. Solo por curiosidad, veamos boxplots de los dos grupos. Mmmm… hay algo extraño: # Boxplots por condición ggplot(DF, aes(Question, Error, color = Question, group = Question)) + geom_boxplot(alpha = .5) + theme_minimal() + scale_y_continuous(limits = c(-50, 50), breaks = seq(-50, 50, 10)) + labs(x = &quot;What is the probability of x?&quot;) Volvemos a extraer descriptivos… pero esta vez incluimos la mediana. # Promedio y mediana por condicion DF %&gt;% group_by(Question) %&gt;% summarise(Error_promedio = mean(Error), Error_mediana = median(Error), SD = sd(Error, na.rm = TRUE), N = n()) ## # A tibble: 2 x 5 ## Question Error_promedio Error_mediana SD N ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 p (no salga ninguno) -30.7 -37 20.0 31 ## 2 p (salga uno) 4.02 25 35.8 31 Que esta pasando? Veamos las respuestas de todos los participantes, junto con la distribución de los datos, más la media y mediana por condición. plot_final = ggplot(DF, aes(Question, Error, color = Question, group = Question)) + geom_jitter(size = 2) + geom_violin(alpha = .2) + stat_summary( fun.y = median, geom = &quot;point&quot;, size = 3, color = &quot;black&quot;, shape = 0) + stat_summary( fun.y = mean, geom = &quot;point&quot;, size = 3, color = &quot;darkgrey&quot;, shape = 1) + theme_minimal() + scale_y_continuous(limits = c(-50, 50), breaks = seq(-50, 50, 10)) + labs(x = &quot;What is the probability of x?&quot;) plot_final TLDR: La manera en la visualizamos la información determina las conclusiones a las que llegamos. # Visualizamos el grafico inicial y el final, uno al lado del otro cowplot::plot_grid(plot_inicial, plot_final) Moraleja: es importante mostrar los datos individuales y/o la distribución de los datos SOURCE: https://www.autodeskresearch.com/publications/samestats 1.2 Por qué R? R es uno de los programas para data science mas populares, especialmente usado en la academia. El numero de paquetes que ofrecen funcionalidades de todo tipo no ha dejado de crecer. En 2019 el numero de paquetes en R-cran ha superado los 14,000, y el ritmo de crecimiento nos acerca a la singularidad… ;) SOURCE: https://gist.github.com/daroczig/3cf06d6db4be2bbe3368 Además de lo anterior, R es un programa de código abierto (esencial para poder hacer buena ciencia), con una comunidad de usuarios muy acogedora. Sus funciones de visualización son muy potentes (ver la r-graph-gallery para algunos ejemplos), siendo usadas como herramienta principal en algunos medios como la BBC. Con R puedes recoger datos interactivamente con shiny, preparar datos (o extraerlos de paginas web con rvest o RSelenium), visualizar datos estáticos con ggplot, animarlos con gganimate, visualizarlos con interactivamente con plotly o shiny. Puedes también analizar los datos con todas las técnicas imaginables, desde anovas con afex a modelos mixtos con lmer y/o afex, pasando por meta-análisis con metafor, SEM, Path analysis, mediación, con lavaan, análisis Bayesianos con brms o bayesfactor, y un larguísimo etc. Puedes llevar tus visualizaciones y análisis a reportes automáticos en múltiples formatos (pdf, html, docx) con Rmarkdown, crear libros como este con bookdown, páginas web con blogdown, e incluso papers completamente reproducibles (preparación y análisis de datos) en formato APA con papaja. 1.2.1 Bienvenida al tidyverse El tidyverse es un conjunto de paquetes que nos permitirán hacer de manera (habitualmente) intuitiva muchas tareas de preparación y visualización de datos. 1.2.1.1 Tidyverse vs Base R Muchas de las funciones que existen en el Tidyverse tienen un equivalente en base-R (la instalación por defecto de R). El Tidyverse tiene ventajas y desventajas. La ventaja fundamental es que el código resulta (habitualmente) más fácil de leer, los nombres de las funciones son mas intuitivos, y las maneras de hacer las cosas tienen a ser consistentes. La desventaja fundamental es que incrementamos el numero de dependencias (paquetes) de nuestro código. Veamos un ejemplo extraído de aqui. La misma operación con base-R o con tidyverse: Filter rows with conditions evaluated within groups: iris flowers with maximum “Petal.Width” for each “Species” 1.2.1.1.1 Tidyverse iris %&gt;% group_by(Species) %&gt;% filter(Petal.Width == max(Petal.Width)) ## # A tibble: 5 x 5 ## # Groups: Species [3] ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 5 3.5 1.6 0.6 setosa ## 2 5.9 3.2 4.8 1.8 versicolor ## 3 6.3 3.3 6 2.5 virginica ## 4 7.2 3.6 6.1 2.5 virginica ## 5 6.7 3.3 5.7 2.5 virginica 1.2.1.1.2 Base-R # First operate in the data.frame by group (split-apply) widest_petals &lt;- by(iris, INDICES = iris$Species, FUN = function(x){ x[x$Petal.Width == max(x$Petal.Width), ] }) # Then combine the results into a data.frame do.call(rbind, widest_petals) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## setosa 5.0 3.5 1.6 0.6 setosa ## versicolor 5.9 3.2 4.8 1.8 versicolor ## virginica.101 6.3 3.3 6.0 2.5 virginica ## virginica.110 7.2 3.6 6.1 2.5 virginica ## virginica.145 6.7 3.3 5.7 2.5 virginica 1.2.2 Antes de empezar Programar (tras la fase de euforia inicial) es muy difícil. Todos necesitamos ayuda. Contar con una comunidad robusta con la que compartir, preguntar, contribuir, ayuda muchísimo. SOURCE: http://www.keywordbasket.com/ZWZlY3RvIGR1bm5pbmcta3J1Z2Vy/ Hay algunos recursos que resultan muy útiles: Comunidad de usuarios de Rstudio Twiter!: por ejemplo #TidyTuesday (@thomas_mock), @dataandme, @rivaquiroga, @RLadiesSantiago Y otros que son más que imprescindibles. Nadie sabe como los antiguos podían programar antes de la llegada de Stackoverflow: Google: text size ggplot Stack overflow!!! 1.2.3 R para visualización de datos ggplot2 es el paquete por excelencia para visualización de datos. Su potencia va asociada a un nivel de complejidad considerable, hasta el punto que hay Cheat sheets oficiales, Cheat sheets buscables, y decenas de miles de preguntas en Stack Overflow. 1.2.3.1 Primeros pasos - con training wheels Para empezar a usar ggplot sin tener que preocuparnos de su complejidad, podemos usar la función esquisse:::esquisser() del paquete esquisse. Esta nos permite usar la potencia de ggplot para explorar una base de datos de manera muy sencilla. SOURCE: https://www.williamrchase.com/slides/intro_r_anthropology_2018#93 La manera fácil (1, 2, 3), usando esquisse: # 1) Asegurate que hemos instalado el paquete esquisse if (!require(&#39;esquisse&#39;)) install.packages(&#39;esquisse&#39;); library(&#39;esquisse&#39;) # 2) Carga el dataframe que desees. En este caso, &quot;iris&quot; data(iris) # 3) Lanza el wizard esquisser esquisse:::esquisser() 1.2.3.2 Aprendamos con Garrick Garrick Aden-Buie (@grrrck) ha creado una excelente introducción a ggplot2 y la gramática de gráficos. Vamos a usarla para familiarizarnos con algunas de las funcionalidades de ggplot. Antes de LANZAR LA PRESENTACION introducción a ggplot2 y la gramática de gráficos, asegúrate que tienes instalados los paquetes tidyverse y gapminder, y crea el DF pop_simple usando el código de abajo. if (!require(&#39;tidyverse&#39;)) install.packages(&#39;tidyverse&#39;); library(&#39;tidyverse&#39;) if (!require(&#39;gapminder&#39;)) install.packages(&#39;gapminder&#39;); library(&#39;gapminder&#39;) pop_simple &lt;- gapminder %&gt;% filter(country %in% c(&quot;Canada&quot;, &quot;China&quot;, &quot;United States&quot;), year &gt;= 1997) %&gt;% select(country, year, pop) %&gt;% mutate(pop = pop / 10^6) 1.3 Visualización de datos con ggplot2 1.3.1 Primeros pasos En esta sección vamos a ver algunos de los componentes que usaremos cuando visualicemos datos. Los ingredientes esenciales son: Aesthetic mappings (aes): Variables, colores, rellenos, formas, … Geoms (geom_): puntos, lineas, boxplots, … Facets (facet_): facet_wrap() y facet_grid() Transformaciones estadísticas: stat_summary, ..prop.., … SOURCE: https://skillgaze.com/2017/10/31/understanding-different-visualization-layers-of-ggplot/ Muchos de los ejemplos que usamos en esta sección vienen de R for data science: 1.3.2 Aesthetic mappings En aes() vamos a indicar las variables que queremos en los ejes x e y, el color de los puntos o lineas, el relleno de las barras, la forma de los puntos, el tipo de linea, la agrupación de los datos, etc. x: x = displ y: y = hwy color: color = class; color = “red”; color = “#FAA627” fill: fill = class; fill = “red”; fill = “#FAA627” shape: shape = class; shape = 0 ver codigo de las distintas formas linetype: linetype = class; linetype = “dashed” group: group = class ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class)) + geom_point() ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class)) + # geom_point() + geom_line() ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class)) + geom_point() + stat_summary(fun.y = mean, geom = &quot;line&quot;) 1.3.2.1 Color Para elegir paletas de colores Codigo HEX de colores # Grafico inicial ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point() # Color &quot;rojo&quot; para los puntos ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = &quot;red&quot;)) + geom_point() # Color en funcion de la variable &#39;class&#39; ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class)) + geom_point() Imagina que queremos asignar colores manualmente. ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = c(&quot;red&quot;, &quot;pink&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;black&quot;, &quot;grey&quot;, &quot;yellow&quot;))) + geom_point() # Error: Aesthetics must be either length 1 or the same as the data (234): colour Tenemos que indicar que el color depende de ‘class’, y después usar scale_color_manual() ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class)) + geom_point() + scale_color_manual(values = c(&quot;red&quot;, &quot;pink&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;black&quot;, &quot;grey&quot;, &quot;yellow&quot;)) 1.3.2.2 Shape Códigos para las distintas formas: SOURCE: https://r4ds.had.co.nz/data-visualisation.html#aesthetic-mappings ggplot(data = mpg, mapping = aes(x = displ, y = hwy, shape = class)) + geom_point() ## Warning: The shape palette can deal with a maximum of 6 discrete values ## because more than 6 becomes difficult to discriminate; you have 7. ## Consider specifying shapes manually if you must have them. ## Warning: Removed 62 rows containing missing values (geom_point). 1.3.2.3 Linetype Códigos para los distintos estilos de linea: SOURCE: http://sape.inf.usi.ch/quick-reference/ggplot2/linetype ggplot(mpg %&gt;% filter(class != &quot;subcompact&quot;), aes(x = displ, y = hwy, linetype = class, color = class)) + stat_summary(fun.y = mean, geom = &quot;line&quot;) 1.3.3 Geoms Una de las cosas más difíciles (inicialmente) cuando nos enfrentamos a unos datos nuevos es elegir el método más efectivo para visualizar los datos. Hay varios recursos interesantes sobre cómo elegir una gráfica. En esta sección veremos distintos tipos de geoms_(). 1.3.3.1 geom_point y geom_jitter # Points ggplot(mpg, aes(displ, hwy)) + geom_point() # Jitter Points ggplot(mpg, aes(displ, hwy)) + geom_jitter() 1.3.3.2 geom_smooth ggplot(mpg, aes(displ, hwy)) + geom_point() + geom_smooth() # Usamos lm ggplot(mpg, aes(displ, hwy)) + geom_point() + geom_smooth(method = &quot;lm&quot;) # Un smooth por cada clase ggplot(mpg, aes(displ, hwy, color = class)) + geom_point() + geom_smooth() # Coloreamos puntos pero mantenemos un solo smooth ggplot(mpg, aes(displ, hwy)) + geom_point(aes(color = class)) + geom_smooth() 1.3.3.3 geom_boxplot y geom_violin # Boxplots ggplot(mpg, aes(x = manufacturer, y = hwy, group = manufacturer)) + geom_boxplot(alpha = .2) + coord_flip() # Violins ggplot(mpg, aes(x = manufacturer, y = hwy, group = manufacturer)) + geom_violin(alpha = .2) + coord_flip() # Combinamos ambos ggplot(mpg, aes(x = manufacturer, y = hwy, group = manufacturer)) + geom_boxplot(alpha = .1) + geom_violin(alpha = .2) + coord_flip() 1.3.3.4 geom_histogram # Histogram ggplot(mpg, aes(x = manufacturer)) + geom_histogram(stat = &quot;count&quot;) + coord_flip() 1.3.3.5 geom_dotplot # Dotplot ggplot(mpg, aes(x = manufacturer)) + geom_dotplot() + coord_flip() 1.3.3.6 geom_density # Density ggplot(mpg, aes(displ)) + geom_density() ggplot(mpg, aes(displ, color = manufacturer, fill = manufacturer)) + geom_density(alpha = .2) ggplot(mpg, aes(displ, color = manufacturer, fill = manufacturer)) + geom_density(position = &quot;stack&quot;, alpha = .2) ggplot(mpg, aes(displ, color = manufacturer, fill = manufacturer)) + geom_density(position = &quot;fill&quot;, alpha = .2) 1.3.3.7 geom_density_ridges # geom_density_ridges ggplot(mpg, aes(displ, manufacturer, fill = manufacturer)) + ggridges::geom_density_ridges(alpha = .2) # geom_density_ridges junto con raincloud points y histograma ggplot(mpg, aes(displ, manufacturer, fill = manufacturer)) + # ggridges::geom_density_ridges(alpha = .2) + ggridges::geom_density_ridges(stat = &quot;binline&quot;, bins = 20, scale = 0.95, draw_baseline = FALSE) + ggridges::geom_density_ridges(jittered_points = TRUE, position = &quot;raincloud&quot;, alpha = 0.7, scale = 0.9) 1.3.4 Facets Hay dos funciones para facet_grid y facet_wrap. facet_wrap(~ variable) nos devuelve una matriz simétrica de gráficas. facet_grid( variable ~ .) nos devuelve tantas facetas como niveles de la variable, distribuidas verticalmente. 1.3.4.1 facet_grid ggplot(diamonds, aes(price, carat, color = carat)) + geom_point(alpha = .2) + facet_grid(~ cut) ggplot(mpg, aes(class, hwy, color = year)) + geom_jitter(alpha = .2, width = .2) + facet_grid(manufacturer ~ .) 1.3.4.2 facet_wrap ggplot(diamonds, aes(price, carat, color = carat)) + geom_point(alpha = .2) + facet_wrap(~ cut) ggplot(mpg, aes(hwy, class, color = year)) + geom_jitter(alpha = .2, width = .2) + facet_wrap(manufacturer ~ .) 1.3.5 Transformaciones estadísticas VER: https://r4ds.had.co.nz/data-visualisation.html#statistical-transformations 1.3.5.1 Proporciones # Gráfico inicial ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut)) # Proporciones ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1)) 1.3.5.2 stat_summary # Mediana, máximo y mínimo ggplot(diamonds) + stat_summary( aes(cut, carat), fun.ymin = min, fun.ymax = max, fun.y = median) # Media y media ± sd ggplot(diamonds) + stat_summary( aes(cut, carat), fun.ymin = function(x) mean(x) - sd(x), fun.ymax = function(x) mean(x) + sd(x), fun.y = mean) 1.3.5.3 Promedios por grupo ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point(alpha = .4) + stat_summary(data = iris %&gt;% group_by(Species) %&gt;% summarise(Petal.Length = mean(Petal.Length), Petal.Width = mean(Petal.Width)), fun.y = mean, geom = &quot;point&quot;, size = 4) 1.3.6 Personalización de gráficas 1.3.6.1 Coords # Gráfico inicial ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut)) # coord_flip() ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut)) + coord_flip() # coord_polar() ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut)) + coord_polar() 1.3.6.2 Scales # Grafico inicial ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut)) # Añadimos breaks en eje y ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut)) + scale_y_continuous(breaks = seq(0, 25000, 2000)) # Usamos separador de miles ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut)) + hrbrthemes::scale_y_comma(breaks = seq(0, 25000, 2000)) # Formato de $ ($M) ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut)) + scale_y_continuous(labels = scales::dollar_format(prefix=&quot;$&quot;, suffix = &quot;M&quot;)) # Escala log ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut)) + scale_y_log10() # Invertimos escala ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut)) + scale_y_reverse() # % ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1)) + scale_y_continuous(labels = scales::percent) 1.3.6.3 Colors and fill scales ggplot(iris, aes(x = Petal.Width, y = Petal.Length, color = Species)) + geom_point() + scale_color_brewer(palette = &quot;Blues&quot;) ggplot(iris, aes(x = Petal.Width, y = Petal.Length, color = Species)) + geom_point() + scale_color_grey(start = 0.2, end = 0.8, na.value = &quot;red&quot;) ggplot(iris, aes(x = Petal.Width, y = Petal.Length, color = Petal.Width)) + geom_point() + scale_color_gradient(low = &quot;red&quot;, high = &quot;blue&quot;) ggplot(iris, aes(x = Petal.Width, y = Petal.Length, color = Petal.Width)) + geom_point() + scale_colour_gradientn(colours = terrain.colors(3)) 1.3.6.4 Usando estilos https://ggplot2.tidyverse.org/reference/ggtheme.html https://michaeltoth.me/you-need-to-start-branding-your-graphs-heres-how-with-ggplot.html if (!require(&#39;ggplot2&#39;)) install.packages(&#39;ggplot2&#39;); library(&#39;ggplot2&#39;) # Create a base graph p &lt;- ggplot(iris, aes(x = Petal.Width, y = Petal.Length, color = Species)) + geom_point() + labs(title = &#39;A ggplot simple graph&#39;, subtitle = &#39;Simple tweaks to improve plots, or not&#39;, x = &#39;&#39;, y = &#39;&#39;, caption = &#39;https://github.com/gorkang / @gorkang&#39;) + theme_gray() # This is the default. Needed here because of the Bookdown theme p Usando el tema fivethirtyeight # if (!require(&#39;hrbrthemes&#39;)) install.packages(&#39;hrbrthemes&#39;); library(&#39;hrbrthemes&#39;) if (!require(&#39;ggthemes&#39;)) install.packages(&#39;ggthemes&#39;); library(&#39;ggthemes&#39;) p + ggthemes::scale_color_fivethirtyeight() + ggthemes::theme_fivethirtyeight() Usando el tema economist p + ggthemes::scale_color_economist() + ggthemes::theme_economist() 1.4 Visualización interactiva 1.4.0.1 Gráficas interactivas if (!require(&#39;plotly&#39;)) install.packages(&#39;plotly&#39;); library(&#39;plotly&#39;) plotly::ggplotly( ggplot(mpg, aes(displ, hwy)) + geom_point() + theme_grey() ) 1.4.0.2 Animando gráficas if (!require(&#39;gapminder&#39;)) install.packages(&#39;gapminder&#39;); library(&#39;gapminder&#39;) if (!require(&#39;gganimate&#39;)) devtools::install_github(&#39;thomasp85/gganimate&#39;); library(&#39;gganimate&#39;) p = ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) + geom_point(alpha = 0.7, show.legend = FALSE) + scale_colour_manual(values = country_colors) + scale_size(range = c(2, 12)) + scale_x_log10() + facet_wrap(~continent) + # Here comes the gganimate specific bits labs(title = &#39;Year: {frame_time}&#39;, x = &#39;GDP per capita&#39;, y = &#39;life expectancy&#39;) + transition_time(year) + ease_aes(&#39;linear&#39;) animate(p, renderer = ffmpeg_renderer()) 1.5 Ejercicios 1.5.1 Ejercicios con Geoms, colores… Usando el df mpg, Crea los 6 plots que se pueden ver más abajo. Aquí tienes el plot base, para hacer mas fácil la tarea: ggplot(mpg, aes(displ, hwy)) + geom_point() + theme_grey() Además de generar uno a uno los 6 plots, serías capaz de generar la figura que se ve abajo? Esto es, un plot que incluye los 6 plots juntos. Con el DF diamonds, crea el siguiente plot: El plot del panel (A) tiene varios problemas (los años no son enteros o factores, los casos no se muestran con un separador de miles, la leyenda esta a la derecha ocupado un espacio precioso, etc.). Trata de resolverlos e intenta llegar al resultado que se ve en el panel (B). Usa el df table1 del paquete {tidyr}? 1.5.2 Sintaxis aes() Alguna de estas gráficas dará un error? Sin correr el código, sabrías decir cuál de ellas? Hay varias soluciones posibles, ¿Cuales serían?. ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class)) + geom_point() + stat_summary(fun.y = mean, geom = &quot;line&quot;, linetype = &quot;dashed&quot;) ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class, linetype = class)) + geom_point() + stat_summary(fun.y = mean, geom = &quot;line&quot;) ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class)) + geom_point() + stat_summary(fun.y = mean, geom = &quot;line&quot;, linetype = class) Serías capaz de reproducir este gráfico, usando el df diamonds? Bibliografía Matejka, J., &amp; Fitzmaurice, G. (2017, May). Same stats, different graphs: Generating datasets with varied appearance and identical statistics through simulated annealing. In Proceedings of the 2017 CHI Conference on Human Factors in Computing Systems (pp. 1290-1294). ACM. https://bbc.github.io/rcookbook/ https://github.com/bbc/bbplot https://github.com/dreamRs/esquisse Garrick Aden-Buie. A Gentle Guide to the Grammar of Graphics with ggplot2: https://github.com/gadenbuie/gentle-ggplot2 Michael Toth. You Need to Start Branding Your Graphs. Here’s How, with ggplot!: https://michaeltoth.me/you-need-to-start-branding-your-graphs-heres-how-with-ggplot.html "]
]
