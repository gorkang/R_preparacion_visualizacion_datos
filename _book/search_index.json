[
["index.html", "R para preparación y visualización de datos Doctorado en Neurociencia Social y Cognición Introducción Objetivos Como empezar Bibliografía", " R para preparación y visualización de datos Doctorado en Neurociencia Social y Cognición Gorka Navarrete, ORCID: 0000-0001-7678-8656 Introducción El seminario estará centrado en el uso de R para la preparación y visualización de datos, además de la generación de reportes reproducibles. R es un lenguaje de programación abierto, con una gran comunidad orientada al trabajo, visualización y modelado de datos en contextos científicos y técnicos. Nos introduciremos de manera práctica a R, resolviendo problemas que encontramos habitualmente durante el quehacer científico, focalizandonos en el trabajo abierto, colaborativo y reproducible. Objetivos Dar las herramientas básicas a los alumnos para que puedan trabajar de manera autónoma con R y RStudio para el proceso de importación, transformación, visualización y reporte de datos. Al finalizar el curso los alumnos serán capaces de: Importar archivos de datos, transformar los datos, crear nuevas variables. Realizar análisis de datos exploratorios, visualizar distribuciones y comparar grupos. Generar reportes reproducibles con RMarkdown. Como empezar Si ya has completado los pasos indicados en Preparando nuesto sistema, puedes lanzar el siguiente codigo en tu ordenador para descargar los materiales del curso: if (!require(&#39;usethis&#39;)) install.packages(&#39;usethis&#39;); library(&#39;usethis&#39;) usethis::use_course() Bibliografía Wickham, H., &amp; Grolemund, G. (2016). R for data science: import, tidy, transform, visualize, and model data. O’Reilly Media, Inc. https://r4ds.had.co.nz/ Xie, Y., Allaire, J. J., &amp; Grolemund, G. (2018). R Markdown: The Definitive Guide. CRC Press. https://bookdown.org/yihui/rmarkdown/ Yihui Xie (2018). bookdown: Authoring Books and Technical Documents with R Markdown https://bookdown.org/yihui/bookdown/markdown-syntax.html Bryan, J., &amp; Hester, J. What They Forgot to Teach You About R. https://whattheyforgot.org/ "],
["preparando-sistema.html", "Preparando nuestro sistema 0.1 Empezando en A-B-C 0.2 Algo más sobre la instalación de paquetes Bibliografía", " Preparando nuestro sistema 0.1 Empezando en A-B-C Para poder iniciar el workshop necesitamos tener R y RStudio instalados, además de algunas librerias. Para tener un sistema funcional, completa los pasos A, B y C. Si ya tienes R y Rstudio instalados (recientemente), puedes pasar directamente al paso (C). (A) Instalar R R, es un lenguaje de programación especializado en el computación estadística y visualización de datos. Es recomendable tener instalada la última versión de R. Puedes usar uno de los enlaces siguientes: Windows: Descargar e instalar R para Windows Mac: Descargar e instalar R para Mac Ubuntu Linux: más detalles en la web de R. En un terminal: sudo apt-get install r-base (B) Instalar RStudio RStudio es un entorno integrado de desarrollo (IDE) para la programación R. Descargar e instalar RStudio. Una vez descargado e instalado, abre RStudio. Deberías ver algo parecido a lo siguiente: (C) Paquetes para el workshop Usaremos un buen numero de paquetes en el workshop. Hay algunos meta-paquetes que simplifican la instalacion de multiples paquetes (e.g. pacman, pak, …), pero en este caso vamos a usar una version casera. Copia y pega el codigo de abajo y ejecutalo [tecla ENTER] en la consola de R Studio. El proceso de instalación requiere internet y tardará un buen rato. list_of_packages = c(&quot;bookdown&quot;, &quot;corrplot&quot;, &quot;cowplot&quot;, &quot;esquisse&quot;, &quot;ggpubr&quot;, &quot;ggridges&quot;, &quot;janitor&quot;, &quot;knitr&quot;, &quot;plotly&quot;, &quot;psych&quot;, &quot;remotes&quot;, &quot;stringr&quot;, &quot;tictoc&quot;, &quot;tidyverse&quot;, &quot;usethis&quot;, &quot;yarrr&quot;) new_packages &lt;- list_of_packages[!(list_of_packages %in% installed.packages()[,&quot;Package&quot;])] if (length(new_packages)) install.packages(new_packages, dependencies = TRUE) 0.2 Algo más sobre la instalación de paquetes Los paquetes de R son una colección de funciones, datos y documentación que amplian las capacidacidades basicas de R. En 2019 el numero de paquetes en R-cran ha superado los 14,000 (ver este buscador de paquetes). Gran parte de las funciones y paquetes que utilizaremos en este workshop se encuentran contenidas en el meta-paquete “tidyverse” (este es un paquete de paquetes). Ya lo instalamos en (C), pero si quisieras instalarlo solo tendrias que ejecutar la siguiente linea en la consola de RStudio ((1) en la imagen de arriba): install.packages(&quot;tidyverse&quot;) Para instalar otro paquete diferente de “tidyverse”, remplaza su nombre entre comillas dentro de la funcion: install.packages(&quot;NOMBRE_DE_PAQUETE&quot;). Una vez instalado un paquete, no es necesario volver hacerlo, a menos que reinstales R. 0.2.1 Cargar paquetes Las funciones, datos y documentación dentro de nuestros paquetes no podran ser utilizadas hasta que se cargen en R (en realidad tambien pueden ser llamadas usando su referencia absoluta ::, por ejemplo: dplyr::tibble(columna = 1). La estructura de lo anterior es: nombre_paquete::nombre_de_funcion(parametros)). Una vez instalados, para cargar los paquetes se usa la función library(): library(tidyverse) 0.2.2 Todo en uno El siguiente código simplifica lo anterior. Comprueba que el paquete esta instalado; Si no se encuentra instalado, lo instala. Finalmente lo carga. if (!require(&#39;tidyverse&#39;)) install.packages(&#39;tidyverse&#39;); library(&#39;tidyverse&#39;) Para instalar multiples paquetes, podemos repetir la linea de mas arriba tantas veces como sea necesaria, o usar una version algo mas sofisticada como el código del apartado (C): if (!require('tidyverse')) install.packages('tidyverse'); library('tidyverse') if (!require('bookdown')) install.packages('bookdown'); library('bookdown') ... 0.2.3 Instalar paquetes de Github En ocasiones querremos instalar directamente la versión en desarrollo del paquete desde Github. Para eso podemos usar la función install_github del paquete remotes. Por ejemplo, para instalar el paquete renv desde su repositorio de Github: if (!require('remotes')) install.packages('remotes'); library('remotes') remotes::install_github(&quot;rstudio/renv&quot;) Bibliografía Algunos de los manuales que vamos a usar para el workshop son los siguientes: Wickham, H., &amp; Grolemund, G. (2016). R for data science: import, tidy, transform, visualize, and model data. O’Reilly Media, Inc. https://r4ds.had.co.nz/ Xie, Y., Allaire, J. J., &amp; Grolemund, G. (2018). R Markdown: The Definitive Guide. CRC Press. https://bookdown.org/yihui/rmarkdown/ Bryan, J., &amp; Hester, J. What They Forgot to Teach You About R. https://whattheyforgot.org/ "],
["introduccion-a-r-y-visualizacion-de-datos.html", "Capítulo 1 Introducción a R y visualización de datos 1.1 Introducción 1.2 Visualización de datos 1.3 Ejercicios Bibliografía", " Capítulo 1 Introducción a R y visualización de datos Paquetes para este capítulo if (!require(&#39;cowplot&#39;)) install.packages(&#39;cowplot&#39;); library(&#39;cowplot&#39;) if (!require(&#39;esquisse&#39;)) install.packages(&#39;esquisse&#39;); library(&#39;esquisse&#39;) if (!require(&#39;ggplot2&#39;)) install.packages(&#39;ggplot2&#39;); library(&#39;ggplot2&#39;) if (!require(&#39;ggthemes&#39;)) install.packages(&#39;ggthemes&#39;); library(&#39;ggthemes&#39;) if (!require(&#39;ggridges&#39;)) install.packages(&#39;ggridges&#39;); library(&#39;ggridges&#39;) if (!require(&#39;hrbrthemes&#39;)) install.packages(&#39;hrbrthemes&#39;); library(&#39;hrbrthemes&#39;) if (!require(&#39;gapminder&#39;)) install.packages(&#39;gapminder&#39;); library(&#39;gapminder&#39;) if (!require(&#39;tidyverse&#39;)) install.packages(&#39;tidyverse&#39;); library(&#39;tidyverse&#39;) 1.1 Introducción “These 13 datasets (the Datasaurus, plus 12 others) each have the same summary statistics (x/y mean, x/y standard deviation, and Pearson’s correlation) to two decimal places, while being drastically different in appearance.” (Matejka, J., &amp; Fitzmaurice, G., 2017) SOURCE: https://www.autodeskresearch.com/publications/samestats 1.1.1 Porque la visualización de datos es importante - ejemplo del mundo real Experimento sobre cálculo de probabilidades en un contexto real. Hay un examen con 70 temas. Las personas estudian un subconjunto de esos temas (e.g. 50 de 70). En el examen, les van a preguntar por 5 de esos temas, seleccionados al azar. Comparamos las siguientes dos preguntas: ¿Cuál es la probabilidad de que salga uno de los temas que has estudiado? ¿Cuál es la probabilidad de que no salga ninguno de los temas que has estudiado? Hacemos un analisis preliminar, y vemos que nuestra manipulación ha tenido un efecto considerable: # Leemos datos DF = read_csv( here::here(&quot;data&quot;, &quot;files&quot;, &quot;01-visualizacion-importante.csv&quot;)) %&gt;% mutate(Question_p_of = as.factor(Question_p_of)) # Promedio por condicion DF_descriptives = DF %&gt;% group_by(Question_p_of) %&gt;% summarise(Error_promedio = mean(Error), SD = sd(Error, na.rm = TRUE), N = n()) DF_descriptives ## # A tibble: 2 x 4 ## Question_p_of Error_promedio SD N ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 0 4.02 35.8 31 ## 2 1 -30.7 20.0 31 Hay una diferencia notable entre condiciones. Pasamos de un error promedio del -30.7% a tan solo 4%, simplemente cambiando la pregunta. Hagamos un sencillo análisis de regresión para ver si la diferencia es significativa, y cuanta varianza explica nuestro modelo. # Modelo de regresion modelo_regresion = lm(Error ~ Question_p_of, DF) # Resultados summary(modelo_regresion) ## ## Call: ## lm(formula = Error ~ Question_p_of, data = DF) ## ## Residuals: ## Min 1Q Median 3Q Max ## -53.516 -15.758 -2.758 25.984 70.742 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 4.016 5.212 0.771 0.444 ## Question_p_of1 -34.758 7.370 -4.716 1.48e-05 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 29.02 on 60 degrees of freedom ## Multiple R-squared: 0.2704, Adjusted R-squared: 0.2583 ## F-statistic: 22.24 on 1 and 60 DF, p-value: 1.479e-05 # Supuesto de normalidad de residuales hist(modelo_regresion$residuals) shapiro.test(modelo_regresion$residuals) ## ## Shapiro-Wilk normality test ## ## data: modelo_regresion$residuals ## W = 0.96215, p-value = 0.0532 Todo es hermoso. Tenemos un efecto claramente significativo de la pregunta (y con un R2-ajustado de .258, no está nada mal), y además, nuestro modelo no incumple el supuesto de normalidad de residuos (por los pelos!). Preparamos un plot con promedios y barras con error standard para nuestro paper: # Plot para publicación plot_inicial = ggplot(DF, aes(Question_p_of, Error, fill = Question_p_of)) + stat_summary( fun.y = mean, geom = &quot;point&quot;, size = 4, color = &quot;darkgrey&quot;) + stat_summary(geom = &quot;errorbar&quot;, fun.data = mean_se, position = &quot;dodge&quot;, color = &quot;black&quot;, width = .2) + scale_y_continuous(limits = c(-50, 50), breaks = seq(-50, 50, 10)) + theme_minimal() plot_inicial Solo por curiosidad, veamos boxplots de los dos grupos… mmmm… hay algo extraño: # Boxplots por condición ggplot(DF, aes(Question_p_of, Error, color = Question_p_of, group = Question_p_of)) + geom_boxplot(alpha = .5) + theme_minimal() + scale_y_continuous(limits = c(-50, 50), breaks = seq(-50, 50, 10)) + labs(x = &quot;What is the probability of x?&quot;) Volvermos a extraer descriptivos… pero esta vez incluimos la mediana. # Promedio y mediana por condicion DF %&gt;% group_by(Question_p_of) %&gt;% summarise(Error_promedio = mean(Error), Error_mediana = median(Error), SD = sd(Error, na.rm = TRUE), N = n()) ## # A tibble: 2 x 5 ## Question_p_of Error_promedio Error_mediana SD N ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 0 4.02 25 35.8 31 ## 2 1 -30.7 -37 20.0 31 Que esta pasando? Veamos las respuestas de todos los participantes, junto con la distribución de los datos, más la media y mediana por condición. plot_final = ggplot(DF, aes(Question_p_of, Error, color = Question_p_of, group = Question_p_of)) + geom_jitter(size = 2) + geom_violin(alpha = .2) + stat_summary( fun.y = median, geom = &quot;point&quot;, size = 3, color = &quot;black&quot;, shape = 0) + stat_summary( fun.y = mean, geom = &quot;point&quot;, size = 3, color = &quot;darkgrey&quot;, shape = 1) + theme_minimal() + scale_y_continuous(limits = c(-50, 50), breaks = seq(-50, 50, 10)) + labs(x = &quot;What is the probability of x?&quot;) plot_final TLDR: La manera en la visualizamos la información determina las conclusiones a las que llegamos. # Visualizamos el grafico inicial y el final, uno al lado del otro cowplot::plot_grid(plot_inicial, plot_final) 1.1.2 Por qué R? R es uno de los programas para data science mas populares, especialmente usado en la academia. El numero de paquetes que ofrecen funcionalidades de todo tipo no ha dejado de crecer. En 2019 el numero de paquetes en R-cran ha superado los 14,000, y el ritmo de crecimiento nos acerca a la singularidad… ;) SOURCE: https://gist.github.com/daroczig/3cf06d6db4be2bbe3368 Además de lo anterior, R es un programa de codigo abierto (esencial para poder hacer buena ciencia), con una comunidad de usuarios muy acogedora. Sus funciones de visualización son muy potentes (ver la r-graph-gallery para algunos ejemplos), siendo usadas como herramienta principal en algunos medios como la BBC. 1.1.3 Bienvenida al tidyverse El tidyverse es un conjunto de paquetes que nos permitirán hacer de manera (habitualmente) intuitiva muchas tareas de preparación y visualización de datos. 1.1.3.1 Tidyverse vs Base R Muchas de las funciones que existen en el Tidyverse tienen un equivalente en base-R (la instalación por defecto de R). El Tidyverse tiene ventajas y desventajas. La ventaja fundamental es que el codigo resulta (habitualmente) más facil de leer, los nombres de las funciones son mas intuitivos, y las maneras de hacer las cosas tienen a ser consistentes. La desventaja fundamental es que incrementamos el numero de dependencias (paquetes) de nuestro codigo. Veamos un ejemplo extraido de aqui. Filter rows with conditions evaluated within groups: iris flowers with maximum “Petal.Width” for each “Species”: 1.1.3.1.1 Base-R # First operate in the data.frame by group (split-apply) widest_petals &lt;- by(iris, INDICES = iris$Species, FUN = function(x){ x[x$Petal.Width == max(x$Petal.Width), ] }) # Then combine the results into a data.frame do.call(rbind, widest_petals) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## setosa 5.0 3.5 1.6 0.6 setosa ## versicolor 5.9 3.2 4.8 1.8 versicolor ## virginica.101 6.3 3.3 6.0 2.5 virginica ## virginica.110 7.2 3.6 6.1 2.5 virginica ## virginica.145 6.7 3.3 5.7 2.5 virginica 1.1.3.1.2 Tidyverse iris %&gt;% group_by(Species) %&gt;% filter(Petal.Width == max(Petal.Width)) ## # A tibble: 5 x 5 ## # Groups: Species [3] ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 5 3.5 1.6 0.6 setosa ## 2 5.9 3.2 4.8 1.8 versicolor ## 3 6.3 3.3 6 2.5 virginica ## 4 7.2 3.6 6.1 2.5 virginica ## 5 6.7 3.3 5.7 2.5 virginica 1.2 Visualización de datos ggplot2 es el paquete por excelencia para visualizacion de datos. Su potencia va asociada a un nivel de complejidad considerable, hasta el punto que hay Cheat sheets oficiales, Cheat sheets buscables, y decenas de miles de preguntas en Stack Overflow. 1.2.1 Primeros pasos - con training wheels Para empezar a usar ggplot sin tener que preocuparnos de su complejidad, podemos usar la funcion esquisse:::esquisser() del paquete esquisse. Esta nos permite usar la potencia de ggplot para explorar una base de datos de manera muy sencilla. SOURCE: https://www.williamrchase.com/slides/intro_r_anthropology_2018#93 La manera facil (1, 2, 3), usando esquisse: # 1) Asegurate que hemos instalado el paquete esquisse if (!require(&#39;esquisse&#39;)) install.packages(&#39;esquisse&#39;); library(&#39;esquisse&#39;) # 2) Carga el dataframe que desees. En este caso, &quot;iris&quot; data(iris) # 3) Lanza el wizard esquisser esquisse:::esquisser() 1.2.2 Aprendamos con Garrick Garrick Aden-Buie (@grrrck) ha creado una excelente introducción a ggplot2 y la gramática de gráficos. Vamos a usarla para familiarizarnos con algunas de las funcionalidades de ggplot. Antes de LANZAR LA PRESENTACION introducción a ggplot2 y la gramática de gráficos, asegurate que tienes instalados los paquetes tidyverse y gapminder, y crea el DF pop_simple usando el codigo de abajo. if (!require(&#39;tidyverse&#39;)) install.packages(&#39;tidyverse&#39;); library(&#39;tidyverse&#39;) if (!require(&#39;gapminder&#39;)) install.packages(&#39;gapminder&#39;); library(&#39;gapminder&#39;) pop_simple &lt;- gapminder %&gt;% filter(country %in% c(&quot;Canada&quot;, &quot;China&quot;, &quot;United States&quot;), year &gt;= 1997) %&gt;% select(country, year, pop) %&gt;% mutate(pop = pop / 10^6) 1.2.3 Primeros pasos En esta sección vamos a ver algunos de los componentes que usaremos cuando visualicemos datos. Los ingredientes esenciales son: Aesthetic mappings (aes): Variables, colores, rellenos, formas, … Geoms (geom_): puntos, lineas, boxplots, … Facets (facet_): facet_wrap() y facet_grid() Transformaciones estadísticas: stat_summary, ..prop.., … Muchos de los ejemplos que usamos en esta sección vienen de R for data science: 1.2.4 Aesthetic mappings En aes() vamos a indicar las variables que queremos en los ejes x e y, el color de los puntos o lineas, el relleno de las barras, la forma de los puntos, el tipo de linea, la agrupación de los datos, etc. x: x = displ y: y = hwy color: color = class; color = “red”; color = “#FAA627” fill: fill = class; fill = “red”; fill = “#FAA627” shape: shape = class; shape = 0 ver codigo de las distintas formas linetype: linetype = class; linetype = “dashed” group: group = class ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class)) + geom_point() ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class)) + # geom_point() + geom_line() ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class)) + geom_point() + stat_summary(fun.y = mean, geom = &quot;line&quot;) 1.2.4.1 Color http://colorbrewer2.org https://www.rapidtables.com/web/color/RGB_Color.html#color-picker # Grafico inicial ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point() # Color &quot;rojo&quot; para los puntos ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = &quot;red&quot;)) + geom_point() # Color en funcion de la variable &#39;class&#39; ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class)) + geom_point() Imagina que queremos asignar colores manualmente. ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = c(&quot;red&quot;, &quot;pink&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;black&quot;, &quot;grey&quot;, &quot;yellow&quot;))) + geom_point() # Error: Aesthetics must be either length 1 or the same as the data (234): colour Tenemos que indicar que el color depende de ‘class’, y despues usar scale_color_manual() ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class)) + geom_point() + scale_color_manual(values = c(&quot;red&quot;, &quot;pink&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;black&quot;, &quot;grey&quot;, &quot;yellow&quot;)) 1.2.4.2 Shape Codigos para las distintas formas: SOURCE: https://r4ds.had.co.nz/data-visualisation.html#aesthetic-mappings ggplot(data = mpg, mapping = aes(x = displ, y = hwy, shape = class)) + geom_point() ## Warning: The shape palette can deal with a maximum of 6 discrete values ## because more than 6 becomes difficult to discriminate; you have 7. ## Consider specifying shapes manually if you must have them. ## Warning: Removed 62 rows containing missing values (geom_point). 1.2.4.3 Linetype Codigos para los distintos estilos de linea: SOURCE: http://sape.inf.usi.ch/quick-reference/ggplot2/linetype ggplot(mpg %&gt;% filter(class != &quot;subcompact&quot;), aes(x = displ, y = hwy, linetype = class, color = class)) + stat_summary(fun.y = mean, geom = &quot;line&quot;) Alguna de estas graficas dará un error? ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class)) + geom_point() + stat_summary(fun.y = mean, geom = &quot;line&quot;, linetype = &quot;dashed&quot;) ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class, linetype = class)) + geom_point() + stat_summary(fun.y = mean, geom = &quot;line&quot;) ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class)) + geom_point() + stat_summary(fun.y = mean, geom = &quot;line&quot;, linetype = class) #Error in rep(value[[k]], length.out = n) : attempt to replicate an object of type &#39;builtin&#39; # SOLUCION 1 ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class)) + geom_point() + stat_summary(fun.y = mean, geom = &quot;line&quot;, aes(linetype = class)) # SOLUCION 2 ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class, linetype = class)) + geom_point() + stat_summary(fun.y = mean, geom = &quot;line&quot;) # SOLUCION 3 ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class)) + geom_point() + stat_summary(fun.y = mean, geom = &quot;line&quot;, linetype = &quot;dashed&quot;) 1.2.5 Geoms La importancia de mostrar los datos individuales y/o la distribución de los datos: SOURCE: https://www.autodeskresearch.com/publications/samestats Como elegir una gráfica # Points and smooth ggplot(mpg, aes(displ, hwy)) + geom_point() ggplot(mpg, aes(displ, hwy)) + geom_point() + geom_smooth() # Matices ggplot(mpg, aes(displ, hwy, color = class)) + geom_point() + geom_smooth() ggplot(mpg, aes(displ, hwy)) + geom_point(aes(color = class)) + geom_smooth() ggplot(mpg, aes(displ, hwy)) + geom_point() + geom_smooth(method = &quot;lm&quot;) # Boxplots y violins ggplot(mpg, aes(x = manufacturer, y = hwy, group = manufacturer)) + geom_point() + geom_boxplot(alpha = .2) + coord_flip() ggplot(mpg, aes(x = manufacturer, y = hwy, group = manufacturer)) + geom_point() + geom_violin(alpha = .2) + coord_flip() ggplot(mpg, aes(x = manufacturer, y = hwy, group = manufacturer)) + geom_jitter() + geom_violin(alpha = .2) + coord_flip() # Histogram ggplot(mpg, aes(x = manufacturer)) + geom_histogram(stat = &quot;count&quot;) + coord_flip() # Dotplot ggplot(mpg, aes(x = manufacturer)) + geom_dotplot() + coord_flip() # Density ggplot(mpg, aes(displ)) + geom_density() ggplot(mpg, aes(displ, color = manufacturer, fill = manufacturer)) + geom_density(alpha = .2) ggplot(mpg, aes(displ, color = manufacturer, fill = manufacturer)) + geom_density(position = &quot;stack&quot;, alpha = .2) ggplot(mpg, aes(displ, color = manufacturer, fill = manufacturer)) + geom_density(position = &quot;fill&quot;, alpha = .2) # GGridges ggplot(mpg, aes(displ, manufacturer, fill = manufacturer)) + ggridges::geom_density_ridges(alpha = .2) ggplot(mpg, aes(displ, manufacturer, fill = manufacturer)) + # ggridges::geom_density_ridges(alpha = .2) + ggridges::geom_density_ridges(stat = &quot;binline&quot;, bins = 20, scale = 0.95, draw_baseline = FALSE) + ggridges::geom_density_ridges(jittered_points = TRUE, position = &quot;raincloud&quot;, alpha = 0.7, scale = 0.9) 1.2.5.1 Ejercicios con Geoms Crea los siguientes plots: Crea los siguientes plots: ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity)) 1.2.6 Facets ggplot(iris, aes(x = Petal.Width, y = Petal.Length, color = Species)) + geom_point() + facet_grid(~ Species) 1.2.7 Transformaciones estadísticas VER: https://r4ds.had.co.nz/data-visualisation.html#statistical-transformations ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut)) ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1)) ggplot(data = diamonds) + stat_summary( mapping = aes(x = cut, y = depth), fun.ymin = min, fun.ymax = max, fun.y = median ) ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point(alpha = .4) + stat_summary(data = iris %&gt;% group_by(Species) %&gt;% summarise(Petal.Length = mean(Petal.Length), Petal.Width = mean(Petal.Width)), fun.y = mean, geom = &quot;point&quot;, size = 4) 1.2.8 Personalización de gráficas 1.2.8.1 Coords # coord_flip() ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut)) + coord_flip() # coord_polar() ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut)) + coord_polar() 1.2.8.2 Scales ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut)) + scale_y_continuous(breaks = seq(0, 25000, 2000)) ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut)) + hrbrthemes::scale_y_comma(breaks = seq(0, 25000, 2000)) ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut)) + scale_y_continuous(labels = scales::dollar_format(prefix=&quot;$&quot;, suffix = &quot;M&quot;)) ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut)) + scale_y_log10() ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut)) + scale_y_reverse() ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1)) + scale_y_continuous(labels = scales::percent) 1.2.8.3 Colors and fill scales ggplot(iris, aes(x = Petal.Width, y = Petal.Length, color = Species)) + geom_point() + scale_color_brewer(palette = &quot;Blues&quot;) ggplot(iris, aes(x = Petal.Width, y = Petal.Length, color = Species)) + geom_point() + scale_color_grey(start = 0.2, end = 0.8, na.value = &quot;red&quot;) ggplot(iris, aes(x = Petal.Width, y = Petal.Length, color = Petal.Width)) + geom_point() + scale_color_gradient(low = &quot;red&quot;, high = &quot;blue&quot;) ggplot(iris, aes(x = Petal.Width, y = Petal.Length, color = Petal.Width)) + geom_point() + scale_colour_gradientn(colours = terrain.colors(3)) 1.2.8.4 Usando estilos https://ggplot2.tidyverse.org/reference/ggtheme.html https://michaeltoth.me/you-need-to-start-branding-your-graphs-heres-how-with-ggplot.html if (!require(&#39;ggplot2&#39;)) install.packages(&#39;ggplot2&#39;); library(&#39;ggplot2&#39;) # Create a base graph p &lt;- ggplot(iris, aes(x = Petal.Width, y = Petal.Length, color = Species)) + geom_point() + labs(title = &#39;A ggplot simple graph&#39;, subtitle = &#39;Simple tweaks to improve plots, or not&#39;, x = &#39;&#39;, y = &#39;&#39;, caption = &#39;https://github.com/gorkang / @gorkang&#39;) + theme_gray() # This is the default. Needed here because of the Bookdown theme p Usando el tema fivethirtyeight # if (!require(&#39;hrbrthemes&#39;)) install.packages(&#39;hrbrthemes&#39;); library(&#39;hrbrthemes&#39;) if (!require(&#39;ggthemes&#39;)) install.packages(&#39;ggthemes&#39;); library(&#39;ggthemes&#39;) p + ggthemes::scale_color_fivethirtyeight() + ggthemes::theme_fivethirtyeight() Usando el tema economist p + ggthemes::scale_color_economist() + ggthemes::theme_economist() 1.3 Ejercicios Datasets: fivethirtyeight Our World in Data TidyTuesday Bibliografía Matejka, J., &amp; Fitzmaurice, G. (2017, May). Same stats, different graphs: Generating datasets with varied appearance and identical statistics through simulated annealing. In Proceedings of the 2017 CHI Conference on Human Factors in Computing Systems (pp. 1290-1294). ACM. https://bbc.github.io/rcookbook/ https://github.com/bbc/bbplot https://github.com/dreamRs/esquisse Garrick Aden-Buie. A Gentle Guide to the Grammar of Graphics with ggplot2: https://github.com/gadenbuie/gentle-ggplot2 Michael Toth. You Need to Start Branding Your Graphs. Here’s How, with ggplot!: https://michaeltoth.me/you-need-to-start-branding-your-graphs-heres-how-with-ggplot.html "]
]
